{
  "executionId" : "e10443b5-8540-4d64-a5de-a08a4078325f",
  "computingTime" : 1126257,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.297557840616966,
    "meanNumConcerns" : 1.7906691221608346,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "062c80a0-4aa4-47eb-bb67-5a8937fa0312",
    "objectives" : {
      "NumberOfConcerns" : 1.005827905382242,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5436088810241053,
      "MetricsIntensity" : 0.06040599670744057,
      "Density" : 1.0003897875657766
    },
    "euclideanDistance" : 10.114921107071376,
    "generation" : 41,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7901159243441123,
      "LackOfCohesion" : 0.5436088810241053,
      "MetricsIntensity" : 0.06040599670744057,
      "Density" : 3.2798722044728437
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "dfb27632-224a-485a-86bd-dc08d1ddd868",
    "objectives" : {
      "NumberOfConcerns" : 1.0054850874185808,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5435488577924699,
      "MetricsIntensity" : 0.06043873448272863,
      "Density" : 1.0007795751315534
    },
    "euclideanDistance" : 10.114922551381945,
    "generation" : 16,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7895057962172054,
      "LackOfCohesion" : 0.5435488577924699,
      "MetricsIntensity" : 0.06043873448272863,
      "Density" : 3.28115015974441
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "5ecc438a-9eb5-4d70-bc25-42abd895eb95",
    "objectives" : {
      "NumberOfConcerns" : 1.0061707233459034,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5429283102414671,
      "MetricsIntensity" : 0.060469244218519916,
      "Density" : 1.000584681348665
    },
    "euclideanDistance" : 11.104592604351861,
    "generation" : 40,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.791819291819292,
      "LackOfCohesion" : 0.5429283102414671,
      "MetricsIntensity" : 0.06046924421851992,
      "Density" : 3.284708893154191
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b89b20b0-701d-4cdb-b932-9f4e90e19e51",
    "objectives" : {
      "NumberOfConcerns" : 1.0071991772368871,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.542960913267028,
      "MetricsIntensity" : 0.060464288440726474,
      "Density" : 1.0007795751315534
    },
    "euclideanDistance" : 11.104704967901649,
    "generation" : 28,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7936507936507935,
      "LackOfCohesion" : 0.542960913267028,
      "MetricsIntensity" : 0.06046428844072647,
      "Density" : 3.283248081841432
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "696eb150-6fa0-44f9-82ba-d731673465fd",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5443764776499581,
      "MetricsIntensity" : 0.06046912258507873,
      "Density" : 1.0015591502631067
    },
    "euclideanDistance" : 13.088570556455123,
    "generation" : 31,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7875457875457874,
      "LackOfCohesion" : 0.5443764776499581,
      "MetricsIntensity" : 0.060469122585078736,
      "Density" : 3.2858056265984645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "cc63b552-16ae-4afb-b9da-52626c84c0cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0061707233459034,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5422757989539858,
      "MetricsIntensity" : 0.06041416447195842,
      "Density" : 1.00116936269733
    },
    "euclideanDistance" : 13.088637535309863,
    "generation" : 38,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.791819291819292,
      "LackOfCohesion" : 0.5422757989539858,
      "MetricsIntensity" : 0.06041416447195843,
      "Density" : 3.282428115015974
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "dcf4bea0-413e-4ffc-bc6a-9d5502f3d54e",
    "objectives" : {
      "NumberOfConcerns" : 1.0051422694549195,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5427515980775298,
      "MetricsIntensity" : 0.0605161824187972,
      "Density" : 1.0
    },
    "euclideanDistance" : 14.082206946618673,
    "generation" : 45,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7910812461820402,
      "LackOfCohesion" : 0.5427515980775298,
      "MetricsIntensity" : 0.0605161824187972,
      "Density" : 3.284891165172855
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "ca782170-082e-4da0-a279-cb5783997b15",
    "objectives" : {
      "NumberOfConcerns" : 1.0068563592732258,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5420220347089687,
      "MetricsIntensity" : 0.060461335235802334,
      "Density" : 1.000584681348665
    },
    "euclideanDistance" : 14.08234259247825,
    "generation" : 31,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7941356139279168,
      "LackOfCohesion" : 0.5420220347089687,
      "MetricsIntensity" : 0.06046133523580234,
      "Density" : 3.284708893154192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "db13eb3e-d54e-4fb1-b586-b92015a51c6a",
    "objectives" : {
      "NumberOfConcerns" : 1.0065135413095647,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5419619174707059,
      "MetricsIntensity" : 0.06049412428403524,
      "Density" : 1.0023387253946598
    },
    "euclideanDistance" : 14.08244065097832,
    "generation" : 29,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.793524740378741,
      "LackOfCohesion" : 0.5419619174707059,
      "MetricsIntensity" : 0.06049412428403525,
      "Density" : 3.2904670505438265
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "c04c317c-fffa-48b3-8419-9ad4531127a7",
    "objectives" : {
      "NumberOfConcerns" : 1.003428179636613,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5439753075560279,
      "MetricsIntensity" : 0.06053255202818509,
      "Density" : 0.9990255310855584
    },
    "euclideanDistance" : 16.071854076258138,
    "generation" : 42,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.788026878436164,
      "LackOfCohesion" : 0.5439753075560279,
      "MetricsIntensity" : 0.060532552028185097,
      "Density" : 3.277493606138107
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.numbers, org.apache.dubbo.registry.client.InstanceAddressURL.methodNumbers, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "b5ccb250-3e88-480c-a4f9-83becd26c624",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5430754469123482,
      "MetricsIntensity" : 0.06051337275084082,
      "Density" : 0.999415318651335
    },
    "euclideanDistance" : 16.071869213134455,
    "generation" : 43,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7886377519853391,
      "LackOfCohesion" : 0.5430754469123482,
      "MetricsIntensity" : 0.06051337275084082,
      "Density" : 3.2787723785166256
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "a68db7a3-e06c-4570-bfd0-e8cc12ef4129",
    "objectives" : {
      "NumberOfConcerns" : 1.0027425437092903,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5442008995247116,
      "MetricsIntensity" : 0.060516060690106656,
      "Density" : 1.0009744689144415
    },
    "euclideanDistance" : 16.071940122742745,
    "generation" : 39,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7868051313378126,
      "LackOfCohesion" : 0.5442008995247116,
      "MetricsIntensity" : 0.06051606069010666,
      "Density" : 3.2859884836852205
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "7c59317b-2efb-42ef-adb9-d35b7fc08d3b",
    "objectives" : {
      "NumberOfConcerns" : 1.005827905382242,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.541844473808592,
      "MetricsIntensity" : 0.06050830402324071,
      "Density" : 1.0
    },
    "euclideanDistance" : 17.06777508827376,
    "generation" : 46,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7933985330073354,
      "LackOfCohesion" : 0.541844473808592,
      "MetricsIntensity" : 0.06050830402324072,
      "Density" : 3.284891165172855
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2ca1ff5d-f51e-49d0-bc80-0d66ceefde77",
    "objectives" : {
      "NumberOfConcerns" : 1.0041138155639355,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5427619461237979,
      "MetricsIntensity" : 0.06059347592690081,
      "Density" : 1.0019489378288833
    },
    "euclideanDistance" : 17.06781791349169,
    "generation" : 46,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7903422982885084,
      "LackOfCohesion" : 0.5427619461237979,
      "MetricsIntensity" : 0.06059347592690082,
      "Density" : 3.291293213828425
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.NAME], extractedMethods=[org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getInjvmProtocol(ScopeModel), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL), org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "d0465c6e-4d92-4301-846e-48aa16a29521",
    "objectives" : {
      "NumberOfConcerns" : 1.0054850874185808,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.541784309456506,
      "MetricsIntensity" : 0.06054111876821989,
      "Density" : 1.0017540440459949
    },
    "euclideanDistance" : 17.06785595471261,
    "generation" : 39,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7927872860635699,
      "LackOfCohesion" : 0.541784309456506,
      "MetricsIntensity" : 0.0605411187682199,
      "Density" : 3.2906530089628685
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "1a586fee-167c-4340-ae41-0a13f5b2ed03",
    "objectives" : {
      "NumberOfConcerns" : 1.003428179636613,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5413420496535047,
      "MetricsIntensity" : 0.06059342590367035,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 20.057468243702864,
    "generation" : 45,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7902140672782874,
      "LackOfCohesion" : 0.5413420496535047,
      "MetricsIntensity" : 0.06059342590367035,
      "Density" : 3.2865384615384614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "e74e693d-f439-47fb-9647-63ffa4a48d8a",
    "objectives" : {
      "NumberOfConcerns" : 1.002399725745629,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5417266180263084,
      "MetricsIntensity" : 0.060557775775006546,
      "Density" : 0.9982459559540051
    },
    "euclideanDistance" : 22.052175293418074,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7883792048929663,
      "LackOfCohesion" : 0.5417266180263084,
      "MetricsIntensity" : 0.060557775775006546,
      "Density" : 3.2791293213828436
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "ecd33932-3887-4abb-a530-aa634fb39e7c",
    "objectives" : {
      "NumberOfConcerns" : 1.0017140898183066,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5438651156953881,
      "MetricsIntensity" : 0.06059451082647466,
      "Density" : 0.9980510621711167
    },
    "euclideanDistance" : 27.042540524130754,
    "generation" : 34,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7871559633027525,
      "LackOfCohesion" : 0.5438651156953881,
      "MetricsIntensity" : 0.06059451082647465,
      "Density" : 3.28058936579116
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2672d506-98d2-49b4-bc84-c83b85a71c8a",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5437233494827554,
      "MetricsIntensity" : 0.06073417522230292,
      "Density" : 0.9998051062171117
    },
    "euclideanDistance" : 27.042577390787475,
    "generation" : 44,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7881200244947948,
      "LackOfCohesion" : 0.5437233494827554,
      "MetricsIntensity" : 0.06073417522230292,
      "Density" : 3.2905708787684413
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "c5762857-d6bc-4242-be86-e7b2681c34f7",
    "objectives" : {
      "NumberOfConcerns" : 1.0013712718546453,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5442246617622901,
      "MetricsIntensity" : 0.06067072016391257,
      "Density" : 0.99766127460534
    },
    "euclideanDistance" : 31.03704131939284,
    "generation" : 40,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7876376988984086,
      "LackOfCohesion" : 0.5442246617622901,
      "MetricsIntensity" : 0.06067072016391256,
      "Density" : 3.279308135810378
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "81c39f43-555a-44c9-a002-a6926bf05a5b",
    "objectives" : {
      "NumberOfConcerns" : 1.0013712718546453,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.544456537074713,
      "MetricsIntensity" : 0.060670449932201644,
      "Density" : 0.9980510621711167
    },
    "euclideanDistance" : 31.03705791744854,
    "generation" : 41,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7876376988984088,
      "LackOfCohesion" : 0.544456537074713,
      "MetricsIntensity" : 0.060670449932201644,
      "Density" : 3.2805893657911596
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "f8c2bb30-783a-4085-9e17-bceee159f08b",
    "objectives" : {
      "NumberOfConcerns" : 1.0006856359273226,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5441087188176194,
      "MetricsIntensity" : 0.06068507204380734,
      "Density" : 0.9966868056908985
    },
    "euclideanDistance" : 34.0337258216971,
    "generation" : 18,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7875076546233921,
      "LackOfCohesion" : 0.5441087188176194,
      "MetricsIntensity" : 0.06068507204380733,
      "Density" : 3.2782051282051268
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "44bada77-958e-4b36-8406-7b1c4701d701",
    "objectives" : {
      "NumberOfConcerns" : 1.0037709976002742,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5414702586334001,
      "MetricsIntensity" : 0.06052000065961099,
      "Density" : 1.0013642564802183
    },
    "euclideanDistance" : 38.03034498004513,
    "generation" : 45,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.788637751985339,
      "LackOfCohesion" : 0.5414702586334001,
      "MetricsIntensity" : 0.06052000065961099,
      "Density" : 3.287268074216251
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d8e583e-d5ab-4dce-927e-805ef8eca1dd",
    "objectives" : {
      "NumberOfConcerns" : 1.0041138155639355,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.541155499860305,
      "MetricsIntensity" : 0.060600106079838054,
      "Density" : 1.00116936269733
    },
    "euclideanDistance" : 39.02956707798968,
    "generation" : 41,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7903422982885089,
      "LackOfCohesion" : 0.541155499860305,
      "MetricsIntensity" : 0.060600106079838054,
      "Density" : 3.2908392056374125
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "bc5e08f5-0ddd-4bc5-9600-53a39bbf0a9a",
    "objectives" : {
      "NumberOfConcerns" : 1.0006856359273226,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5425544115256745,
      "MetricsIntensity" : 0.06062440465940951,
      "Density" : 1.0001948937828884
    },
    "euclideanDistance" : 41.028036781881326,
    "generation" : 42,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7842298288508556,
      "LackOfCohesion" : 0.5425544115256745,
      "MetricsIntensity" : 0.06062440465940952,
      "Density" : 3.287636130685459
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "05d8e8c5-7ba9-42f7-9a7e-f19b132c482f",
    "objectives" : {
      "NumberOfConcerns" : 1.0047994514912582,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.541219622516381,
      "MetricsIntensity" : 0.06057066234842294,
      "Density" : 0.9998051062171117
    },
    "euclideanDistance" : 41.02811011578609,
    "generation" : 32,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.791564792176039,
      "LackOfCohesion" : 0.541219622516381,
      "MetricsIntensity" : 0.06057066234842294,
      "Density" : 3.2863549007046755
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "d09245bb-c369-4921-b28e-01a86ffbd5f1",
    "objectives" : {
      "NumberOfConcerns" : 1.0030853616729516,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5409771200613017,
      "MetricsIntensity" : 0.06064722054541878,
      "Density" : 1.000584681348665
    },
    "euclideanDistance" : 42.02741586485115,
    "generation" : 37,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7896024464831808,
      "LackOfCohesion" : 0.5409771200613017,
      "MetricsIntensity" : 0.06064722054541878,
      "Density" : 3.291025641025641
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "78da8b69-3f73-427a-b71e-eb5834614187",
    "objectives" : {
      "NumberOfConcerns" : 1.0003428179636613,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5426850361115642,
      "MetricsIntensity" : 0.06063616418220931,
      "Density" : 0.9972714870395635
    },
    "euclideanDistance" : 44.02605387682548,
    "generation" : 43,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7847094801223247,
      "LackOfCohesion" : 0.5426850361115642,
      "MetricsIntensity" : 0.060636164182209316,
      "Density" : 3.2780269058295963
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "0aa14034-383f-4f3f-958d-5a97e4c4f5b2",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5405338795289455,
      "MetricsIntensity" : 0.060699652020675066,
      "Density" : 0.999415318651335
    },
    "euclideanDistance" : 45.02551221549099,
    "generation" : 44,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7870257037943693,
      "LackOfCohesion" : 0.5405338795289455,
      "MetricsIntensity" : 0.060699652020675066,
      "Density" : 3.2913992297817707
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "736529c4-df1b-4285-9d8b-ca8729fdadbb",
    "objectives" : {
      "NumberOfConcerns" : 1.002399725745629,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.542268346714189,
      "MetricsIntensity" : 0.0605801274424016,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 46.024974166800504,
    "generation" : 41,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7883792048929663,
      "LackOfCohesion" : 0.542268346714189,
      "MetricsIntensity" : 0.06058012744240159,
      "Density" : 3.2778489116517284
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "eee31afc-1748-4c4b-a179-a70412d408ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9996571820363387,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5407724363703509,
      "MetricsIntensity" : 0.060790449750276414,
      "Density" : 0.9990255310855584
    },
    "euclideanDistance" : 52.022048179594734,
    "generation" : 45,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7867647058823533,
      "LackOfCohesion" : 0.5407724363703509,
      "MetricsIntensity" : 0.060790449750276414,
      "Density" : 3.2922286448298004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "2971e23a-30df-4dfe-97a7-66c578c07797",
    "objectives" : {
      "NumberOfConcerns" : 0.9996571820363387,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5434429216475294,
      "MetricsIntensity" : 0.06079628758959259,
      "Density" : 0.99766127460534
    },
    "euclideanDistance" : 56.0204754433423,
    "generation" : 46,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7856705450091854,
      "LackOfCohesion" : 0.5434429216475294,
      "MetricsIntensity" : 0.06079628758959258,
      "Density" : 3.285622593068036
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "f6e15d15-bbb2-4ca8-b0d8-8bcfcec30d0a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989715461090161,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5429159776660084,
      "MetricsIntensity" : 0.06082727144101686,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 57.02009594034863,
    "generation" : 42,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7855392156862748,
      "LackOfCohesion" : 0.5429159776660084,
      "MetricsIntensity" : 0.06082727144101686,
      "Density" : 3.289203084832904
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "167b519c-de59-404a-86e2-701a8b251d34",
    "objectives" : {
      "NumberOfConcerns" : 1.0044566335275968,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.545238063846066,
      "MetricsIntensity" : 0.059953430230372536,
      "Density" : 0.9988306373026701
    },
    "euclideanDistance" : 59.019551631054554,
    "generation" : 39,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.792048929663609,
      "LackOfCohesion" : 0.545238063846066,
      "MetricsIntensity" : 0.05995343023037253,
      "Density" : 3.2831518257527224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "21cc1d04-96cf-4563-9dea-bfba3d3ac560",
    "objectives" : {
      "NumberOfConcerns" : 1.0030853616729516,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.5467453335184794,
      "MetricsIntensity" : 0.05999751484828616,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 62.01858130703334,
    "generation" : 43,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7906976744186047,
      "LackOfCohesion" : 0.5467453335184794,
      "MetricsIntensity" : 0.05999751484828615,
      "Density" : 3.2820512820512815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "1f6e5ed9-8245-430f-805c-22814b2b8d65",
    "objectives" : {
      "NumberOfConcerns" : 0.9979430922180322,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5446523391490743,
      "MetricsIntensity" : 0.06091195682696826,
      "Density" : 0.9959072305593452
    },
    "euclideanDistance" : 63.01815673331148,
    "generation" : 38,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7837009803921569,
      "LackOfCohesion" : 0.5446523391490743,
      "MetricsIntensity" : 0.06091195682696825,
      "Density" : 3.2798459563543005
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "fd3e0363-e0b7-4eac-a52d-f0a3772dc5d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9989715461090161,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5433534671033469,
      "MetricsIntensity" : 0.060859367755150696,
      "Density" : 0.9962970181251218
    },
    "euclideanDistance" : 63.01816792601255,
    "generation" : 37,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7855392156862748,
      "LackOfCohesion" : 0.5433534671033469,
      "MetricsIntensity" : 0.06085936775515069,
      "Density" : 3.2811296534017966
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "73bc8ea8-35cb-4ec3-89a0-c81e907c0b71",
    "objectives" : {
      "NumberOfConcerns" : 1.0013712718546453,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5471979160203817,
      "MetricsIntensity" : 0.05996935915290278,
      "Density" : 0.99766127460534
    },
    "euclideanDistance" : 65.01769831612218,
    "generation" : 42,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7876376988984086,
      "LackOfCohesion" : 0.5471979160203817,
      "MetricsIntensity" : 0.059969359152902774,
      "Density" : 3.2814102564102567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "34633ab9-da7e-4e46-9745-b56073023e50",
    "objectives" : {
      "NumberOfConcerns" : 1.0020569077819679,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.5403517786896457,
      "MetricsIntensity" : 0.06070962777909133,
      "Density" : 1.0003897875657766
    },
    "euclideanDistance" : 66.01742621063879,
    "generation" : 45,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7877675840978593,
      "LackOfCohesion" : 0.5403517786896457,
      "MetricsIntensity" : 0.06070962777909133,
      "Density" : 3.292495189223861
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "6f706715-b559-4021-a825-e2ffe2d3319c",
    "objectives" : {
      "NumberOfConcerns" : 0.9979430922180322,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.54488568011949,
      "MetricsIntensity" : 0.06092524962692207,
      "Density" : 0.9939582927304619
    },
    "euclideanDistance" : 67.01704600915676,
    "generation" : 42,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7847946045370937,
      "LackOfCohesion" : 0.54488568011949,
      "MetricsIntensity" : 0.06092524962692207,
      "Density" : 3.2755298651252414
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "f3f6c919-3ff2-4e9f-acf4-6c81e2f7b874",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5457308168606024,
      "MetricsIntensity" : 0.06092288796165728,
      "Density" : 0.9949327616449035
    },
    "euclideanDistance" : 67.01706223962772,
    "generation" : 42,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7841814837522993,
      "LackOfCohesion" : 0.5457308168606024,
      "MetricsIntensity" : 0.06092288796165728,
      "Density" : 3.27874116891458
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "1abfa460-09b0-431a-8ad0-cdf8341215c4",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5401726280107603,
      "MetricsIntensity" : 0.06075686519299607,
      "Density" : 0.9998051062171117
    },
    "euclideanDistance" : 69.01664397868558,
    "generation" : 31,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7870257037943698,
      "LackOfCohesion" : 0.5401726280107603,
      "MetricsIntensity" : 0.06075686519299608,
      "Density" : 3.292682926829268
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "db5bf22f-0d32-4226-ae7f-c96f03868bb6",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.5405574982425694,
      "MetricsIntensity" : 0.06072118119333352,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 71.01613076373299,
    "generation" : 44,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7851897184822525,
      "LackOfCohesion" : 0.5405574982425694,
      "MetricsIntensity" : 0.06072118119333352,
      "Density" : 3.2807692307692307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "525ff3e6-682b-42ff-859c-1d47bf0e8356",
    "objectives" : {
      "NumberOfConcerns" : 0.9996571820363387,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5415994385415221,
      "MetricsIntensity" : 0.060821297952004034,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 72.01589643817681,
    "generation" : 41,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7856705450091854,
      "LackOfCohesion" : 0.5415994385415221,
      "MetricsIntensity" : 0.06082129795200404,
      "Density" : 3.2817715019255447
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "974c8b0b-e0a7-48a8-a65c-2d898b072c74",
    "objectives" : {
      "NumberOfConcerns" : 1.0006856359273226,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.5480557869637376,
      "MetricsIntensity" : 0.06002973490545576,
      "Density" : 0.9970765932566751
    },
    "euclideanDistance" : 73.0157483163014,
    "generation" : 42,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.787507654623392,
      "LackOfCohesion" : 0.5480557869637376,
      "MetricsIntensity" : 0.06002973490545576,
      "Density" : 3.2815907633098136
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "edf50a5c-208a-49dd-b095-4f5d77d9af79",
    "objectives" : {
      "NumberOfConcerns" : 0.9976002742543709,
      "NumberOfRefactorings" : 76.0,
      "LackOfCohesion" : 0.5419353750416982,
      "MetricsIntensity" : 0.060778542548894046,
      "Density" : 0.9972714870395635
    },
    "euclideanDistance" : 76.01504551539787,
    "generation" : 44,
    "numberOfRefactorings" : 76,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7809057527539782,
      "LackOfCohesion" : 0.5419353750416982,
      "MetricsIntensity" : 0.06077854254889404,
      "Density" : 3.2822322001282873
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "8145655d-9527-428f-93c2-22b7ecb54d34",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.5421003821397171,
      "MetricsIntensity" : 0.060856231902285604,
      "Density" : 0.9966868056908985
    },
    "euclideanDistance" : 77.01485269512877,
    "generation" : 46,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.783221065523576,
      "LackOfCohesion" : 0.5421003821397171,
      "MetricsIntensity" : 0.0608562319022856,
      "Density" : 3.282413350449294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "465bbf0d-f1d1-40b9-b1a4-d831ac5cc98f",
    "objectives" : {
      "NumberOfConcerns" : 0.9962290023997258,
      "NumberOfRefactorings" : 80.0,
      "LackOfCohesion" : 0.5429889566151012,
      "MetricsIntensity" : 0.06095651857208869,
      "Density" : 0.9953225492106802
    },
    "euclideanDistance" : 80.01425930361633,
    "generation" : 45,
    "numberOfRefactorings" : 80,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7806372549019607,
      "LackOfCohesion" : 0.5429889566151012,
      "MetricsIntensity" : 0.06095651857208869,
      "Density" : 3.2800256904303153
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "854994f9-0e51-4a24-b221-b7544abdcf8c",
    "objectives" : {
      "NumberOfConcerns" : 1.0030853616729516,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.5448404545153009,
      "MetricsIntensity" : 0.06001109235574458,
      "Density" : 0.9986357435197817
    },
    "euclideanDistance" : 81.01422039397232,
    "generation" : 36,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7896024464831808,
      "LackOfCohesion" : 0.5448404545153009,
      "MetricsIntensity" : 0.06001109235574458,
      "Density" : 3.284615384615384
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "4687dd28-c86b-46ab-9297-43336b75289b",
    "objectives" : {
      "NumberOfConcerns" : 0.9955433664724032,
      "NumberOfRefactorings" : 84.0,
      "LackOfCohesion" : 0.5431605878327271,
      "MetricsIntensity" : 0.0610027902676669,
      "Density" : 0.9947378678620152
    },
    "euclideanDistance" : 84.0135664924712,
    "generation" : 38,
    "numberOfRefactorings" : 84,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7805027590435314,
      "LackOfCohesion" : 0.5431605878327271,
      "MetricsIntensity" : 0.0610027902676669,
      "Density" : 3.2802056555269927
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "ef271e14-e4f8-45c0-8816-b99b47755922",
    "objectives" : {
      "NumberOfConcerns" : 0.9958861844360645,
      "NumberOfRefactorings" : 88.0,
      "LackOfCohesion" : 0.5439052669728891,
      "MetricsIntensity" : 0.06098574045355665,
      "Density" : 0.9929838238160202
    },
    "euclideanDistance" : 88.01293858499834,
    "generation" : 43,
    "numberOfRefactorings" : 88,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7811158798283262,
      "LackOfCohesion" : 0.5439052669728891,
      "MetricsIntensity" : 0.06098574045355664,
      "Density" : 3.274421593830333
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "c4c7dfd8-6232-4406-b3a4-48b69c22a051",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 92.0,
      "LackOfCohesion" : 0.5440777548374249,
      "MetricsIntensity" : 0.0610320715928963,
      "Density" : 0.9937633989475736
    },
    "euclideanDistance" : 92.01237816371182,
    "generation" : 41,
    "numberOfRefactorings" : 92,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7809815950920247,
      "LackOfCohesion" : 0.5440777548374249,
      "MetricsIntensity" : 0.06103207159289631,
      "Density" : 3.2790996784565913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "1389e936-58c4-4fd0-8483-1eddaab9dcd3",
    "objectives" : {
      "NumberOfConcerns" : 0.9948577305450805,
      "NumberOfRefactorings" : 92.0,
      "LackOfCohesion" : 0.5440173062443056,
      "MetricsIntensity" : 0.06106504136816673,
      "Density" : 0.9941531865133503
    },
    "euclideanDistance" : 92.01237833156499,
    "generation" : 43,
    "numberOfRefactorings" : 92,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7803680981595087,
      "LackOfCohesion" : 0.5440173062443056,
      "MetricsIntensity" : 0.06106504136816673,
      "Density" : 3.2803858520900326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "a196ac7b-a85c-462f-976b-0dbff6c790a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0013712718546453,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5537396047346989,
      "MetricsIntensity" : 0.05947491503538186,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 93.01240695961123,
    "generation" : 28,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7843616371411117,
      "LackOfCohesion" : 0.5537396047346989,
      "MetricsIntensity" : 0.05947491503538186,
      "Density" : 3.2807692307692307
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "900b67d7-adbf-4dff-8f3e-b905f2284f73",
    "objectives" : {
      "NumberOfConcerns" : 1.001028453890984,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5536794874964359,
      "MetricsIntensity" : 0.059505627500105115,
      "Density" : 0.9992204248684466
    },
    "euclideanDistance" : 93.01242175815847,
    "generation" : 39,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7837507635919365,
      "LackOfCohesion" : 0.5536794874964359,
      "MetricsIntensity" : 0.05950562750010512,
      "Density" : 3.2865384615384614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "61ad565c-830c-413b-8451-abf4e2acfe9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993143640726774,
      "NumberOfRefactorings" : 96.0,
      "LackOfCohesion" : 0.55353857275545,
      "MetricsIntensity" : 0.059524690808091085,
      "Density" : 0.9966868056908985
    },
    "euclideanDistance" : 96.0119886364574,
    "generation" : 45,
    "numberOfRefactorings" : 96,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.781784841075795,
      "LackOfCohesion" : 0.55353857275545,
      "MetricsIntensity" : 0.05952469080809108,
      "Density" : 3.282413350449293
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "7b26b6dc-0515-48fa-9379-248e265b1859",
    "objectives" : {
      "NumberOfConcerns" : 1.0003428179636613,
      "NumberOfRefactorings" : 96.0,
      "LackOfCohesion" : 0.5526692374540794,
      "MetricsIntensity" : 0.05955243840005441,
      "Density" : 0.9962970181251218
    },
    "euclideanDistance" : 96.01199030996453,
    "generation" : 45,
    "numberOfRefactorings" : 96,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7836185819070904,
      "LackOfCohesion" : 0.5526692374540794,
      "MetricsIntensity" : 0.05955243840005441,
      "Density" : 3.27902501603592
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "d15f7bd5-edf8-4ec6-91cb-7ca6c04ba566",
    "objectives" : {
      "NumberOfConcerns" : 0.9996571820363387,
      "NumberOfRefactorings" : 96.0,
      "LackOfCohesion" : 0.5528840848672024,
      "MetricsIntensity" : 0.05955556511989456,
      "Density" : 0.9968816994737868
    },
    "euclideanDistance" : 96.01199047661171,
    "generation" : 44,
    "numberOfRefactorings" : 96,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.78239608801956,
      "LackOfCohesion" : 0.5528840848672024,
      "MetricsIntensity" : 0.05955556511989456,
      "Density" : 3.2809493264913407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "eb743296-3544-4ce7-bf03-777aa002997e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 96.0,
      "LackOfCohesion" : 0.5532795506593513,
      "MetricsIntensity" : 0.05955176603483588,
      "Density" : 0.9982459559540051
    },
    "euclideanDistance" : 96.01201049692999,
    "generation" : 44,
    "numberOfRefactorings" : 96,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7830073349633249,
      "LackOfCohesion" : 0.5532795506593513,
      "MetricsIntensity" : 0.05955176603483588,
      "Density" : 3.2854393842206546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "68917940-4659-418c-bfdb-827a95e141a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9972574562907096,
      "NumberOfRefactorings" : 97.0,
      "LackOfCohesion" : 0.5493516992005312,
      "MetricsIntensity" : 0.06017522003733757,
      "Density" : 0.9935685051646852
    },
    "euclideanDistance" : 97.01178850611457,
    "generation" : 43,
    "numberOfRefactorings" : 97,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7813839559093692,
      "LackOfCohesion" : 0.5493516992005312,
      "MetricsIntensity" : 0.06017522003733757,
      "Density" : 3.270044900577293
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "36a6d7cc-8aa4-4cf7-92da-015e15d589ff",
    "objectives" : {
      "NumberOfConcerns" : 0.9979430922180322,
      "NumberOfRefactorings" : 98.0,
      "LackOfCohesion" : 0.5504383276670148,
      "MetricsIntensity" : 0.0601432555642376,
      "Density" : 0.9941531865133503
    },
    "euclideanDistance" : 98.01168721401197,
    "generation" : 41,
    "numberOfRefactorings" : 98,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7815177478580173,
      "LackOfCohesion" : 0.5504383276670148,
      "MetricsIntensity" : 0.060143255564237594,
      "Density" : 3.2698717948717952
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "66fe3def-6439-4795-be1b-560703bcc4ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 99.0,
      "LackOfCohesion" : 0.5522957263893205,
      "MetricsIntensity" : 0.0595725171698127,
      "Density" : 0.9961021243422334
    },
    "euclideanDistance" : 99.01160567445105,
    "generation" : 42,
    "numberOfRefactorings" : 99,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7816513761467891,
      "LackOfCohesion" : 0.5522957263893205,
      "MetricsIntensity" : 0.0595725171698127,
      "Density" : 3.282594733461786
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b4bb8fcb-cb1f-4eba-b97f-289bae01eb94",
    "objectives" : {
      "NumberOfConcerns" : 0.9989715461090161,
      "NumberOfRefactorings" : 101.0,
      "LackOfCohesion" : 0.541291435650055,
      "MetricsIntensity" : 0.06091132123973474,
      "Density" : 0.9961021243422334
    },
    "euclideanDistance" : 101.01132050517614,
    "generation" : 43,
    "numberOfRefactorings" : 101,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7844458052663807,
      "LackOfCohesion" : 0.541291435650055,
      "MetricsIntensity" : 0.06091132123973474,
      "Density" : 3.280487804878048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "bf801736-e630-4be3-96dd-b86f8497b879",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 101.0,
      "LackOfCohesion" : 0.5483733838412255,
      "MetricsIntensity" : 0.0601371840745451,
      "Density" : 0.9951276554277918
    },
    "euclideanDistance" : 101.01134524515693,
    "generation" : 42,
    "numberOfRefactorings" : 101,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7838334353949787,
      "LackOfCohesion" : 0.5483733838412255,
      "MetricsIntensity" : 0.0601371840745451,
      "Density" : 3.273076923076923
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "175d77ae-200d-45fc-9df0-b43d42eaaf0c",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 105.0,
      "LackOfCohesion" : 0.5429759924880647,
      "MetricsIntensity" : 0.061012548288871184,
      "Density" : 0.9957123367764569
    },
    "euclideanDistance" : 105.0108715510457,
    "generation" : 41,
    "numberOfRefactorings" : 105,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.78125,
      "LackOfCohesion" : 0.5429759924880647,
      "MetricsIntensity" : 0.06101254828887118,
      "Density" : 3.2813102119460504
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "45154057-f941-4a92-84d3-ab45de7ead56",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 105.0,
      "LackOfCohesion" : 0.5498021639065932,
      "MetricsIntensity" : 0.06031326276812881,
      "Density" : 0.9931787175989086
    },
    "euclideanDistance" : 105.01088267159426,
    "generation" : 37,
    "numberOfRefactorings" : 105,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7823421213979154,
      "LackOfCohesion" : 0.5498021639065932,
      "MetricsIntensity" : 0.060313262768128824,
      "Density" : 3.2729608220937694
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "9b38f968-6cbd-4e6c-9808-4d2898b1d6a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 105.0,
      "LackOfCohesion" : 0.5502119377965,
      "MetricsIntensity" : 0.06023580509542277,
      "Density" : 0.9929838238160202
    },
    "euclideanDistance" : 105.01088293027638,
    "generation" : 42,
    "numberOfRefactorings" : 105,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.78125,
      "LackOfCohesion" : 0.5502119377965,
      "MetricsIntensity" : 0.060235805095422784,
      "Density" : 3.2702182284980745
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "117c31c4-2ac6-4d5a-a547-9d8684697348",
    "objectives" : {
      "NumberOfConcerns" : 0.9962290023997258,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5499792949970612,
      "MetricsIntensity" : 0.06035906439747994,
      "Density" : 0.9929838238160202
    },
    "euclideanDistance" : 109.01047935653324,
    "generation" : 34,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7828220858895705,
      "LackOfCohesion" : 0.5499792949970612,
      "MetricsIntensity" : 0.06035906439747995,
      "Density" : 3.274421593830335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "1303a5d4-7c76-4706-8a96-ee9ac927bc2b",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.549133492793948,
      "MetricsIntensity" : 0.06036107732667707,
      "Density" : 0.9933736113817969
    },
    "euclideanDistance" : 109.0104817784854,
    "generation" : 43,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7834355828220854,
      "LackOfCohesion" : 0.549133492793948,
      "MetricsIntensity" : 0.06036107732667708,
      "Density" : 3.275706940874035
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "f59eebfc-e22f-4974-a873-59997ba1df8b",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 116.0,
      "LackOfCohesion" : 0.5437153655191828,
      "MetricsIntensity" : 0.06108946496418525,
      "Density" : 0.9941531865133503
    },
    "euclideanDistance" : 116.00981908015993,
    "generation" : 42,
    "numberOfRefactorings" : 116,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7809815950920247,
      "LackOfCohesion" : 0.5437153655191828,
      "MetricsIntensity" : 0.06108946496418525,
      "Density" : 3.280385852090032
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "07256413-2a2d-4ebe-861d-6fca7fe8b8f6",
    "objectives" : {
      "NumberOfConcerns" : 0.9948577305450805,
      "NumberOfRefactorings" : 116.0,
      "LackOfCohesion" : 0.5436549169260632,
      "MetricsIntensity" : 0.061122431786099884,
      "Density" : 0.9945429740791268
    },
    "euclideanDistance" : 116.00981921480475,
    "generation" : 14,
    "numberOfRefactorings" : 116,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.780368098159509,
      "LackOfCohesion" : 0.5436549169260632,
      "MetricsIntensity" : 0.061122431786099884,
      "Density" : 3.281672025723472
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "ee16881a-81df-416b-a7ce-e9cfb9dc42e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9982859101816935,
      "NumberOfRefactorings" : 118.0,
      "LackOfCohesion" : 0.5520679380824826,
      "MetricsIntensity" : 0.05958392260334838,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 118.009736463315,
    "generation" : 39,
    "numberOfRefactorings" : 118,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7799511002444985,
      "LackOfCohesion" : 0.5520679380824826,
      "MetricsIntensity" : 0.05958392260334838,
      "Density" : 3.283879254977521
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "a8d7e088-dfd6-4415-8dd6-cc89aa46586f",
    "objectives" : {
      "NumberOfConcerns" : 0.9969146383270483,
      "NumberOfRefactorings" : 121.0,
      "LackOfCohesion" : 0.5518379055187422,
      "MetricsIntensity" : 0.05965995855248417,
      "Density" : 0.9949327616449035
    },
    "euclideanDistance" : 121.00946993678191,
    "generation" : 39,
    "numberOfRefactorings" : 121,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.778593272171254,
      "LackOfCohesion" : 0.5518379055187422,
      "MetricsIntensity" : 0.05965995855248416,
      "Density" : 3.2808483290488426
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "96d960ba-c4e6-4a30-9ee3-9d7595d03b47",
    "objectives" : {
      "NumberOfConcerns" : 0.9972574562907096,
      "NumberOfRefactorings" : 121.0,
      "LackOfCohesion" : 0.5516664236091227,
      "MetricsIntensity" : 0.059630163194064154,
      "Density" : 0.9955174429935685
    },
    "euclideanDistance" : 121.00947677356815,
    "generation" : 43,
    "numberOfRefactorings" : 121,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7792048929663606,
      "LackOfCohesion" : 0.5516664236091227,
      "MetricsIntensity" : 0.059630163194064154,
      "Density" : 3.2827763496143962
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2300524e-f92a-4cf2-9401-e76c1f5a9a80",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 122.0,
      "LackOfCohesion" : 0.5472923359119689,
      "MetricsIntensity" : 0.060359505088066936,
      "Density" : 0.9929838238160202
    },
    "euclideanDistance" : 122.00934231925405,
    "generation" : 44,
    "numberOfRefactorings" : 122,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7798896382587368,
      "LackOfCohesion" : 0.5472923359119689,
      "MetricsIntensity" : 0.06035950508806694,
      "Density" : 3.2744215938303345
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "a5611c77-a630-4345-acd3-959d15908f3e",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 125.0,
      "LackOfCohesion" : 0.5477787692511429,
      "MetricsIntensity" : 0.060326479077239405,
      "Density" : 0.9925940362502437
    },
    "euclideanDistance" : 125.00910895586225,
    "generation" : 40,
    "numberOfRefactorings" : 125,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7780502759043537,
      "LackOfCohesion" : 0.5477787692511429,
      "MetricsIntensity" : 0.060326479077239405,
      "Density" : 3.271034039820168
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "7041441a-c556-4d1e-82f8-2812c9d38d4d",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 130.0,
      "LackOfCohesion" : 0.5485637020384357,
      "MetricsIntensity" : 0.06034272484619557,
      "Density" : 0.9918144611186903
    },
    "euclideanDistance" : 130.0087560030425,
    "generation" : 37,
    "numberOfRefactorings" : 130,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7780502759043533,
      "LackOfCohesion" : 0.5485637020384357,
      "MetricsIntensity" : 0.06034272484619557,
      "Density" : 3.270565552699229
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "8bf04fbf-2412-42ad-a569-631908afbf7b",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 133.0,
      "LackOfCohesion" : 0.5486391240260428,
      "MetricsIntensity" : 0.06038727864647112,
      "Density" : 0.9920093549015786
    },
    "euclideanDistance" : 133.0085551737769,
    "generation" : 40,
    "numberOfRefactorings" : 133,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7779141104294476,
      "LackOfCohesion" : 0.5486391240260428,
      "MetricsIntensity" : 0.06038727864647112,
      "Density" : 3.2712082262210793
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "bc5a1610-fd21-40e4-831c-88b18a080dad",
    "objectives" : {
      "NumberOfConcerns" : 0.9945149125814192,
      "NumberOfRefactorings" : 134.0,
      "LackOfCohesion" : 0.5543133110736091,
      "MetricsIntensity" : 0.05976315002101724,
      "Density" : 0.992204248684467
    },
    "euclideanDistance" : 134.00852347542445,
    "generation" : 40,
    "numberOfRefactorings" : 134,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7764849969381504,
      "LackOfCohesion" : 0.5543133110736091,
      "MetricsIntensity" : 0.05976315002101724,
      "Density" : 3.271850899742931
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "40b93f0d-10d4-4a33-aee3-bfe623e205df",
    "objectives" : {
      "NumberOfConcerns" : 0.9965718203633871,
      "NumberOfRefactorings" : 136.0,
      "LackOfCohesion" : 0.5555291680750686,
      "MetricsIntensity" : 0.05972749760517088,
      "Density" : 0.9925940362502437
    },
    "euclideanDistance" : 136.0084209832042,
    "generation" : 39,
    "numberOfRefactorings" : 136,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77906976744186,
      "LackOfCohesion" : 0.5555291680750686,
      "MetricsIntensity" : 0.05972749760517089,
      "Density" : 3.2710340398201674
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.methodModels], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(Method), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String), org.apache.dubbo.rpc.model.ConsumerModel.getMethodModel(String, String[]), org.apache.dubbo.rpc.model.ConsumerModel.getAllMethodModels(), org.apache.dubbo.rpc.model.ConsumerModel.initMethodModels()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "8e1eecb3-c8dc-465b-8cdd-854da3a7a5ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 138.0,
      "LackOfCohesion" : 0.5544333566072567,
      "MetricsIntensity" : 0.059839280346473504,
      "Density" : 0.9937633989475736
    },
    "euclideanDistance" : 138.0082832275317,
    "generation" : 43,
    "numberOfRefactorings" : 138,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7763480392156858,
      "LackOfCohesion" : 0.5544333566072567,
      "MetricsIntensity" : 0.059839280346473504,
      "Density" : 3.279099678456592
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "a8064367-2589-4168-9da6-43b2a151d7f8",
    "objectives" : {
      "NumberOfConcerns" : 0.9986287281453549,
      "NumberOfRefactorings" : 138.0,
      "LackOfCohesion" : 0.5565782384123997,
      "MetricsIntensity" : 0.05958898471587547,
      "Density" : 0.9955174429935685
    },
    "euclideanDistance" : 138.00833903970644,
    "generation" : 44,
    "numberOfRefactorings" : 138,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7816513761467891,
      "LackOfCohesion" : 0.5565782384123997,
      "MetricsIntensity" : 0.05958898471587547,
      "Density" : 3.2785622593068044
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "9f3365fc-9761-4df4-9f3a-af08be782ddf",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 139.0,
      "LackOfCohesion" : 0.5550367045216751,
      "MetricsIntensity" : 0.05980935890745463,
      "Density" : 0.9931787175989086
    },
    "euclideanDistance" : 139.0082243071308,
    "generation" : 46,
    "numberOfRefactorings" : 139,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7758726270667484,
      "LackOfCohesion" : 0.5550367045216751,
      "MetricsIntensity" : 0.059809358907454625,
      "Density" : 3.2771704180064316
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "9a2dffb7-a73e-493d-ab29-acf59353b945",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 143.0,
      "LackOfCohesion" : 0.5557324255774787,
      "MetricsIntensity" : 0.06015571654595462,
      "Density" : 0.9912297797700254
    },
    "euclideanDistance" : 143.0079788300603,
    "generation" : 30,
    "numberOfRefactorings" : 143,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775735294117647,
      "LackOfCohesion" : 0.5557324255774787,
      "MetricsIntensity" : 0.06015571654595463,
      "Density" : 3.272844272844272
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b3a96f6d-a74b-40cb-96c7-912dbd259ab8",
    "objectives" : {
      "NumberOfConcerns" : 0.9958861844360645,
      "NumberOfRefactorings" : 148.0,
      "LackOfCohesion" : 0.5510746438073877,
      "MetricsIntensity" : 0.05975894516112507,
      "Density" : 0.9978561683882284
    },
    "euclideanDistance" : 148.0077523666234,
    "generation" : 44,
    "numberOfRefactorings" : 148,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.777845777233782,
      "LackOfCohesion" : 0.5510746438073877,
      "MetricsIntensity" : 0.05975894516112508,
      "Density" : 3.2862644415917854
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "ad7629fa-00e0-45f7-853f-274f60217735",
    "objectives" : {
      "NumberOfConcerns" : 0.9945149125814192,
      "NumberOfRefactorings" : 150.0,
      "LackOfCohesion" : 0.547105101441679,
      "MetricsIntensity" : 0.0604603703073429,
      "Density" : 0.992788930033132
    },
    "euclideanDistance" : 150.007592038601,
    "generation" : 41,
    "numberOfRefactorings" : 150,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7797546012269936,
      "LackOfCohesion" : 0.547105101441679,
      "MetricsIntensity" : 0.060460370307342894,
      "Density" : 3.275884244372991
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.config.MetricsConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "f0f223c9-f095-455b-a5ca-443dd1422f47",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 151.0,
      "LackOfCohesion" : 0.5511518605128312,
      "MetricsIntensity" : 0.05980293537845808,
      "Density" : 0.9980510621711167
    },
    "euclideanDistance" : 151.00759542095517,
    "generation" : 43,
    "numberOfRefactorings" : 151,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7777097366809553,
      "LackOfCohesion" : 0.5511518605128312,
      "MetricsIntensity" : 0.05980293537845808,
      "Density" : 3.2869062901155335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "9cf9c8e6-f556-4425-b64d-40e4a370cafa",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 154.0,
      "LackOfCohesion" : 0.5482015978416085,
      "MetricsIntensity" : 0.06039770287092133,
      "Density" : 0.992204248684467
    },
    "euclideanDistance" : 154.0073927456056,
    "generation" : 18,
    "numberOfRefactorings" : 154,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7780502759043533,
      "LackOfCohesion" : 0.5482015978416085,
      "MetricsIntensity" : 0.06039770287092133,
      "Density" : 3.271850899742931
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.connections, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.local, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.scope, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.layer], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConnections(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.getLocal(), org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "c0f5d8d3-9cf7-4b9d-9771-f02af7bd31f6",
    "objectives" : {
      "NumberOfConcerns" : 0.9945149125814192,
      "NumberOfRefactorings" : 155.0,
      "LackOfCohesion" : 0.5513297741775328,
      "MetricsIntensity" : 0.05984826379189066,
      "Density" : 0.9988306373026701
    },
    "euclideanDistance" : 155.0074006907023,
    "generation" : 36,
    "numberOfRefactorings" : 155,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.777573529411765,
      "LackOfCohesion" : 0.5513297741775328,
      "MetricsIntensity" : 0.05984826379189066,
      "Density" : 3.2915863840719326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "1d0c6b07-3fc0-492a-844d-b20611cae5c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 156.0,
      "LackOfCohesion" : 0.5525308196975056,
      "MetricsIntensity" : 0.05985482706235102,
      "Density" : 0.9966868056908985
    },
    "euclideanDistance" : 156.00733287563554,
    "generation" : 43,
    "numberOfRefactorings" : 156,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7734231475811388,
      "LackOfCohesion" : 0.5525308196975056,
      "MetricsIntensity" : 0.059854827062351026,
      "Density" : 3.2845215157353884
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d566895-a54c-4c30-afcf-63c960e3d083",
    "objectives" : {
      "NumberOfConcerns" : 0.9938292766540967,
      "NumberOfRefactorings" : 157.0,
      "LackOfCohesion" : 0.5534198494631597,
      "MetricsIntensity" : 0.059821331905169195,
      "Density" : 0.9974663808224518
    },
    "euclideanDistance" : 157.00730074723765,
    "generation" : 42,
    "numberOfRefactorings" : 157,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775260257195346,
      "LackOfCohesion" : 0.5534198494631597,
      "MetricsIntensity" : 0.059821331905169195,
      "Density" : 3.284980744544287
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2f0003a8-cb89-488a-a53e-e6b13e868cf1",
    "objectives" : {
      "NumberOfConcerns" : 0.9921151868357901,
      "NumberOfRefactorings" : 159.0,
      "LackOfCohesion" : 0.5526092419002727,
      "MetricsIntensity" : 0.05989892724204137,
      "Density" : 0.9968816994737868
    },
    "euclideanDistance" : 159.007191757236,
    "generation" : 42,
    "numberOfRefactorings" : 159,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7732843137254901,
      "LackOfCohesion" : 0.5526092419002727,
      "MetricsIntensity" : 0.05989892724204137,
      "Density" : 3.285163776493256
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "b4906378-079f-46ac-bf86-4030217e87c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 160.0,
      "LackOfCohesion" : 0.5530184508451147,
      "MetricsIntensity" : 0.05986786819641482,
      "Density" : 0.9964919119080101
    },
    "euclideanDistance" : 160.0071500376555,
    "generation" : 41,
    "numberOfRefactorings" : 160,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7745098039215694,
      "LackOfCohesion" : 0.5530184508451147,
      "MetricsIntensity" : 0.05986786819641482,
      "Density" : 3.283879254977521
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "4100406b-ef4b-462d-9ec3-0995ec232ff6",
    "objectives" : {
      "NumberOfConcerns" : 0.9924580047994515,
      "NumberOfRefactorings" : 161.0,
      "LackOfCohesion" : 0.5551528194162135,
      "MetricsIntensity" : 0.06016739678986956,
      "Density" : 0.9949327616449035
    },
    "euclideanDistance" : 161.00710133053147,
    "generation" : 42,
    "numberOfRefactorings" : 161,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7728107777097368,
      "LackOfCohesion" : 0.5551528194162135,
      "MetricsIntensity" : 0.06016739678986955,
      "Density" : 3.27874116891458
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "dd06e1f2-d6d9-4b8f-81c2-bdbadc664803",
    "objectives" : {
      "NumberOfConcerns" : 0.9904010970174837,
      "NumberOfRefactorings" : 163.0,
      "LackOfCohesion" : 0.5540883361607393,
      "MetricsIntensity" : 0.0602754844908376,
      "Density" : 0.992204248684467
    },
    "euclideanDistance" : 163.00698147816362,
    "generation" : 43,
    "numberOfRefactorings" : 163,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7713059472716126,
      "LackOfCohesion" : 0.5540883361607393,
      "MetricsIntensity" : 0.0602754844908376,
      "Density" : 3.2781712813908563
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "cc184882-3ca2-48e8-b8e4-be9e2d9c11d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9958861844360645,
      "NumberOfRefactorings" : 163.0,
      "LackOfCohesion" : 0.5553022622241984,
      "MetricsIntensity" : 0.05969445678369543,
      "Density" : 0.9984408497368934
    },
    "euclideanDistance" : 163.00705689464297,
    "generation" : 44,
    "numberOfRefactorings" : 163,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.777845777233782,
      "LackOfCohesion" : 0.5553022622241984,
      "MetricsIntensity" : 0.05969445678369543,
      "Density" : 3.2881899871630296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "a0814297-aff2-4c9c-aca8-8ee95171773c",
    "objectives" : {
      "NumberOfConcerns" : 0.990743914981145,
      "NumberOfRefactorings" : 167.0,
      "LackOfCohesion" : 0.5548330153009013,
      "MetricsIntensity" : 0.06025870271513117,
      "Density" : 0.990450204638472
    },
    "euclideanDistance" : 167.00680835193234,
    "generation" : 44,
    "numberOfRefactorings" : 167,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7719190680564076,
      "LackOfCohesion" : 0.5548330153009013,
      "MetricsIntensity" : 0.06025870271513117,
      "Density" : 3.27237604636188
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b6f3486d-1f6a-4826-a615-6eb34a0936de",
    "objectives" : {
      "NumberOfConcerns" : 0.9904010970174837,
      "NumberOfRefactorings" : 167.0,
      "LackOfCohesion" : 0.5547726142676506,
      "MetricsIntensity" : 0.06029003831995087,
      "Density" : 0.9908399922042487
    },
    "euclideanDistance" : 167.00680844134882,
    "generation" : 41,
    "numberOfRefactorings" : 167,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7713059472716124,
      "LackOfCohesion" : 0.5547726142676506,
      "MetricsIntensity" : 0.06029003831995086,
      "Density" : 3.27366387636832
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "7c03cf98-9f9c-426d-abef-2c7e038e12c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 167.0,
      "LackOfCohesion" : 0.5553706060537621,
      "MetricsIntensity" : 0.06020948483941124,
      "Density" : 0.991619567335802
    },
    "euclideanDistance" : 167.00683335241723,
    "generation" : 43,
    "numberOfRefactorings" : 167,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.775735294117647,
      "LackOfCohesion" : 0.5553706060537621,
      "MetricsIntensity" : 0.06020948483941125,
      "Density" : 3.2741312741312747
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "dd43b271-6c04-404a-847f-83061a5e0d10",
    "objectives" : {
      "NumberOfConcerns" : 0.990743914981145,
      "NumberOfRefactorings" : 168.0,
      "LackOfCohesion" : 0.5549336699812829,
      "MetricsIntensity" : 0.0602599727426717,
      "Density" : 0.9896706295069188
    },
    "euclideanDistance" : 168.00676356653733,
    "generation" : 12,
    "numberOfRefactorings" : 168,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7719190680564076,
      "LackOfCohesion" : 0.5549336699812829,
      "MetricsIntensity" : 0.0602599727426717,
      "Density" : 3.271907216494845
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "00359fa1-1cf3-4397-b144-778f2cbde5e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9931436407267741,
      "NumberOfRefactorings" : 169.0,
      "LackOfCohesion" : 0.5573548146532005,
      "MetricsIntensity" : 0.06011276173764964,
      "Density" : 0.9925940362502437
    },
    "euclideanDistance" : 169.0067626905665,
    "generation" : 43,
    "numberOfRefactorings" : 169,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7751225490196079,
      "LackOfCohesion" : 0.5573548146532005,
      "MetricsIntensity" : 0.06011276173764964,
      "Density" : 3.2773487773487773
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "b5034873-94a1-4278-ab29-12200551caae",
    "objectives" : {
      "NumberOfConcerns" : 0.994172094617758,
      "NumberOfRefactorings" : 170.0,
      "LackOfCohesion" : 0.5561565181568169,
      "MetricsIntensity" : 0.05978517039303718,
      "Density" : 0.9972714870395635
    },
    "euclideanDistance" : 170.00675225682028,
    "generation" : 45,
    "numberOfRefactorings" : 170,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7769607843137252,
      "LackOfCohesion" : 0.5561565181568169,
      "MetricsIntensity" : 0.059785170393037185,
      "Density" : 3.2885604113110545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcInvocation.attributes, org.apache.dubbo.rpc.RpcInvocation.returnTypes, org.apache.dubbo.rpc.RpcInvocation.compatibleParamSignatures, org.apache.dubbo.rpc.RpcInvocation.methodName, org.apache.dubbo.rpc.RpcInvocation.returnType, org.apache.dubbo.rpc.RpcInvocation.parameterTypesDesc, org.apache.dubbo.rpc.RpcInvocation.interfaceName, org.apache.dubbo.rpc.RpcInvocation.serviceModel, org.apache.dubbo.rpc.RpcInvocation.arguments, org.apache.dubbo.rpc.RpcInvocation.invoker, org.apache.dubbo.rpc.RpcInvocation.invokeMode, org.apache.dubbo.rpc.RpcInvocation.parameterTypes], extractedMethods=[org.apache.dubbo.rpc.RpcInvocation.getParameterTypes(), org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[]), org.apache.dubbo.rpc.RpcInvocation.getAttributes(), org.apache.dubbo.rpc.RpcInvocation.getInvokeMode(), org.apache.dubbo.rpc.RpcInvocation.put(Object, Object), org.apache.dubbo.rpc.RpcInvocation.getReturnType(), org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName(), org.apache.dubbo.rpc.RpcInvocation.toString(), org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey(), org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[]), org.apache.dubbo.rpc.RpcInvocation.getServiceName(), org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode), org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>), org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String), org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures(), org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String), org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc(), org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[]), org.apache.dubbo.rpc.RpcInvocation.initParameterDesc(), org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel), org.apache.dubbo.rpc.RpcInvocation.getInvoker(), org.apache.dubbo.rpc.RpcInvocation.setMethodName(String), org.apache.dubbo.rpc.RpcInvocation.setServiceName(String), org.apache.dubbo.rpc.RpcInvocation.getReturnTypes(), org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>), org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String), org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[]), org.apache.dubbo.rpc.RpcInvocation.getMethodName(), org.apache.dubbo.rpc.RpcInvocation.getServiceModel(), org.apache.dubbo.rpc.RpcInvocation.get(Object), org.apache.dubbo.rpc.RpcInvocation.getArguments(), org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "68843053-b11c-4b49-9b20-ca81630a2d7c",
    "objectives" : {
      "NumberOfConcerns" : 0.9952005485087418,
      "NumberOfRefactorings" : 175.0,
      "LackOfCohesion" : 0.5590670919753202,
      "MetricsIntensity" : 0.05975104515331587,
      "Density" : 0.9923991424673553
    },
    "euclideanDistance" : 175.00654675294422,
    "generation" : 40,
    "numberOfRefactorings" : 175,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7766217870257037,
      "LackOfCohesion" : 0.5590670919753202,
      "MetricsIntensity" : 0.059751045153315877,
      "Density" : 3.272493573264781
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "b015afd3-8ae0-41af-b920-a1e4ad499b16",
    "objectives" : {
      "NumberOfConcerns" : 0.9934864586904354,
      "NumberOfRefactorings" : 177.0,
      "LackOfCohesion" : 0.5586624320062201,
      "MetricsIntensity" : 0.05982889815794972,
      "Density" : 0.9912297797700254
    },
    "euclideanDistance" : 177.00645534846996,
    "generation" : 43,
    "numberOfRefactorings" : 177,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7757352941176472,
      "LackOfCohesion" : 0.5586624320062201,
      "MetricsIntensity" : 0.059828898157949714,
      "Density" : 3.272844272844272
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "41bf86f7-aa2e-4508-aef1-4ae08bc345d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 180.0,
      "LackOfCohesion" : 0.5587457401527411,
      "MetricsIntensity" : 0.059873012634473484,
      "Density" : 0.9914246735529136
    },
    "euclideanDistance" : 180.00634532687116,
    "generation" : 42,
    "numberOfRefactorings" : 180,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7755977927651745,
      "LackOfCohesion" : 0.5587457401527411,
      "MetricsIntensity" : 0.05987301263447349,
      "Density" : 3.273487773487774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "d5f25290-f850-4fc7-9059-c113aa34840c",
    "objectives" : {
      "NumberOfConcerns" : 0.9931436407267741,
      "NumberOfRefactorings" : 181.0,
      "LackOfCohesion" : 0.5593461721586448,
      "MetricsIntensity" : 0.05984304115321637,
      "Density" : 0.9908399922042487
    },
    "euclideanDistance" : 181.00631079471,
    "generation" : 41,
    "numberOfRefactorings" : 181,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7751225490196076,
      "LackOfCohesion" : 0.5593461721586448,
      "MetricsIntensity" : 0.05984304115321637,
      "Density" : 3.271557271557272
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "9b690992-6688-4c33-8c09-bbe611e12324",
    "objectives" : {
      "NumberOfConcerns" : 0.9921151868357901,
      "NumberOfRefactorings" : 183.0,
      "LackOfCohesion" : 0.552247422376556,
      "MetricsIntensity" : 0.0599516571158896,
      "Density" : 0.9970765932566751
    },
    "euclideanDistance" : 183.00624859740032,
    "generation" : 43,
    "numberOfRefactorings" : 183,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7732843137254901,
      "LackOfCohesion" : 0.552247422376556,
      "MetricsIntensity" : 0.05995165711588959,
      "Density" : 3.285806037251124
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "b61b33f4-2443-453f-bcca-11e805e3bbd7",
    "objectives" : {
      "NumberOfConcerns" : 0.9924580047994515,
      "NumberOfRefactorings" : 184.0,
      "LackOfCohesion" : 0.5594300182596526,
      "MetricsIntensity" : 0.0598871667571951,
      "Density" : 0.991034885987137
    },
    "euclideanDistance" : 184.00620552431,
    "generation" : 41,
    "numberOfRefactorings" : 184,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77498467198038,
      "LackOfCohesion" : 0.5594300182596526,
      "MetricsIntensity" : 0.05988716675719509,
      "Density" : 3.2722007722007724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "0e584cc7-a7e2-41d5-8be9-c7c2c974c295",
    "objectives" : {
      "NumberOfConcerns" : 0.9917723688721289,
      "NumberOfRefactorings" : 185.0,
      "LackOfCohesion" : 0.5608305669149876,
      "MetricsIntensity" : 0.060219554431840384,
      "Density" : 0.9902553108555837
    },
    "euclideanDistance" : 185.00616847913977,
    "generation" : 8,
    "numberOfRefactorings" : 185,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.773758430410791,
      "LackOfCohesion" : 0.5608305669149876,
      "MetricsIntensity" : 0.06021955443184038,
      "Density" : 3.2717321313586605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "afd662c3-ec75-4618-9613-3af5d6f3a48e",
    "objectives" : {
      "NumberOfConcerns" : 0.9921151868357901,
      "NumberOfRefactorings" : 185.0,
      "LackOfCohesion" : 0.559985430173875,
      "MetricsIntensity" : 0.06022137183772346,
      "Density" : 0.9906450984213604
    },
    "euclideanDistance" : 185.00616984455033,
    "generation" : 39,
    "numberOfRefactorings" : 185,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7743715511955855,
      "LackOfCohesion" : 0.559985430173875,
      "MetricsIntensity" : 0.060221371837723456,
      "Density" : 3.273019961365099
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.serviceKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.version, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodParams, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.matchKey, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.protocol, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.group, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.params, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "c6f80453-706d-49ac-ba45-715f7ee64c23",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 185.0,
      "LackOfCohesion" : 0.5595306729400346,
      "MetricsIntensity" : 0.059888436784735655,
      "Density" : 0.9906450984213604
    },
    "euclideanDistance" : 185.00617203862015,
    "generation" : 38,
    "numberOfRefactorings" : 185,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7755977927651743,
      "LackOfCohesion" : 0.5595306729400346,
      "MetricsIntensity" : 0.059888436784735655,
      "Density" : 3.273019961365099
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers, org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers], extractedMethods=[org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers(), org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "4a8c341c-3355-4735-ab3b-3e5e681147ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9914295509084676,
      "NumberOfRefactorings" : 191.0,
      "LackOfCohesion" : 0.5531106160958699,
      "MetricsIntensity" : 0.0600112923272215,
      "Density" : 0.9951276554277918
    },
    "euclideanDistance" : 191.0059756769768,
    "generation" : 43,
    "numberOfRefactorings" : 191,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7731453096259966,
      "LackOfCohesion" : 0.5531106160958699,
      "MetricsIntensity" : 0.0600112923272215,
      "Density" : 3.281491002570694
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.check, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.retryTimes, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.password, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.serialVersionUID], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isCheck(), org.apache.dubbo.config.MetadataReportConfig.setCheck(Boolean), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryTimes(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setPassword(String), org.apache.dubbo.config.MetadataReportConfig.getPassword(), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.getSyncReport()]"
      } ]
    } ]
  }, {
    "solutionId" : "9d8bfea6-e129-4aa5-8bdd-a595c9ab6bb0",
    "objectives" : {
      "NumberOfConcerns" : 0.9900582790538224,
      "NumberOfRefactorings" : 195.0,
      "LackOfCohesion" : 0.5546517183734374,
      "MetricsIntensity" : 0.06035831730510099,
      "Density" : 0.9937633989475736
    },
    "euclideanDistance" : 195.0058436630661,
    "generation" : 43,
    "numberOfRefactorings" : 195,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7717791411042947,
      "LackOfCohesion" : 0.5546517183734374,
      "MetricsIntensity" : 0.06035831730510099,
      "Density" : 3.2790996784565913
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.MetadataReportConfig.port, org.apache.dubbo.config.MetadataReportConfig.group, org.apache.dubbo.config.MetadataReportConfig.reportMetadata, org.apache.dubbo.config.MetadataReportConfig.protocol, org.apache.dubbo.config.MetadataReportConfig.retryPeriod, org.apache.dubbo.config.MetadataReportConfig.file, org.apache.dubbo.config.MetadataReportConfig.syncReport, org.apache.dubbo.config.MetadataReportConfig.registry, org.apache.dubbo.config.MetadataReportConfig.cluster, org.apache.dubbo.config.MetadataReportConfig.username, org.apache.dubbo.config.MetadataReportConfig.cycleReport, org.apache.dubbo.config.MetadataReportConfig.parameters, org.apache.dubbo.config.MetadataReportConfig.timeout, org.apache.dubbo.config.MetadataReportConfig.reportDefinition, org.apache.dubbo.config.MetadataReportConfig.address], extractedMethods=[org.apache.dubbo.config.MetadataReportConfig.getFile(), org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer), org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.setGroup(String), org.apache.dubbo.config.MetadataReportConfig.getTimeout(), org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod(), org.apache.dubbo.config.MetadataReportConfig.getCluster(), org.apache.dubbo.config.MetadataReportConfig.setRegistry(String), org.apache.dubbo.config.MetadataReportConfig.getRegistry(), org.apache.dubbo.config.MetadataReportConfig.getGroup(), org.apache.dubbo.config.MetadataReportConfig.getPort(), org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer), org.apache.dubbo.config.MetadataReportConfig.getUsername(), org.apache.dubbo.config.MetadataReportConfig.setAddress(String), org.apache.dubbo.config.MetadataReportConfig.setFile(String), org.apache.dubbo.config.MetadataReportConfig.setUsername(String), org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean), org.apache.dubbo.config.MetadataReportConfig.getCycleReport(), org.apache.dubbo.config.MetadataReportConfig.getReportMetadata(), org.apache.dubbo.config.MetadataReportConfig.setPort(Integer), org.apache.dubbo.config.MetadataReportConfig.toUrl(), org.apache.dubbo.config.MetadataReportConfig.setProtocol(String), org.apache.dubbo.config.MetadataReportConfig.getReportDefinition(), org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean), org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>), org.apache.dubbo.config.MetadataReportConfig.getSyncReport(), org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean), org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer), org.apache.dubbo.config.MetadataReportConfig.getParameters(), org.apache.dubbo.config.MetadataReportConfig.getProtocol(), org.apache.dubbo.config.MetadataReportConfig.isValid(), org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean), org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "d86b0f57-4950-4e27-8139-d9e6d3b78c89",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 195.0,
      "LackOfCohesion" : 0.5572367152366419,
      "MetricsIntensity" : 0.05984200820076145,
      "Density" : 0.9953225492106802
    },
    "euclideanDistance" : 195.00587276867688,
    "generation" : 40,
    "numberOfRefactorings" : 195,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7734231475811388,
      "LackOfCohesion" : 0.5572367152366419,
      "MetricsIntensity" : 0.05984200820076146,
      "Density" : 3.2800256904303153
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "643f22de-cf4b-42e1-90e3-06c97f3431b9",
    "objectives" : {
      "NumberOfConcerns" : 0.9917723688721289,
      "NumberOfRefactorings" : 198.0,
      "LackOfCohesion" : 0.556838317299236,
      "MetricsIntensity" : 0.05988856518605031,
      "Density" : 0.9943480802962386
    },
    "euclideanDistance" : 198.00577263324496,
    "generation" : 43,
    "numberOfRefactorings" : 198,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7726715686274508,
      "LackOfCohesion" : 0.556838317299236,
      "MetricsIntensity" : 0.05988856518605032,
      "Density" : 3.2789203084832903
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "c6a81c98-5899-417b-819d-41d7cac47d0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9900582790538224,
      "NumberOfRefactorings" : 201.0,
      "LackOfCohesion" : 0.5582200842399809,
      "MetricsIntensity" : 0.060264164019739545,
      "Density" : 0.990450204638472
    },
    "euclideanDistance" : 201.00566272728665,
    "generation" : 42,
    "numberOfRefactorings" : 201,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7706928264868176,
      "LackOfCohesion" : 0.5582200842399809,
      "MetricsIntensity" : 0.06026416401973954,
      "Density" : 3.272376046361881
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "a962fae7-cce5-4f27-a7f1-6205a28a7c09",
    "objectives" : {
      "NumberOfConcerns" : 0.9914295509084676,
      "NumberOfRefactorings" : 202.0,
      "LackOfCohesion" : 0.5575017427533082,
      "MetricsIntensity" : 0.05993152781084254,
      "Density" : 0.9947378678620152
    },
    "euclideanDistance" : 202.00566040574546,
    "generation" : 42,
    "numberOfRefactorings" : 202,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7731453096259966,
      "LackOfCohesion" : 0.5575017427533082,
      "MetricsIntensity" : 0.05993152781084254,
      "Density" : 3.2802056555269927
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.client.InstanceAddressURL.providerFirstParams, org.apache.dubbo.registry.client.InstanceAddressURL.instance], extractedMethods=[org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel(), org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams(), org.apache.dubbo.registry.client.InstanceAddressURL.getInstance(), org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo(), org.apache.dubbo.registry.client.InstanceAddressURL.getGroup(), org.apache.dubbo.registry.client.InstanceAddressURL.hashCode(), org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>), org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String), org.apache.dubbo.registry.client.InstanceAddressURL.getPort(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getHost(), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.registry.client.InstanceAddressURL.getSide(), org.apache.dubbo.registry.client.InstanceAddressURL.getIp(), org.apache.dubbo.registry.client.InstanceAddressURL.getAddress(), org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String), org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel(), org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String), org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String), org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "ba587d01-491c-41b9-96c7-3572949bce52",
    "objectives" : {
      "NumberOfConcerns" : 0.9893726431264999,
      "NumberOfRefactorings" : 205.0,
      "LackOfCohesion" : 0.5584038436141758,
      "MetricsIntensity" : 0.06030992698865885,
      "Density" : 0.989865523289807
    },
    "euclideanDistance" : 205.00554661794158,
    "generation" : 39,
    "numberOfRefactorings" : 205,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7705521472392636,
      "LackOfCohesion" : 0.5584038436141758,
      "MetricsIntensity" : 0.060309926988658856,
      "Density" : 3.2725515463917523
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "b6c24990-e551-4cd7-97d4-2f884d5a1d83",
    "objectives" : {
      "NumberOfConcerns" : 0.9904010970174837,
      "NumberOfRefactorings" : 205.0,
      "LackOfCohesion" : 0.5571029261006599,
      "MetricsIntensity" : 0.059978228602100433,
      "Density" : 0.9939582927304619
    },
    "euclideanDistance" : 205.00556774994877,
    "generation" : 42,
    "numberOfRefactorings" : 205,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77239263803681,
      "LackOfCohesion" : 0.5571029261006599,
      "MetricsIntensity" : 0.059978228602100433,
      "Density" : 3.279742765273312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "d821f784-d0e3-4ded-bdae-fde4eab579a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9904010970174837,
      "NumberOfRefactorings" : 210.0,
      "LackOfCohesion" : 0.557888476945266,
      "MetricsIntensity" : 0.0599936648973628,
      "Density" : 0.9931787175989086
    },
    "euclideanDistance" : 210.00543358944452,
    "generation" : 29,
    "numberOfRefactorings" : 210,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7723926380368102,
      "LackOfCohesion" : 0.557888476945266,
      "MetricsIntensity" : 0.059993664897362804,
      "Density" : 3.279279279279279
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "fe28e29e-f12c-42b0-b7d4-faab4437091f",
    "objectives" : {
      "NumberOfConcerns" : 0.9886870071991772,
      "NumberOfRefactorings" : 213.0,
      "LackOfCohesion" : 0.5592732491606581,
      "MetricsIntensity" : 0.0603703388486269,
      "Density" : 0.9929838238160202
    },
    "euclideanDistance" : 213.0053519281091,
    "generation" : 36,
    "numberOfRefactorings" : 213,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7704112952731734,
      "LackOfCohesion" : 0.5592732491606581,
      "MetricsIntensity" : 0.0603703388486269,
      "Density" : 3.2786357786357785
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceKey()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceModel()', targetType='org.apache.dubbo.rpc.RpcContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "f871909d-35e1-48d2-a4eb-48165f0f2ba4",
    "objectives" : {
      "NumberOfConcerns" : 0.9928008227631128,
      "NumberOfRefactorings" : 219.0,
      "LackOfCohesion" : 0.5558030247208215,
      "MetricsIntensity" : 0.0598956928656735,
      "Density" : 0.9951276554277918
    },
    "euclideanDistance" : 219.00522467973357,
    "generation" : 42,
    "numberOfRefactorings" : 219,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7734231475811388,
      "LackOfCohesion" : 0.5558030247208215,
      "MetricsIntensity" : 0.059895692865673505,
      "Density" : 3.279383429672446
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.logger, org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.appName], extractedMethods=[org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.post(Map<String,List<Map<String,Object>>>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "be4f2fa9-a12e-4c1d-9857-ed8c529b7252",
    "objectives" : {
      "NumberOfConcerns" : 0.9910867329448063,
      "NumberOfRefactorings" : 225.0,
      "LackOfCohesion" : 0.5565580860682005,
      "MetricsIntensity" : 0.059985524477194054,
      "Density" : 0.9945429740791268
    },
    "euclideanDistance" : 225.00507710673068,
    "generation" : 34,
    "numberOfRefactorings" : 225,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7725321888412016,
      "LackOfCohesion" : 0.5565580860682005,
      "MetricsIntensity" : 0.059985524477194054,
      "Density" : 3.279562982005142
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry(), org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery(), org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable(), org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL), org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "818046fc-23a5-47be-bbe8-cd02e34c8d0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9910867329448063,
      "NumberOfRefactorings" : 226.0,
      "LackOfCohesion" : 0.5566587407485823,
      "MetricsIntensity" : 0.0599867945047346,
      "Density" : 0.9937633989475736
    },
    "euclideanDistance" : 226.00505146118851,
    "generation" : 38,
    "numberOfRefactorings" : 226,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7725321888412013,
      "LackOfCohesion" : 0.5566587407485823,
      "MetricsIntensity" : 0.059986794504734604,
      "Density" : 3.2790996784565927
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "0acca292-46fb-49bf-9c06-7a03424e7992",
    "objectives" : {
      "NumberOfConcerns" : 0.9904010970174837,
      "NumberOfRefactorings" : 229.0,
      "LackOfCohesion" : 0.5567405367824176,
      "MetricsIntensity" : 0.06003106804489876,
      "Density" : 0.9939582927304619
    },
    "euclideanDistance" : 229.00498337629048,
    "generation" : 39,
    "numberOfRefactorings" : 229,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77239263803681,
      "LackOfCohesion" : 0.5567405367824176,
      "MetricsIntensity" : 0.060031068044898765,
      "Density" : 3.279742765273312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.isValid(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "9b860748-92e5-4067-966f-88739c045f6d",
    "objectives" : {
      "NumberOfConcerns" : 0.9904010970174837,
      "NumberOfRefactorings" : 234.0,
      "LackOfCohesion" : 0.5575260876270236,
      "MetricsIntensity" : 0.06004650434016116,
      "Density" : 0.9933736113817969
    },
    "euclideanDistance" : 234.0048762876232,
    "generation" : 40,
    "numberOfRefactorings" : 234,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.77239263803681,
      "LackOfCohesion" : 0.5575260876270236,
      "MetricsIntensity" : 0.06004650434016115,
      "Density" : 3.27992277992278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ConsumerModel.apps], extractedMethods=[org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String), org.apache.dubbo.rpc.model.ConsumerModel.hashCode(), org.apache.dubbo.rpc.model.ConsumerModel.getApps(), org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "e4c476bd-ea43-4367-915e-2ae922f48e2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9886870071991772,
      "NumberOfRefactorings" : 237.0,
      "LackOfCohesion" : 0.558910574271637,
      "MetricsIntensity" : 0.06042426080457316,
      "Density" : 0.9931787175989086
    },
    "euclideanDistance" : 237.00480994714985,
    "generation" : 10,
    "numberOfRefactorings" : 237,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7704112952731734,
      "LackOfCohesion" : 0.558910574271637,
      "MetricsIntensity" : 0.06042426080457316,
      "Density" : 3.279279279279279
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getDefaultPort()', targetType='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.DEFAULT_PORT', targetTypeName='org.apache.dubbo.registry.client.metadata.ServiceInstanceHostPortCustomizer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "cf9c7d38-6f80-4f26-b651-183b585ec717",
    "objectives" : {
      "NumberOfConcerns" : 0.9897154610901612,
      "NumberOfRefactorings" : 237.0,
      "LackOfCohesion" : 0.5576086316064163,
      "MetricsIntensity" : 0.06009085982151964,
      "Density" : 0.9935685051646852
    },
    "euclideanDistance" : 237.00481272194844,
    "generation" : 43,
    "numberOfRefactorings" : 237,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7722529158993245,
      "LackOfCohesion" : 0.5576086316064163,
      "MetricsIntensity" : 0.06009085982151964,
      "Density" : 3.28056628056628
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.isInjvmRefer(URL)', targetType='org.apache.dubbo.rpc.Constants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.getExporter(Map<String,Exporter<?>>, URL)', targetType='org.apache.dubbo.common.utils.UrlUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>export(Invoker<T>)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol.<T>protocolBindingRefer(Class<T>, URL)', targetType='org.apache.dubbo.rpc.protocol.AbstractProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.VirtualServiceRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isValid()', targetType='com.alibaba.dubbo.registry.NotifyListener.ReverseCompatibleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboPropertiesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.metadata.MetadataInfo.ServiceInfo",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getGroup()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getNumbers()', targetType='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.numbers', targetTypeName='com.alibaba.dubbo.config.ProviderConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, Map<String,Map<String,String>>)', targetType='org.apache.dubbo.common.url.component.param.FixedParamValue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getVersion()', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setVersion(String)', targetType='org.apache.dubbo.rpc.support.GroupServiceKeyCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildMatchKey()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toString()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getAllParams()', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setParams(Map<String,String>)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodNumbers()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getServiceKey()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.init()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getMethodParameter(String, String, String)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toDescString()', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.methodNumbers', targetTypeName='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.toFullString()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.hashCode()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.setProtocol(String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.buildServiceKey(String, String, String)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.equals(Object)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getProtocol()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.metadata.MetadataInfo.ServiceInfo.getUrl()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.client.InstanceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hashCode()', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getMetadataInfo()', targetType='org.apache.dubbo.monitor.dubbo.StatisticsItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getIp()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAddress()', targetType='org.apache.dubbo.rpc.stub.ServerStreamMethodHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getGroup()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.GeneralTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getApplicationModel()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getOrDefaultFrameworkModel()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.setProviderFirstParams(Set<String>)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getProviderFirstParams()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getSide()', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameters(String)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.hasServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstanceMetadata()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getInstance()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getParameter(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceMethodParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getServiceParameter(String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getHost()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addConsumerParams(String, Map<String,String>)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.consumerParamFirst(String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.getPort()', targetType='org.apache.dubbo.qos.command.impl.Help'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.client.InstanceAddressURL.addServiceParameter(String, String, String)', targetType='org.apache.dubbo.qos.command.impl.Help'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.isEmpty()', targetType='org.apache.dubbo.qos.command.impl.Live'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.getListenerMap()', targetType='org.apache.dubbo.common.beans.ScopeBeanExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.unregister(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher.register(MeshRuleListener)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendRuntimeParameters(Map<String,String>)', targetType='org.apache.dubbo.remoting.transport.ServerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.hasArgumentConfigProps(Map<String,String>, String, int)', targetType='org.apache.dubbo.common.config.OrderedPropertiesConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.registry.RegistryNotifier.NotificationTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOndisconnect()', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOndisconnect(String)', targetType='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.ondisconnect', targetTypeName='org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setScope(String)', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.scope', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThreadLocal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getSslConfig()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.protocol.AbstractExporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.metadata.report.MetadataReportInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToTransferQueueConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='com.alibaba.dubbo.config.ModuleConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.cluster.support.MergeableCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(String)', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.api.Http2ProtocolDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethodByName(String)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConnections()', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConnections(Integer)', targetType='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.connections', targetTypeName='org.apache.dubbo.metadata.definition.util.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.onconnect', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.tag', targetTypeName='org.apache.dubbo.rpc.listener.InvokerListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.protocol.tri.CancelableStreamObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLocal()', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(Boolean)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLocal(String)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verify(Class<?>, Class<?>)', targetType='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.local', targetTypeName='org.apache.dubbo.common.extension.inject.AdaptiveExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CopyOfFilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(String, InmemoryConfiguration)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.configCenter', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.qos.probe.impl.DeployerReadinessProbe'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.addAttachmentsIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.threadpool.MemoryLimitedLinkedBlockingQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.get(Object)', targetType='org.apache.dubbo.common.compiler.support.AbstractCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.put(Object, Object)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter.ObjectToStringMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypesDesc()', targetType='org.apache.dubbo.rpc.model.StubServiceDescriptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvoker(Invoker<?>)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvoker()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance.ConsistentHashSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getMethodName()', targetType='org.apache.dubbo.cache.support.threadlocal.ThreadLocalCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setArguments(Object[])', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getArguments()', targetType='org.apache.dubbo.rpc.protocol.tri.compressor.Gzip'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttachment(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.CancelQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.toString()', targetType='org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getCompatibleParamSignatures()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setCompatibleParamSignatures(String[])', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration.ApolloListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.initParameterDesc()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceModel(ServiceModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceModel()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnType()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnType(Class<?>)', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getProtocolServiceKey()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getServiceName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setTargetServiceUniqueName(String)', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getTargetServiceUniqueName()', targetType='org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypesDesc(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setInvokeMode(InvokeMode)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setParameterTypes(Class<?>[])', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getAttributes()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getInvokeMode()', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setMethodName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setServiceName(String)', targetType='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.RpcInvocation.invokeMode', targetTypeName='org.apache.dubbo.qos.command.impl.PublishMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.setReturnTypes(Type[])', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcInvocation.getReturnTypes()', targetType='org.apache.dubbo.remoting.utils.PayloadDropper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.ListenerRegistryWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isAvailable()', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getRegistry()', targetType='org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.isServiceDiscovery()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.lookup(URL)', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.ListenerRegistryWrapper.getUrl()', targetType='org.apache.dubbo.registry.support.AbstractRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ConsumerModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getApps()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.hashCode()', targetType='org.apache.dubbo.registry.client.event.RetryServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.getAsyncInfo(String)', targetType='org.apache.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ConsumerModel.equals(Object)', targetType='org.apache.dubbo.config.MonitorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.MetadataReportConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getGroup()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectInput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setSyncReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCycleReport(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty.NettyServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryPeriod(Integer)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRetryPeriod()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.retryPeriod', targetTypeName='org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setCluster(Boolean)', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCluster()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.cluster', targetTypeName='org.apache.dubbo.remoting.TimeoutException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRetryTimes(Integer)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setAddress(String)', targetType='org.apache.dubbo.common.compiler.support.JavassistCompiler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getFile()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setFile(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.file', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setRegistry(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getRegistry()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.registry', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getParameters()', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.updateParameters(Map<String,String>)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.parameters', targetTypeName='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportMetadata()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getSyncReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getCycleReport()', targetType='org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.toUrl()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setProtocol(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getProtocol()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.protocol', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getUsername()', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setUsername(String)', targetType='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.username', targetTypeName='org.apache.dubbo.config.context.ModuleConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportMetadata(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getReportDefinition()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setReportDefinition(Boolean)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.reportDefinition', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.ConnectionPoolSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setPort(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getPort()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setTimeout(Integer)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.getTimeout()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.MetadataReportConfig.isValid()', targetType='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.port', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.MetadataReportConfig.timeout', targetTypeName='org.apache.dubbo.rpc.filter.ActiveLimitFilter'"
      } ]
    } ]
  } ]
}