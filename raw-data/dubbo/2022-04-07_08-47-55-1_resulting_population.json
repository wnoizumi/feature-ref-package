{
  "executionId" : "7deb939b-5c2e-4830-8f0b-818e6cbdeefe",
  "computingTime" : 4317779,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 45,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2185897435897433,
    "meanNumConcerns" : 1.753836709637815,
    "meanMetricsIntensity" : 0.06120302141264511,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "8e95c5e5-787d-41a9-8c77-3fa5a9790bee",
    "objectives" : {
      "NumberOfConcerns" : 1.00070003500175,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5405059035042449,
      "MetricsIntensity" : 0.060925712598177285,
      "Density" : 0.9998008364867557
    },
    "euclideanDistance" : 26.044132944808716,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7518382352941184,
      "LackOfCohesion" : 0.5405059035042449,
      "MetricsIntensity" : 0.06092571259817728,
      "Density" : 3.2138284250960294
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "020a8821-e6a4-4913-8bf9-1cd5be6a7195",
    "objectives" : {
      "NumberOfConcerns" : 1.00070003500175,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5405249960469224,
      "MetricsIntensity" : 0.06092104026379597,
      "Density" : 0.9998008364867557
    },
    "euclideanDistance" : 26.04413333012236,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7518382352941178,
      "LackOfCohesion" : 0.5405249960469224,
      "MetricsIntensity" : 0.06092104026379596,
      "Density" : 3.2138284250960303
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "843fac4b-e497-424f-ba0b-dbbb2b1d4eb8",
    "objectives" : {
      "NumberOfConcerns" : 1.00070003500175,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5404247433995,
      "MetricsIntensity" : 0.060933788237848695,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 26.04419249319711,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7518382352941178,
      "LackOfCohesion" : 0.5404247433995,
      "MetricsIntensity" : 0.0609337882378487,
      "Density" : 3.216890595009597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "7850cb81-b399-434a-945c-9a20e9a090a3",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5404790261188771,
      "MetricsIntensity" : 0.060932519208757495,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 26.04422238642152,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921564,
      "LackOfCohesion" : 0.5404790261188771,
      "MetricsIntensity" : 0.060932519208757495,
      "Density" : 3.218170185540626
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "65f7f20b-19b5-4271-b663-69cd3b54de39",
    "objectives" : {
      "NumberOfConcerns" : 1.0014000700035002,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5404681071810712,
      "MetricsIntensity" : 0.06093315372330311,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 26.04423561712838,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7530637254901955,
      "LackOfCohesion" : 0.5404681071810712,
      "MetricsIntensity" : 0.060933153723303116,
      "Density" : 3.218170185540626
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "c51edc02-fdeb-449e-bd39-43acdf0f36c0",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5404778262356017,
      "MetricsIntensity" : 0.06093251920875748,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 27.04253551486773,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921569,
      "LackOfCohesion" : 0.5404778262356017,
      "MetricsIntensity" : 0.06093251920875749,
      "Density" : 3.2136916186820224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "44bb1c9f-b6a8-4e7e-b96d-83a1cfd1a1f2",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5404887451734077,
      "MetricsIntensity" : 0.06092997801562176,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 27.042535727372407,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752450980392157,
      "LackOfCohesion" : 0.5404887451734077,
      "MetricsIntensity" : 0.06092997801562176,
      "Density" : 3.2136916186820232
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "2c7576cc-9134-4ebc-9ddf-28c92cab89cd",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5404922392335053,
      "MetricsIntensity" : 0.06092848138892178,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 27.042535793835032,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921564,
      "LackOfCohesion" : 0.5404922392335053,
      "MetricsIntensity" : 0.06092848138892179,
      "Density" : 3.2136916186820224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "a93b3898-5e2a-464f-b48b-13b83cf146c6",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5408729672059907,
      "MetricsIntensity" : 0.0609729038955874,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 27.042539711461323,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960789,
      "LackOfCohesion" : 0.5408729672059907,
      "MetricsIntensity" : 0.0609729038955874,
      "Density" : 3.217669654289372
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.initReferenceBean(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "b867ebb4-18f7-49cd-8c4f-8883fb25f9f0",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5408943683240899,
      "MetricsIntensity" : 0.060973202487830634,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 27.042549317768636,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980398,
      "LackOfCohesion" : 0.5408943683240899,
      "MetricsIntensity" : 0.060973202487830634,
      "Density" : 3.219590268886043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "fcc9e46c-036a-4437-ae01-eaeeb5351b64",
    "objectives" : {
      "NumberOfConcerns" : 1.0014000700035002,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5404778262356016,
      "MetricsIntensity" : 0.060933153723303095,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 27.04255584385752,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.753063725490196,
      "LackOfCohesion" : 0.5404778262356016,
      "MetricsIntensity" : 0.060933153723303095,
      "Density" : 3.2143314139475376
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "1d1bf5fb-2d77-4312-a3fd-c2b7eaadc210",
    "objectives" : {
      "NumberOfConcerns" : 1.00070003500175,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5404004097666758,
      "MetricsIntensity" : 0.06093315372330311,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 27.042557871713537,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.751838235294118,
      "LackOfCohesion" : 0.5404004097666758,
      "MetricsIntensity" : 0.06093315372330311,
      "Density" : 3.216890595009597
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "bd830a58-f198-4a7c-af32-e8e080206d72",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5408169289483016,
      "MetricsIntensity" : 0.06097320248783061,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 27.042568091728374,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960784,
      "LackOfCohesion" : 0.5408169289483016,
      "MetricsIntensity" : 0.06097320248783061,
      "Density" : 3.220230473751602
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "f567d483-51fc-4682-b9b5-55d7022a3862",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5408169289483015,
      "MetricsIntensity" : 0.06097320248783063,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 27.042568091728374,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960789,
      "LackOfCohesion" : 0.5408169289483015,
      "MetricsIntensity" : 0.06097320248783063,
      "Density" : 3.220230473751601
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "dcfba96f-608a-4faf-a0bb-0f7867d12edc",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5408905622943405,
      "MetricsIntensity" : 0.0609691646679949,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 27.042569555297927,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960789,
      "LackOfCohesion" : 0.5408905622943405,
      "MetricsIntensity" : 0.0609691646679949,
      "Density" : 3.2202304737516014
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "f9b66526-6170-48fb-a044-f7776fee98b1",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5407670138040469,
      "MetricsIntensity" : 0.06094670327364631,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 28.041015225094778,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5407670138040469,
      "MetricsIntensity" : 0.060946703273646305,
      "Density" : 3.2183098591549304
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "294c05b3-dae5-4299-8f95-10b1e27c6848",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5408335342420295,
      "MetricsIntensity" : 0.060946703273646284,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 28.041016508010895,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980398,
      "LackOfCohesion" : 0.5408335342420295,
      "MetricsIntensity" : 0.06094670327364629,
      "Density" : 3.2183098591549295
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "75c51e77-7cde-4885-ac5a-51df5225cf9d",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5408406471500857,
      "MetricsIntensity" : 0.06094266545381061,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 28.04101663642424,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5408406471500857,
      "MetricsIntensity" : 0.0609426654538106,
      "Density" : 3.21830985915493
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "b5854b50-ec69-4124-8428-2acdb608fe3d",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5404307035264528,
      "MetricsIntensity" : 0.06096636587824567,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 28.041017817893405,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752450980392157,
      "LackOfCohesion" : 0.5404307035264528,
      "MetricsIntensity" : 0.06096636587824568,
      "Density" : 3.213691618682023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "78544857-45bb-42b8-9451-2a9282ac15ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5404307035264528,
      "MetricsIntensity" : 0.06096636587824567,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 28.041017817893405,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921569,
      "LackOfCohesion" : 0.5404307035264528,
      "MetricsIntensity" : 0.06096636587824567,
      "Density" : 3.2136916186820224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "803c19d9-2de4-412f-bf16-c1d717154285",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5404307035264527,
      "MetricsIntensity" : 0.06097212684653861,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 28.04101783041941,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921569,
      "LackOfCohesion" : 0.5404307035264527,
      "MetricsIntensity" : 0.06097212684653861,
      "Density" : 3.213691618682023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "ae35d6e5-ab84-47af-8f2f-84ffe0d4d7cb",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5404450694221844,
      "MetricsIntensity" : 0.060928481388921776,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 28.041018012426726,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921566,
      "LackOfCohesion" : 0.5404450694221844,
      "MetricsIntensity" : 0.060928481388921776,
      "Density" : 3.213691618682023
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "50101f20-c330-49be-bdff-61ca372a0034",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5403983245641187,
      "MetricsIntensity" : 0.06093142636404108,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 28.041024224047174,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921564,
      "LackOfCohesion" : 0.5403983245641187,
      "MetricsIntensity" : 0.06093142636404108,
      "Density" : 3.2143314139475367
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "581697dd-6578-4ae3-a79e-b54ea56bfab3",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5408161490241725,
      "MetricsIntensity" : 0.06094210193389947,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 28.041028647224877,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960784,
      "LackOfCohesion" : 0.5408161490241725,
      "MetricsIntensity" : 0.06094210193389946,
      "Density" : 3.21830985915493
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "8828bc49-2bae-4512-a3d2-c9186764b051",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5407198439927261,
      "MetricsIntensity" : 0.06095627867497099,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 29.0395951460137,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980395,
      "LackOfCohesion" : 0.5407198439927261,
      "MetricsIntensity" : 0.060956278674970985,
      "Density" : 3.217669654289372
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      } ]
    } ]
  }, {
    "solutionId" : "dfd4dc2f-b174-41fd-8677-10be08404071",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5406810223523674,
      "MetricsIntensity" : 0.06094763951538843,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 29.03959959577563,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960784,
      "LackOfCohesion" : 0.5406810223523674,
      "MetricsIntensity" : 0.060947639515388424,
      "Density" : 3.217029449423815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "8a0cf521-046b-40ef-b0c8-f33abcb84f82",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5403664530699832,
      "MetricsIntensity" : 0.060932519208757495,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 29.039604107078205,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921564,
      "LackOfCohesion" : 0.5403664530699832,
      "MetricsIntensity" : 0.06093251920875749,
      "Density" : 3.2136916186820224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "bc0c0463-7ff1-409d-a9e0-71d24a5c0465",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5407406652775762,
      "MetricsIntensity" : 0.06093806411406378,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 29.039614416558557,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960793,
      "LackOfCohesion" : 0.5407406652775762,
      "MetricsIntensity" : 0.06093806411406378,
      "Density" : 3.2183098591549304
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "07fa458a-fd32-441e-8fff-66e2d80ed695",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5406776474079545,
      "MetricsIntensity" : 0.06095167733522416,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 30.03826961341382,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5406776474079545,
      "MetricsIntensity" : 0.06095167733522416,
      "Density" : 3.217029449423815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "fb3b1428-d87a-4ef3-83ac-23524b304cea",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5406018275109867,
      "MetricsIntensity" : 0.060935637889839925,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 30.038279870660883,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960784,
      "LackOfCohesion" : 0.5406018275109867,
      "MetricsIntensity" : 0.060935637889839925,
      "Density" : 3.2149712092130516
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "e6839902-37e8-4876-b111-bdd4dd9e714c",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5406758115865432,
      "MetricsIntensity" : 0.06093563788983991,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 30.038281202250527,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960784,
      "LackOfCohesion" : 0.5406758115865432,
      "MetricsIntensity" : 0.06093563788983991,
      "Density" : 3.214971209213052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "49f6128e-e365-4910-a865-d085d9d02811",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5405988183491727,
      "MetricsIntensity" : 0.06095167733522416,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 30.038286485311865,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960789,
      "LackOfCohesion" : 0.5405988183491727,
      "MetricsIntensity" : 0.06095167733522415,
      "Density" : 3.217669654289372
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "3eb21a76-2046-4f9b-9c4b-b89cea0e59bd",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5405988183491727,
      "MetricsIntensity" : 0.06095167733522416,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 30.038286485311865,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960786,
      "LackOfCohesion" : 0.5405988183491727,
      "MetricsIntensity" : 0.06095167733522415,
      "Density" : 3.217669654289372
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "47d5e922-bc27-4f04-9d3c-62164699d7d7",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5408430193290532,
      "MetricsIntensity" : 0.06090747541598339,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 30.038334029279596,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921566,
      "LackOfCohesion" : 0.5408430193290532,
      "MetricsIntensity" : 0.060907475415983396,
      "Density" : 3.217530390275111
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.common.io.UnsafeStringWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "e31f9a1c-8e31-4555-9431-4f6399bdd4a8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5405843477568718,
      "MetricsIntensity" : 0.06094595613040387,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 31.037028549535517,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5405843477568718,
      "MetricsIntensity" : 0.06094595613040387,
      "Density" : 3.2163892445582594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "f2d1e0de-9e7d-4bdb-a1df-d2c09eedda1c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5405843477568718,
      "MetricsIntensity" : 0.06094595613040387,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 31.037028549535517,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5405843477568718,
      "MetricsIntensity" : 0.06094595613040387,
      "Density" : 3.2163892445582594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "3bed043c-9212-45e3-a969-7d9565fd2835",
    "objectives" : {
      "NumberOfConcerns" : 1.0017500875043752,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5407958495177325,
      "MetricsIntensity" : 0.06089884243124022,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 31.03712069784378,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.753676470588235,
      "LackOfCohesion" : 0.5407958495177325,
      "MetricsIntensity" : 0.06089884243124022,
      "Density" : 3.217530390275112
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.common.io.UnsafeStringWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "3a013761-123b-489f-b0e5-e0d33e5ae2fc",
    "objectives" : {
      "NumberOfConcerns" : 1.0017500875043752,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5407722910822246,
      "MetricsIntensity" : 0.06089884243124022,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 31.03713314425967,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.753676470588235,
      "LackOfCohesion" : 0.5407722910822246,
      "MetricsIntensity" : 0.060898842431240226,
      "Density" : 3.2188099808061414
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.common.io.UnsafeStringWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String)', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "22323cc4-7a44-4297-b300-0fb5d32aa181",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5405754867202031,
      "MetricsIntensity" : 0.06090228351160233,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 32.03587871258947,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5405754867202031,
      "MetricsIntensity" : 0.06090228351160234,
      "Density" : 3.217029449423815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "3d3070ae-ca3b-4802-9da7-19e1fcb933e2",
    "objectives" : {
      "NumberOfConcerns" : 1.000350017500875,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5404750324923903,
      "MetricsIntensity" : 0.060941221994719144,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 32.03590046558608,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.751225490196079,
      "LackOfCohesion" : 0.5404750324923903,
      "MetricsIntensity" : 0.06094122199471915,
      "Density" : 3.218309859154931
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "03d479e4-dbf7-431f-af3a-d0fea0a153b8",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5406173615557098,
      "MetricsIntensity" : 0.060912493427472625,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 33.034770687318215,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5406173615557098,
      "MetricsIntensity" : 0.060912493427472625,
      "Density" : 3.2157490396927018
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "7fb7cf12-b762-47f2-9299-c3146e5a8fbf",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5405880153550203,
      "MetricsIntensity" : 0.06092217904569136,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 33.0347762568453,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5405880153550203,
      "MetricsIntensity" : 0.06092217904569136,
      "Density" : 3.2163892445582594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks(), org.apache.dubbo.config.AbstractInterfaceConfig.checkStubAndLocal(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "824987f5-aabd-4525-bc32-6d831d18873c",
    "objectives" : {
      "NumberOfConcerns" : 0.999649982499125,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5405506000502691,
      "MetricsIntensity" : 0.06092603251904527,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 34.03375386815621,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5405506000502691,
      "MetricsIntensity" : 0.06092603251904527,
      "Density" : 3.2163892445582594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.AbstractRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "5e506cf7-c966-48c2-8fc2-d8bf2981f0c1",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.540474387282429,
      "MetricsIntensity" : 0.06092113258705518,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 34.03376878763896,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980395,
      "LackOfCohesion" : 0.540474387282429,
      "MetricsIntensity" : 0.06092113258705519,
      "Density" : 3.2170294494238156
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='com.alibaba.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  }, {
    "solutionId" : "098ac59e-77bf-45e9-b3c6-2bed40d10b34",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5420161413005983,
      "MetricsIntensity" : 0.06091035915127374,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 35.03282299369203,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980393,
      "LackOfCohesion" : 0.5420161413005983,
      "MetricsIntensity" : 0.060910359151273734,
      "Density" : 3.216389244558259
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.remoting.TimeoutException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.validation.support.AbstractValidation'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.remoting.exchange.support.DefaultFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.remoting.http.jetty.JettyLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.transport.netty.NettyHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.common.Parameters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.common.utils.DefaultPage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2Logger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.config.context.AbstractConfigManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.cache.support.expiring.ExpiringMap.ExpiryObject'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.rpc.cluster.router.state.TailStateRouter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.IntArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.metadata.annotation.processing.ServiceDefinitionMetadataAnnotationProcessor'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides()', targetType='org.apache.dubbo.common.status.support.MemoryStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()', targetType='org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey()', targetType='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey', targetTypeName='org.apache.dubbo.rpc.filter.TokenHeaderFilter'"
      } ]
    } ]
  } ]
}