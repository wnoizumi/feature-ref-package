{
  "executionId" : "44a0250b-b8e6-4f94-9f12-34efc83724c5",
  "computingTime" : 4600737,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 30,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2247119078104998,
    "meanNumConcerns" : 1.7391037446286066,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "4895403c-7f01-41de-83df-d4ba680ac63a",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5437262532935112,
      "MetricsIntensity" : 0.061310135850548245,
      "Density" : 0.9930514194957316
    },
    "euclideanDistance" : 89.01275626541774,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455492,
      "LackOfCohesion" : 0.5437262532935112,
      "MetricsIntensity" : 0.06131013585054825,
      "Density" : 3.2043561819346578
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "624858b3-f4d4-446f-944e-e93ed6a95e4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5437786490757368,
      "MetricsIntensity" : 0.06130739997495779,
      "Density" : 0.9930514194957316
    },
    "euclideanDistance" : 89.0127565836036,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726212400245549,
      "LackOfCohesion" : 0.5437786490757368,
      "MetricsIntensity" : 0.061307399974957794,
      "Density" : 3.2043561819346578
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "61e8b0e5-82fa-4a2e-a6e3-c4296effa2cf",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5437592553635504,
      "MetricsIntensity" : 0.06130672449961917,
      "Density" : 0.9932499503672821
    },
    "euclideanDistance" : 89.01275867975214,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455494,
      "LackOfCohesion" : 0.5437592553635504,
      "MetricsIntensity" : 0.06130672449961917,
      "Density" : 3.204996796925048
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "de3304ba-74c3-4cd0-bc3c-79fd967ba2a4",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5438003413357252,
      "MetricsIntensity" : 0.06130608848503917,
      "Density" : 0.9932499503672821
    },
    "euclideanDistance" : 89.01275893030869,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455494,
      "LackOfCohesion" : 0.5438003413357252,
      "MetricsIntensity" : 0.061306088485039184,
      "Density" : 3.2049967969250495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "5c233d3a-ac25-43b8-8eaf-8ad2468b1152",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 89.0,
      "LackOfCohesion" : 0.5437592553635505,
      "MetricsIntensity" : 0.06130608848503919,
      "Density" : 0.9934484812388327
    },
    "euclideanDistance" : 89.0127648316786,
    "generation" : 1,
    "numberOfRefactorings" : 89,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875997,
      "LackOfCohesion" : 0.5437592553635505,
      "MetricsIntensity" : 0.06130608848503919,
      "Density" : 3.205637411915438
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "cba89967-95f9-4f14-a3e0-de53294278ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424494524374792,
      "MetricsIntensity" : 0.061313039600744065,
      "Density" : 0.9934484812388327
    },
    "euclideanDistance" : 90.01261122895932,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455492,
      "LackOfCohesion" : 0.5424494524374792,
      "MetricsIntensity" : 0.06131303960074408,
      "Density" : 3.205637411915438
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "99a062a7-c025-4f5b-881c-4668ad556516",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424509336249334,
      "MetricsIntensity" : 0.06130899223523501,
      "Density" : 0.9934484812388327
    },
    "euclideanDistance" : 90.0126112351287,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726212400245549,
      "LackOfCohesion" : 0.5424509336249334,
      "MetricsIntensity" : 0.06130899223523502,
      "Density" : 3.205637411915438
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "e11270fa-376e-4cac-ad28-41eadd098de7",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424074765257819,
      "MetricsIntensity" : 0.061313039600744065,
      "Density" : 0.9936470121103832
    },
    "euclideanDistance" : 90.01261316736513,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455492,
      "LackOfCohesion" : 0.5424074765257819,
      "MetricsIntensity" : 0.061313039600744065,
      "Density" : 3.20627802690583
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "62c2b91d-c6e2-4343-8d46-792fd9b2ac7a",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424494524374793,
      "MetricsIntensity" : 0.061311682530483955,
      "Density" : 0.9936470121103832
    },
    "euclideanDistance" : 90.0126134193934,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455497,
      "LackOfCohesion" : 0.5424494524374793,
      "MetricsIntensity" : 0.061311682530483955,
      "Density" : 3.2062780269058297
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "eca2fa48-4e77-423f-9f42-d4bef1a1a6d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424494524374792,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 0.9936470121103832
    },
    "euclideanDistance" : 90.0126134193934,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455494,
      "LackOfCohesion" : 0.5424494524374792,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 3.206278026905831
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "b6b03923-3d95-4031-904c-5ef3ef527dc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424494524374792,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 0.9936470121103832
    },
    "euclideanDistance" : 90.0126134193934,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726212400245549,
      "LackOfCohesion" : 0.5424494524374792,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 3.20627802690583
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "40703bee-ba49-43d0-9445-700214b84d91",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5428449446572425,
      "MetricsIntensity" : 0.06130460517606261,
      "Density" : 0.9934484812388327
    },
    "euclideanDistance" : 90.01261360746645,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455492,
      "LackOfCohesion" : 0.5428449446572425,
      "MetricsIntensity" : 0.06130460517606261,
      "Density" : 3.205637411915438
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "55a99325-91d3-4696-8475-e632ca8c6064",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424509336249337,
      "MetricsIntensity" : 0.061308992235235005,
      "Density" : 0.9938455429819337
    },
    "euclideanDistance" : 90.01261951138733,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726826273787599,
      "LackOfCohesion" : 0.5424509336249337,
      "MetricsIntensity" : 0.06130899223523499,
      "Density" : 3.206918641896221
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "b6ae5e41-aebb-4972-88e6-11c5a3de85ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.543398489022107,
      "MetricsIntensity" : 0.06129078577815804,
      "Density" : 0.9934484812388327
    },
    "euclideanDistance" : 90.0126208311575,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726826273787599,
      "LackOfCohesion" : 0.543398489022107,
      "MetricsIntensity" : 0.06129078577815804,
      "Density" : 3.205637411915438
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "b56d867d-31d6-4c9a-b253-8cef697ee0c2",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424092927953286,
      "MetricsIntensity" : 0.06131168253048399,
      "Density" : 0.9940440738534843
    },
    "euclideanDistance" : 90.01262145451965,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726826273787599,
      "LackOfCohesion" : 0.5424092927953286,
      "MetricsIntensity" : 0.06131168253048398,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "3772dba6-334e-4e34-9a66-d434f62ba383",
    "objectives" : {
      "NumberOfConcerns" : 0.9925873632192023,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5434403346892547,
      "MetricsIntensity" : 0.06130406369848718,
      "Density" : 0.9938455429819337
    },
    "euclideanDistance" : 90.01262158287871,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7262124002455497,
      "LackOfCohesion" : 0.5434403346892547,
      "MetricsIntensity" : 0.061304063698487184,
      "Density" : 3.2069186418962192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "83bd265f-7a72-4b94-8f51-fea9d6b7dbde",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5433709082498454,
      "MetricsIntensity" : 0.06130008137586572,
      "Density" : 0.9936470121103832
    },
    "euclideanDistance" : 90.01262286234719,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875997,
      "LackOfCohesion" : 0.5433709082498454,
      "MetricsIntensity" : 0.06130008137586572,
      "Density" : 3.20627802690583
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "a80f53b7-6da7-45c3-8f86-86cf80f7abda",
    "objectives" : {
      "NumberOfConcerns" : 0.9932933286268972,
      "NumberOfRefactorings" : 90.0,
      "LackOfCohesion" : 0.5424209435663777,
      "MetricsIntensity" : 0.061311682530483975,
      "Density" : 0.9944411355965853
    },
    "euclideanDistance" : 90.01262980499622,
    "generation" : 1,
    "numberOfRefactorings" : 90,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7274401473296503,
      "LackOfCohesion" : 0.5424209435663777,
      "MetricsIntensity" : 0.06131168253048397,
      "Density" : 3.208840486867392
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "5b9880c5-e1db-47db-a1ec-21f65fa11aaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.541599596539357,
      "MetricsIntensity" : 0.06131303960074408,
      "Density" : 0.9940440738534843
    },
    "euclideanDistance" : 91.01247795529535,
    "generation" : 1,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726826273787599,
      "LackOfCohesion" : 0.541599596539357,
      "MetricsIntensity" : 0.06131303960074408,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "0eee01ea-9915-463d-ab3d-fdf1f4863858",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.5424453893359754,
      "MetricsIntensity" : 0.06131168253048397,
      "Density" : 0.9940440738534843
    },
    "euclideanDistance" : 91.01248299147845,
    "generation" : 1,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875997,
      "LackOfCohesion" : 0.5424453893359754,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "0cf26a42-d1d6-42e1-8cce-9030ed169ed4",
    "objectives" : {
      "NumberOfConcerns" : 0.9932933286268972,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.5423203304358197,
      "MetricsIntensity" : 0.06129016976179057,
      "Density" : 0.9940440738534843
    },
    "euclideanDistance" : 91.0124860834115,
    "generation" : 1,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.72744014732965,
      "LackOfCohesion" : 0.5423203304358197,
      "MetricsIntensity" : 0.06129016976179056,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "a6c9a166-3cf8-4125-b4e7-bc380e064948",
    "objectives" : {
      "NumberOfConcerns" : 0.9932933286268972,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.5416603479249704,
      "MetricsIntensity" : 0.06131247474863455,
      "Density" : 0.9944411355965853
    },
    "euclideanDistance" : 91.01248650575884,
    "generation" : 1,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7274401473296503,
      "LackOfCohesion" : 0.5416603479249704,
      "MetricsIntensity" : 0.06131247474863455,
      "Density" : 3.2088404868673925
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "be9b3459-0d37-41d4-addc-4d0dcb97a99c",
    "objectives" : {
      "NumberOfConcerns" : 0.9932933286268972,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.5431304485252917,
      "MetricsIntensity" : 0.061301065411286784,
      "Density" : 0.9938455429819337
    },
    "euclideanDistance" : 91.01248875349326,
    "generation" : 1,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7274401473296506,
      "LackOfCohesion" : 0.5431304485252917,
      "MetricsIntensity" : 0.06130106541128679,
      "Density" : 3.2069186418962183
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "c745aa5b-49f3-48ee-968f-17057d44315f",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 92.0,
      "LackOfCohesion" : 0.5424459766641831,
      "MetricsIntensity" : 0.0613004038145778,
      "Density" : 0.9936470121103832
    },
    "euclideanDistance" : 92.01234303229293,
    "generation" : 1,
    "numberOfRefactorings" : 92,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875992,
      "LackOfCohesion" : 0.5424459766641831,
      "MetricsIntensity" : 0.061300403814577804,
      "Density" : 3.2062780269058306
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "d76eea47-7b63-41cd-9419-e3d29fddc44b",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 92.0,
      "LackOfCohesion" : 0.5424459766641829,
      "MetricsIntensity" : 0.061311682530483955,
      "Density" : 0.9940440738534843
    },
    "euclideanDistance" : 92.01234732855879,
    "generation" : 1,
    "numberOfRefactorings" : 92,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875988,
      "LackOfCohesion" : 0.5424459766641829,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "63638032-f95a-43b7-a64d-5db691178fc7",
    "objectives" : {
      "NumberOfConcerns" : 0.9932933286268972,
      "NumberOfRefactorings" : 92.0,
      "LackOfCohesion" : 0.5423129173078394,
      "MetricsIntensity" : 0.06129016976179057,
      "Density" : 0.9940440738534843
    },
    "euclideanDistance" : 92.01235033973781,
    "generation" : 1,
    "numberOfRefactorings" : 92,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7274401473296503,
      "LackOfCohesion" : 0.5423129173078394,
      "MetricsIntensity" : 0.06129016976179057,
      "Density" : 3.2075592568866114
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "32a249b0-1dde-451b-be99-9a9d4926339c",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5423997147715662,
      "MetricsIntensity" : 0.061313039600744045,
      "Density" : 0.9942426047250348
    },
    "euclideanDistance" : 93.01221643218176,
    "generation" : 1,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875997,
      "LackOfCohesion" : 0.5423997147715662,
      "MetricsIntensity" : 0.06131303960074405,
      "Density" : 3.2081998718770017
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "2d196650-0b51-4743-b528-81d5d2112243",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.542441544189815,
      "MetricsIntensity" : 0.06131168253048396,
      "Density" : 0.9942426047250348
    },
    "euclideanDistance" : 93.01221667522438,
    "generation" : 1,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7268262737875995,
      "LackOfCohesion" : 0.542441544189815,
      "MetricsIntensity" : 0.06131168253048397,
      "Density" : 3.2081998718770017
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "897c2cff-06ed-409d-8998-4da5d2da99f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9929403459230498,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.5424415441898153,
      "MetricsIntensity" : 0.06131168253048395,
      "Density" : 0.9942426047250348
    },
    "euclideanDistance" : 93.01221667522438,
    "generation" : 1,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.726826273787599,
      "LackOfCohesion" : 0.5424415441898153,
      "MetricsIntensity" : 0.06131168253048394,
      "Density" : 3.2081998718770017
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReports(List<MetadataReportConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboServicesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method)', targetType='org.apache.dubbo.common.bytecode.Wrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  }, {
    "solutionId" : "f8a1eceb-d57b-4957-9612-563488554214",
    "objectives" : {
      "NumberOfConcerns" : 0.9908224496999647,
      "NumberOfRefactorings" : 109.0,
      "LackOfCohesion" : 0.5440223215230247,
      "MetricsIntensity" : 0.061277854108571374,
      "Density" : 0.9930514194957316
    },
    "euclideanDistance" : 109.01040131799493,
    "generation" : 1,
    "numberOfRefactorings" : 109,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7231430325352979,
      "LackOfCohesion" : 0.5440223215230247,
      "MetricsIntensity" : 0.061277854108571374,
      "Density" : 3.2043561819346578
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.getParameter(String)', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='com.alibaba.dubbo.rpc.Invocation.CompatibleInvocation'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeParameters(String...)', targetType='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.config.deploy.FrameworkModelCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setScopeModel(ScopeModel)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.config.deploy.DefaultModuleDeployer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.maven.plugin.DubboNativeCodeGeneratorMojo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.common.logger.support.FailsafeLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameterIfAbsent(String, String, String)', targetType='org.apache.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='com.alibaba.dubbo.config.MonitorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(Consumer<MetadataReportBuilder>)', targetType='org.apache.dubbo.rpc.protocol.grpc.GrpcConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metrics(MetricsConfig)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopped()', targetType='org.apache.dubbo.rpc.protocol.rest.RpcContextFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isPending()', targetType='org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.endModule()', targetType='com.alibaba.dubbo.container.page.PageServlet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>reference(Consumer<ReferenceBuilder<S>>)', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getTakeoverMode()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.monitor(MonitorConfig)', targetType='org.apache.dubbo.registry.client.migration.model.SubMigrationRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.ssl(SslConfig)', targetType='org.apache.dubbo.metadata.definition.protobuf.ProtobufTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getCache()', targetType='org.apache.dubbo.config.spring.util.SpringCompatUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarting()', targetType='com.alibaba.dubbo.registry.support.FailbackRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.executeMutually(Runnable)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.metadataReport(MetadataReportConfig)', targetType='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.lock', targetTypeName='org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.services(List<ServiceConfig>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isInitialized()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.destroy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.VsDestinationGroup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStopping()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.await()', targetType='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.awaited', targetTypeName='org.apache.dubbo.common.threadlocal.InternalThread'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStopped(ApplicationModel)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.setTakeoverMode(BootstrapTakeoverMode)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createApplicationBuilder(String)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.util.MeshRuleDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig, ModuleModel)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.module(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.providers(List<ProviderConfig>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(ProviderConfig)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.provider(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker.RetryTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumers(List<ConsumerConfig>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(String, Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.<S>service(Consumer<ServiceBuilder<S>>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.service(ServiceConfig<?>, ModuleModel)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(ConsumerConfig)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.consumer(Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.rpc.stub.StubSuppliers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplicationModel()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reset(boolean)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isStarted()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.initialize()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(String)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.isRunning()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance(FrameworkModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getInstance(ApplicationModel)', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newModule()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.asyncStart()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.newInstance()', targetType='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.bootstrap.DubboBootstrap.instance', targetTypeName='org.apache.dubbo.qos.command.impl.Online'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getConfigManager()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(RegistryConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(ProtocolConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.reference(ReferenceConfig<?>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocol(Consumer<ProtocolBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenter(Consumer<ConfigCenterBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.getApplication()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registry(Consumer<RegistryBuilder>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.configCenters(List<ConfigCenterConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.stop()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.notifyStarted(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.application(ApplicationConfig)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.protocols(List<ProtocolConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.references(List<ReferenceConfig>)', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.metadata.DubboShutdownMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.annotation.processing.ClassPathMetadataStorage'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.config.spring.context.event.DubboBootstrapStopedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.compare(String, String)', targetType='org.apache.dubbo.spring.boot.context.event.DubboConfigBeanDefinitionConflictApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='com.alibaba.dubbo.config.ApplicationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.Utf8Utils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.auth.AccessKeyAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.auth.AccessKeyAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getVersion()', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.VERSION', targetTypeName='org.apache.dubbo.common.utils.NamedThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method)', targetType='org.apache.dubbo.rpc.model.ServiceRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.unexport()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLogger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.metadata.report.support.NopMetadataReport'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.url.component.ServiceAddressURL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster.InvocationInterceptorInvoker'"
      } ]
    } ]
  } ]
}