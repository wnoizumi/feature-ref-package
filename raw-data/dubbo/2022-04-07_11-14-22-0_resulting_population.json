{
  "executionId" : "96f0cdc3-af6f-4a09-b039-47257efbab37",
  "computingTime" : 4241224,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 52,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2247119078104998,
    "meanNumConcerns" : 1.7391037446286066,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "ecc765d2-2905-4986-86e3-0e676ad31efe",
    "objectives" : {
      "NumberOfConcerns" : 0.9982350864807624,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5427774041287516,
      "MetricsIntensity" : 0.06108969882711426,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 23.04969565204367,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7317819963257808,
      "LackOfCohesion" : 0.5427774041287516,
      "MetricsIntensity" : 0.061089698827114264,
      "Density" : 3.206257982120052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "1ca5c0f3-1000-425d-bb1d-e5c082701994",
    "objectives" : {
      "NumberOfConcerns" : 0.99858806918461,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5427107807227861,
      "MetricsIntensity" : 0.061098331200239955,
      "Density" : 0.9986102838991463
    },
    "euclideanDistance" : 23.04978673716126,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7323943661971826,
      "LackOfCohesion" : 0.5427107807227861,
      "MetricsIntensity" : 0.061098331200239955,
      "Density" : 3.212005108556833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "8e82161a-099d-497f-a0e4-6c9056cd82d2",
    "objectives" : {
      "NumberOfConcerns" : 0.99858806918461,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.542724766876378,
      "MetricsIntensity" : 0.06109493056840258,
      "Density" : 0.9986102838991463
    },
    "euclideanDistance" : 23.049787057457802,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7323943661971826,
      "LackOfCohesion" : 0.542724766876378,
      "MetricsIntensity" : 0.06109493056840258,
      "Density" : 3.212005108556833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "ee7a7565-07c0-4dd8-8a1c-5299c4708bf9",
    "objectives" : {
      "NumberOfConcerns" : 0.9989410518884575,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.542724418673384,
      "MetricsIntensity" : 0.06107172451486644,
      "Density" : 0.9984117530275958
    },
    "euclideanDistance" : 23.04979368245823,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7330067360685857,
      "LackOfCohesion" : 0.542724418673384,
      "MetricsIntensity" : 0.06107172451486644,
      "Density" : 3.211366538952746
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "c547cd31-3713-4423-aba9-569485de8610",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.542788876155149,
      "MetricsIntensity" : 0.06109291732341598,
      "Density" : 0.996624975183641
    },
    "euclideanDistance" : 24.047577293788194,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115736,
      "LackOfCohesion" : 0.542788876155149,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 3.2056194125159636
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "e4159aba-9284-4c9b-b6a5-784553b62e27",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5427559501881016,
      "MetricsIntensity" : 0.06110236584818267,
      "Density" : 0.9976176295413937
    },
    "euclideanDistance" : 24.047647018957736,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543792,
      "LackOfCohesion" : 0.5427559501881016,
      "MetricsIntensity" : 0.06110236584818266,
      "Density" : 3.208812260536399
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "df8d899b-06d2-4257-9716-5dd7ad86b822",
    "objectives" : {
      "NumberOfConcerns" : 0.9982350864807624,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5427328870284135,
      "MetricsIntensity" : 0.06110173183207735,
      "Density" : 0.9982132221560452
    },
    "euclideanDistance" : 24.047685862324954,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.731781996325781,
      "LackOfCohesion" : 0.5427328870284135,
      "MetricsIntensity" : 0.06110173183207735,
      "Density" : 3.2107279693486586
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "b9170d98-8b7b-46e2-a086-8ed03661fa51",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.542744753492371,
      "MetricsIntensity" : 0.06110154969654167,
      "Density" : 0.9986102838991463
    },
    "euclideanDistance" : 24.047687964936802,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.731169626454379,
      "LackOfCohesion" : 0.542744753492371,
      "MetricsIntensity" : 0.06110154969654167,
      "Density" : 3.212005108556833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "df653ca2-7023-4b60-9995-8249c3be5d6c",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5425569492242269,
      "MetricsIntensity" : 0.06109792312441947,
      "Density" : 0.9988088147706968
    },
    "euclideanDistance" : 24.04769196286545,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543788,
      "LackOfCohesion" : 0.5425569492242269,
      "MetricsIntensity" : 0.061097923124419466,
      "Density" : 3.2126436781609202
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "d19f5bf7-4197-46f9-afbc-1875e69ef02a",
    "objectives" : {
      "NumberOfConcerns" : 0.9982350864807624,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5427447534923708,
      "MetricsIntensity" : 0.061074943011168156,
      "Density" : 0.9984117530275958
    },
    "euclideanDistance" : 24.047694303873964,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7317819963257814,
      "LackOfCohesion" : 0.5427447534923708,
      "MetricsIntensity" : 0.06107494301116815,
      "Density" : 3.2113665389527464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "7ee590b7-b2bf-4e01-9968-85ff7ca382a7",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5427495988574272,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 0.996624975183641
    },
    "euclideanDistance" : 25.045676893701632,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115736,
      "LackOfCohesion" : 0.5427495988574272,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 3.2056194125159636
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "f8b8a42a-c994-4bec-b910-eaaf86772efa",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5427495988574272,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 0.996624975183641
    },
    "euclideanDistance" : 25.045676893701632,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115736,
      "LackOfCohesion" : 0.5427495988574272,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 3.205619412515964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "030c1576-77e0-49a6-8e14-b62c167116cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5427495988574272,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 0.996624975183641
    },
    "euclideanDistance" : 25.045676893701632,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115736,
      "LackOfCohesion" : 0.5427495988574272,
      "MetricsIntensity" : 0.06109291732341597,
      "Density" : 3.2056194125159636
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "f721395a-5c1d-4a18-bbc0-46a1a10bbfe4",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.542977371323856,
      "MetricsIntensity" : 0.06106608469775767,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 25.045687922250874,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.542977371323856,
      "MetricsIntensity" : 0.06106608469775768,
      "Density" : 3.204980842911877
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "da21a241-9c70-4873-97f6-f340a032e500",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5429773713238562,
      "MetricsIntensity" : 0.061066084697757664,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 25.045687922250874,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5429773713238562,
      "MetricsIntensity" : 0.06106608469775767,
      "Density" : 3.2049808429118776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "a9c213f0-64cd-4136-a360-138c19f29875",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5430119408658639,
      "MetricsIntensity" : 0.061066084697757636,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 25.04568867172425,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5430119408658639,
      "MetricsIntensity" : 0.061066084697757636,
      "Density" : 3.2049808429118776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "c9b8ef99-7ca9-4d16-973f-251cd145759f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5427408705690446,
      "MetricsIntensity" : 0.061089290751293775,
      "Density" : 0.9970220369267421
    },
    "euclideanDistance" : 25.045706555087182,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5427408705690446,
      "MetricsIntensity" : 0.061089290751293775,
      "Density" : 3.206896551724138
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "2a256ed4-cf74-44c4-ae64-dd31c777816c",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5429781767752331,
      "MetricsIntensity" : 0.06106291000620506,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 25.045717793161668,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.731169626454378,
      "LackOfCohesion" : 0.5429781767752331,
      "MetricsIntensity" : 0.06106291000620506,
      "Density" : 3.206257982120052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "15f399fb-be21-48dd-9dca-abfef4c1c16b",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5429802440014289,
      "MetricsIntensity" : 0.06106268406592026,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 25.04571783742729,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543788,
      "LackOfCohesion" : 0.5429802440014289,
      "MetricsIntensity" : 0.06106268406592026,
      "Density" : 3.206257982120052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "5d13993e-531a-46d9-a400-5c55f526b1f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.542980244001429,
      "MetricsIntensity" : 0.061062684065920254,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 25.04571783742729,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543788,
      "LackOfCohesion" : 0.542980244001429,
      "MetricsIntensity" : 0.061062684065920254,
      "Density" : 3.206257982120052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "2acf5f2a-57de-4d60-a8b0-acf82de5b85c",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.542980244001429,
      "MetricsIntensity" : 0.061062684065920254,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 25.04571783742729,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543788,
      "LackOfCohesion" : 0.542980244001429,
      "MetricsIntensity" : 0.061062684065920254,
      "Density" : 3.2062579821200514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "5156dc76-789b-4a20-a478-3a4ad101ff28",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5429889722898115,
      "MetricsIntensity" : 0.06104501124384837,
      "Density" : 0.9974190986698431
    },
    "euclideanDistance" : 25.045727634133655,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5429889722898115,
      "MetricsIntensity" : 0.06104501124384837,
      "Density" : 3.2102236421725245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "8c37f7f7-9c90-48bc-aa34-52d0c0b7f9e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5430119408658638,
      "MetricsIntensity" : 0.06104478530356359,
      "Density" : 0.9974190986698431
    },
    "euclideanDistance" : 25.045728131550018,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5430119408658638,
      "MetricsIntensity" : 0.06104478530356359,
      "Density" : 3.2102236421725245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "bf3691e0-e42d-4288-a77d-bac78e0a49b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5427848237355428,
      "MetricsIntensity" : 0.06108910861575809,
      "Density" : 0.9974190986698431
    },
    "euclideanDistance" : 25.045737377755497,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.731169626454379,
      "LackOfCohesion" : 0.5427848237355428,
      "MetricsIntensity" : 0.061089108615758086,
      "Density" : 3.208173690932311
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "ef278656-99e5-4e9a-94d8-d9abf77156a7",
    "objectives" : {
      "NumberOfConcerns" : 0.99858806918461,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5429662163950996,
      "MetricsIntensity" : 0.06106268406592026,
      "Density" : 0.996624975183641
    },
    "euclideanDistance" : 25.045737769860352,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7323943661971826,
      "LackOfCohesion" : 0.5429662163950996,
      "MetricsIntensity" : 0.06106268406592026,
      "Density" : 3.2056194125159636
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "3ff33536-a6d8-4fe2-b9f5-cc679899c1de",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5425658235805267,
      "MetricsIntensity" : 0.061088882675473286,
      "Density" : 0.9980146912844947
    },
    "euclideanDistance" : 25.045742296763986,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5425658235805267,
      "MetricsIntensity" : 0.06108888267547328,
      "Density" : 3.212140575079873
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "71d3bcc5-be87-4093-b58d-2368c89e37ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5429802440014286,
      "MetricsIntensity" : 0.06104138467172619,
      "Density" : 0.9978161604129442
    },
    "euclideanDistance" : 25.045757312946996,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543788,
      "LackOfCohesion" : 0.5429802440014286,
      "MetricsIntensity" : 0.06104138467172619,
      "Density" : 3.2115015974440886
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "35576992-fc20-4bf5-8136-3520887f0b2c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989410518884575,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5426961042371232,
      "MetricsIntensity" : 0.06108339324875816,
      "Density" : 0.9976176295413937
    },
    "euclideanDistance" : 25.045785561694903,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7330067360685857,
      "LackOfCohesion" : 0.5426961042371232,
      "MetricsIntensity" : 0.06108339324875815,
      "Density" : 3.2108626198083052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "56b27036-fcf7-4593-a54e-7c1cde4ea84d",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5425545281485021,
      "MetricsIntensity" : 0.06109792312441947,
      "Density" : 0.9988088147706968
    },
    "euclideanDistance" : 25.045787791836904,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7311696264543788,
      "LackOfCohesion" : 0.5425545281485021,
      "MetricsIntensity" : 0.06109792312441948,
      "Density" : 3.2126436781609202
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "9408d34b-024a-41b4-a440-d8aa65916788",
    "objectives" : {
      "NumberOfConcerns" : 0.99858806918461,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5425430676858148,
      "MetricsIntensity" : 0.06109792312441946,
      "Density" : 0.9986102838991463
    },
    "euclideanDistance" : 25.045807764325172,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7323943661971826,
      "LackOfCohesion" : 0.5425430676858148,
      "MetricsIntensity" : 0.06109792312441946,
      "Density" : 3.2120051085568324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "0b6a4773-6091-4910-ab3c-44b7bb2f16a6",
    "objectives" : {
      "NumberOfConcerns" : 0.9989410518884575,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5425403191659713,
      "MetricsIntensity" : 0.061089290751293775,
      "Density" : 0.9984117530275958
    },
    "euclideanDistance" : 25.04581384489426,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7330067360685857,
      "LackOfCohesion" : 0.5425403191659713,
      "MetricsIntensity" : 0.061089290751293775,
      "Density" : 3.2113665389527464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "df704943-42a1-41fd-81ae-ee31cd08eb03",
    "objectives" : {
      "NumberOfConcerns" : 0.9992940345923049,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.542695792512538,
      "MetricsIntensity" : 0.06105727018909627,
      "Density" : 0.9980146912844947
    },
    "euclideanDistance" : 25.045815391099673,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.733619105939988,
      "LackOfCohesion" : 0.542695792512538,
      "MetricsIntensity" : 0.06105727018909626,
      "Density" : 3.212140575079873
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "8ca543fb-163c-4ce7-9ce0-fb75b378738b",
    "objectives" : {
      "NumberOfConcerns" : 0.9992940345923049,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5426957925125379,
      "MetricsIntensity" : 0.06105727018909628,
      "Density" : 0.9980146912844947
    },
    "euclideanDistance" : 25.045815391099673,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7336191059399884,
      "LackOfCohesion" : 0.5426957925125379,
      "MetricsIntensity" : 0.06105727018909628,
      "Density" : 3.212140575079873
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "bf3d4f11-7e46-4610-a7af-b6761c038565",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5429750744058606,
      "MetricsIntensity" : 0.061066084697757664,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 26.04393366994394,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5429750744058606,
      "MetricsIntensity" : 0.061066084697757664,
      "Density" : 3.2049808429118776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "0d40a617-6521-4a25-af43-55beaa3fd22c",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5429887123564585,
      "MetricsIntensity" : 0.06106608469775766,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 26.04393395427734,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5429887123564585,
      "MetricsIntensity" : 0.06106608469775766,
      "Density" : 3.204980842911877
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "bc60fcd7-7ab0-4237-bb71-3ca1ce4f81a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5429940086253147,
      "MetricsIntensity" : 0.06106268406592026,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 26.043949251110156,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5429940086253147,
      "MetricsIntensity" : 0.06106268406592026,
      "Density" : 3.2062579821200514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION, org.apache.dubbo.common.Version.logger], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "3e3ede8f-b573-4840-aaea-bf48581d9035",
    "objectives" : {
      "NumberOfConcerns" : 0.9978821037769149,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.542977822925704,
      "MetricsIntensity" : 0.06106268406592025,
      "Density" : 0.9968235060551915
    },
    "euclideanDistance" : 26.04396243590512,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.731169626454379,
      "LackOfCohesion" : 0.542977822925704,
      "MetricsIntensity" : 0.061062684065920254,
      "Density" : 3.206257982120052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "642a2bee-f338-42e5-a335-62ba70d3f78a",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5429887123564584,
      "MetricsIntensity" : 0.061044785303563595,
      "Density" : 0.9974190986698431
    },
    "euclideanDistance" : 26.04397190163857,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5429887123564584,
      "MetricsIntensity" : 0.061044785303563595,
      "Density" : 3.210223642172525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "43149fad-b6d6-4e3c-8513-7d38b87555e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9975291210730675,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5425629965035317,
      "MetricsIntensity" : 0.06110132375625689,
      "Density" : 0.9984117530275958
    },
    "euclideanDistance" : 26.044001197068628,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7305572565829759,
      "LackOfCohesion" : 0.5425629965035317,
      "MetricsIntensity" : 0.061101323756256896,
      "Density" : 3.2113665389527464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "a798eaa8-d4b0-41ec-a0d8-e324b27ebb87",
    "objectives" : {
      "NumberOfConcerns" : 0.9982350864807624,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5426961821682693,
      "MetricsIntensity" : 0.061083167308473366,
      "Density" : 0.9978161604129442
    },
    "euclideanDistance" : 26.044008153072962,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7317819963257814,
      "LackOfCohesion" : 0.5426961821682693,
      "MetricsIntensity" : 0.06108316730847336,
      "Density" : 3.2115015974440895
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "c691e67a-144c-4bf2-9e17-be27b1bdf473",
    "objectives" : {
      "NumberOfConcerns" : 0.9982350864807624,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5427098201188674,
      "MetricsIntensity" : 0.06108316730847335,
      "Density" : 0.9978161604129442
    },
    "euclideanDistance" : 26.044008437259507,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7317819963257808,
      "LackOfCohesion" : 0.5427098201188674,
      "MetricsIntensity" : 0.06108316730847335,
      "Density" : 3.211501597444089
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "f8ff1151-d911-4028-bf5a-51c4186b2cec",
    "objectives" : {
      "NumberOfConcerns" : 0.9982350864807624,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5425515360408444,
      "MetricsIntensity" : 0.06110132375625688,
      "Density" : 0.9982132221560452
    },
    "euclideanDistance" : 26.044020397507627,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7317819963257812,
      "LackOfCohesion" : 0.5425515360408444,
      "MetricsIntensity" : 0.061101323756256876,
      "Density" : 3.210727969348659
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "07a2914b-ac62-4af4-b143-c4d356f7064a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989410518884575,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5426957925125379,
      "MetricsIntensity" : 0.061083167308473366,
      "Density" : 0.9976176295413937
    },
    "euclideanDistance" : 26.04402760781172,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7330067360685855,
      "LackOfCohesion" : 0.5426957925125379,
      "MetricsIntensity" : 0.061083167308473366,
      "Density" : 3.2108626198083066
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "b5a92211-18b1-4290-b0fc-0a0fc5d20d46",
    "objectives" : {
      "NumberOfConcerns" : 0.99858806918461,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5427075232008719,
      "MetricsIntensity" : 0.061057270189096284,
      "Density" : 0.9982132221560452
    },
    "euclideanDistance" : 26.044037075975506,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7323943661971828,
      "LackOfCohesion" : 0.5427075232008719,
      "MetricsIntensity" : 0.06105727018909628,
      "Density" : 3.212779552715655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "015c7eb5-c52f-4247-83b4-10db930de276",
    "objectives" : {
      "NumberOfConcerns" : 0.99858806918461,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.542707523200872,
      "MetricsIntensity" : 0.06105727018909628,
      "Density" : 0.9982132221560452
    },
    "euclideanDistance" : 26.044037075975506,
    "generation" : 1,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7323943661971828,
      "LackOfCohesion" : 0.542707523200872,
      "MetricsIntensity" : 0.06105727018909627,
      "Density" : 3.212779552715655
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPath(String)', targetType='org.apache.dubbo.rpc.model.ScopeModelAwareExtensionProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getAllMethodModels()', targetType='org.apache.dubbo.common.utils.CIDRUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "2ecbd926-7789-47ed-9988-360a48175ea0",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5429862912807335,
      "MetricsIntensity" : 0.06109269138313117,
      "Density" : 0.996624975183641
    },
    "euclideanDistance" : 27.042303674457028,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115739,
      "LackOfCohesion" : 0.5429862912807335,
      "MetricsIntensity" : 0.06109269138313118,
      "Density" : 3.2056194125159636
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setUsername(String)', targetType='org.apache.dubbo.metadata.AbstractServiceNameMapping'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "02e12a02-2f0d-4812-84dc-f16b86dc43db",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5429840821696127,
      "MetricsIntensity" : 0.061096092014968566,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 29.039383436219964,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115736,
      "LackOfCohesion" : 0.5429840821696127,
      "MetricsIntensity" : 0.06109609201496856,
      "Density" : 3.2049808429118762
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "2304d6ab-3596-43c4-b459-408c95acf6fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9971761383692199,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5429840821696129,
      "MetricsIntensity" : 0.06109609201496855,
      "Density" : 0.9964264443120905
    },
    "euclideanDistance" : 29.039383436219964,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7299448867115736,
      "LackOfCohesion" : 0.5429840821696129,
      "MetricsIntensity" : 0.061096092014968545,
      "Density" : 3.2049808429118776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      } ]
    } ]
  }, {
    "solutionId" : "65f6b763-a01f-40fb-92b5-3e9ee2954d85",
    "objectives" : {
      "NumberOfConcerns" : 0.9968231556653724,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5429866377495448,
      "MetricsIntensity" : 0.061109322113277284,
      "Density" : 0.9970220369267421
    },
    "euclideanDistance" : 29.039391835639602,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7293325168401712,
      "LackOfCohesion" : 0.5429866377495448,
      "MetricsIntensity" : 0.061109322113277284,
      "Density" : 3.2089456869009587
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "bb7ad812-a2aa-4f9d-a89d-3ad3a908e3c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9968231556653724,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5429843481479277,
      "MetricsIntensity" : 0.061122215074630455,
      "Density" : 0.9974190986698431
    },
    "euclideanDistance" : 29.0394054551668,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7293325168401716,
      "LackOfCohesion" : 0.5429843481479277,
      "MetricsIntensity" : 0.06112221507463045,
      "Density" : 3.208173690932311
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "f19b994b-1b74-46fc-b053-a92bdf35dfb1",
    "objectives" : {
      "NumberOfConcerns" : 0.9968231556653724,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5429830389046705,
      "MetricsIntensity" : 0.06111858850250827,
      "Density" : 0.9976176295413937
    },
    "euclideanDistance" : 29.039412242689092,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7293325168401712,
      "LackOfCohesion" : 0.5429830389046705,
      "MetricsIntensity" : 0.06111858850250827,
      "Density" : 3.2088122605363982
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  }, {
    "solutionId" : "a240349d-a347-4260-a774-e79baf5014fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9968231556653724,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5429840821696129,
      "MetricsIntensity" : 0.061121989134345654,
      "Density" : 0.9974190986698431
    },
    "euclideanDistance" : 30.038093629142104,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7293325168401712,
      "LackOfCohesion" : 0.5429840821696129,
      "MetricsIntensity" : 0.061121989134345654,
      "Density" : 3.208173690932311
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.URLBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPassword(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setPort(int)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.destination.DubboDestination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.build()', targetType='org.apache.dubbo.rpc.support.MockProtocol'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.gen.dubbo.DubboGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addMethodParameters(Map<String,Map<String,String>>)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.clearParameters()', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.removeAttribute(String)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.addParameters(String...)', targetType='org.apache.dubbo.config.ArgumentConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setProtocol(String)', targetType='org.apache.dubbo.config.ServiceConfigBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.hasMethodParameter(String, String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setAddress(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.setHost(String)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.URLBuilder.from(URL)', targetType='com.alibaba.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.bootstrap.DubboBootstrap",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createProviderConfig(String, Consumer<ProviderBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProviderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.createConsumerConfig(String, Consumer<ConsumerBuilder>)', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.bootstrap.DubboBootstrap.registries(List<RegistryConfig>)', targetType='org.apache.dubbo.common.utils.CollectionUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.remoting.transport.netty.NettyBackedChannelBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getCacheMap()', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.removeCache(String)', targetType='org.apache.dubbo.metadata.definition.TypeDefinitionBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getMethodModel(String, String[])', targetType='org.apache.dubbo.rpc.protocol.tri.RequestMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.bytecode.ClassGenerator",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.bytecode.ClassGenerator.mCopyConstructors, org.apache.dubbo.common.bytecode.ClassGenerator.mSuperClass], extractedMethods=[org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(), org.apache.dubbo.common.bytecode.ClassGenerator.addMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setClassName(String), org.apache.dubbo.common.bytecode.ClassGenerator.newInstance(ClassLoader), org.apache.dubbo.common.bytecode.ClassGenerator.release(), org.apache.dubbo.common.bytecode.ClassGenerator.addConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtConstructor(Constructor<?>), org.apache.dubbo.common.bytecode.ClassGenerator.getCtMethod(Method), org.apache.dubbo.common.bytecode.ClassGenerator.setSuperClass(Class<?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.listener.ListenerExporterWrapper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.listener.ListenerExporterWrapper.getInvoker()', targetType='org.apache.dubbo.rpc.listener.ListenerExporterWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.util.DubboAnnotationUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.convertParameters(String[])', targetType='org.apache.dubbo.qos.command.decoder.TelnetCommandDecoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.util.DubboAnnotationUtils.resolveInterfaceName(Reference, Class<?>)', targetType='org.apache.dubbo.registry.multicast.MulticastRegistryFactory'"
      } ]
    } ]
  } ]
}