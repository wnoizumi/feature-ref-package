{
  "executionId" : "93498e2e-bc15-49e5-a8c0-5ee6261e5731",
  "computingTime" : 15100,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2923566878980894,
    "meanNumConcerns" : 1.7992633517495402,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.5405929317787899
  },
  "population" : [ {
    "solutionId" : "e2c88b8a-4081-48dc-aa06-3158ff5183ab",
    "objectives" : {
      "NumberOfConcerns" : 1.0044353462981916,
      "NumberOfRefactorings" : 7.0,
      "LackOfCohesion" : 0.5460931103153304,
      "MetricsIntensity" : 0.060582734910128166,
      "Density" : 1.0023215322112595
    },
    "euclideanDistance" : 7.163478678109579,
    "generation" : 0,
    "numberOfRefactorings" : 7,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7995110024449883,
      "LackOfCohesion" : 0.5460931103153304,
      "MetricsIntensity" : 0.06058273491012817,
      "Density" : 3.2895238095238093,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "bd32bb48-b6dd-4b32-ac25-2710a832ba79",
    "objectives" : {
      "NumberOfConcerns" : 1.0051177072671442,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5419469067537975,
      "MetricsIntensity" : 0.06016592290859752,
      "Density" : 1.0015476881408396
    },
    "euclideanDistance" : 10.114874480936562,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7974374618669924,
      "LackOfCohesion" : 0.5419469067537975,
      "MetricsIntensity" : 0.06016592290859753,
      "Density" : 3.278657378087397,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP, org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.C64], extractedMethods=[org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.base642bytes(String, String), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.indexOf(char[], char), org.apache.dubbo.common.io.Bytes.decodeTable(String), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.base642bytes(String, char[]), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.base642bytes(String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2long(byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.EMPTY_PARAM], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String), org.apache.dubbo.common.url.component.URLParam.getParameters(), org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.clearParameters(), org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String), org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int), org.apache.dubbo.common.url.component.URLParam.addParameter(String, String), org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.getMethodParameters(), org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>), org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.parse(String), org.apache.dubbo.common.url.component.URLParam.getRawParam(), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[]), org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String), org.apache.dubbo.common.url.component.URLParam.equals(Object), org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int), org.apache.dubbo.common.url.component.URLParam.getTimestamp()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.lock, org.apache.dubbo.registry.support.RegistryManager.registries], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getRegistryLock(), org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry), org.apache.dubbo.registry.support.RegistryManager.getRegistry(String), org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy(), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries(), org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc1028e8-fd9f-416b-8254-649cd34a8dfa",
    "objectives" : {
      "NumberOfConcerns" : 1.003752985329239,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5422785486866388,
      "MetricsIntensity" : 0.06061102906707188,
      "Density" : 0.99961307796479
    },
    "euclideanDistance" : 18.0639000795068,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7982885085574574,
      "LackOfCohesion" : 0.5422785486866388,
      "MetricsIntensity" : 0.06061102906707187,
      "Density" : 3.2764743183259357,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.EMPTY_PARAM], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String), org.apache.dubbo.common.url.component.URLParam.getParameters(), org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.clearParameters(), org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String), org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int), org.apache.dubbo.common.url.component.URLParam.addParameter(String, String), org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.getMethodParameters(), org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>), org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.parse(String), org.apache.dubbo.common.url.component.URLParam.getRawParam(), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[]), org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String), org.apache.dubbo.common.url.component.URLParam.equals(Object), org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int), org.apache.dubbo.common.url.component.URLParam.getTimestamp()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b46492be-ed3a-4ac7-bda4-8533532ab2b3",
    "objectives" : {
      "NumberOfConcerns" : 1.0017059024223813,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5407819364966694,
      "MetricsIntensity" : 0.06010273455391855,
      "Density" : 0.9992261559295802
    },
    "euclideanDistance" : 20.057365855644743,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.795718654434251,
      "LackOfCohesion" : 0.5407819364966694,
      "MetricsIntensity" : 0.06010273455391855,
      "Density" : 3.2835346471710114,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.lock, org.apache.dubbo.registry.support.RegistryManager.registries], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getRegistryLock(), org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry), org.apache.dubbo.registry.support.RegistryManager.getRegistry(String), org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy(), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries(), org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "223e58d6-d285-4861-a022-77a786adee8f",
    "objectives" : {
      "NumberOfConcerns" : 1.0013647219379052,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5454371773081363,
      "MetricsIntensity" : 0.060622476059363814,
      "Density" : 0.9982588508415554
    },
    "euclideanDistance" : 20.057428270808266,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7951070336391433,
      "LackOfCohesion" : 0.5454371773081363,
      "MetricsIntensity" : 0.06062247605936381,
      "Density" : 3.280356007628735,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "947c985f-afdf-4318-8f25-b444a216f69e",
    "objectives" : {
      "NumberOfConcerns" : 1.0027294438758103,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5467241192750292,
      "MetricsIntensity" : 0.06009826852209058,
      "Density" : 0.999806538982395
    },
    "euclideanDistance" : 20.057606998779388,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7964547677261617,
      "LackOfCohesion" : 0.5467241192750292,
      "MetricsIntensity" : 0.06009826852209058,
      "Density" : 3.279187817258883,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "a3f6ade8-9666-4c3d-858d-e118e575711c",
    "objectives" : {
      "NumberOfConcerns" : 1.003752985329239,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5457496940308565,
      "MetricsIntensity" : 0.06030306394184166,
      "Density" : 1.0011607661056297
    },
    "euclideanDistance" : 20.05769982134547,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7982885085574574,
      "LackOfCohesion" : 0.5457496940308565,
      "MetricsIntensity" : 0.060303063941841664,
      "Density" : 3.2836294416243654,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "928d3c5b-8f01-4cc8-a8bb-f58dc8ee9e63",
    "objectives" : {
      "NumberOfConcerns" : 1.003411804844763,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5410667865050488,
      "MetricsIntensity" : 0.06012873220010344,
      "Density" : 1.0009673050880248
    },
    "euclideanDistance" : 21.05481274027038,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7987767584097856,
      "LackOfCohesion" : 0.5410667865050488,
      "MetricsIntensity" : 0.06012873220010344,
      "Density" : 3.282994923857868,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d2dcd9e9-155d-48cf-9b4e-4eb002848d05",
    "objectives" : {
      "NumberOfConcerns" : 1.0020470829068577,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.544730988297135,
      "MetricsIntensity" : 0.060242500232755555,
      "Density" : 0.9982588508415554
    },
    "euclideanDistance" : 23.04996703030378,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7963302752293575,
      "LackOfCohesion" : 0.544730988297135,
      "MetricsIntensity" : 0.060242500232755555,
      "Density" : 3.2761904761904765,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.EMPTY_PARAM], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String), org.apache.dubbo.common.url.component.URLParam.getParameters(), org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.clearParameters(), org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String), org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int), org.apache.dubbo.common.url.component.URLParam.addParameter(String, String), org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.getMethodParameters(), org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>), org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.parse(String), org.apache.dubbo.common.url.component.URLParam.getRawParam(), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[]), org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String), org.apache.dubbo.common.url.component.URLParam.equals(Object), org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int), org.apache.dubbo.common.url.component.URLParam.getTimestamp()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "3fb1461d-6394-498a-82e4-2a9807ce0e6b",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5440246534864485,
      "MetricsIntensity" : 0.06057632336194907,
      "Density" : 0.9980653898239504
    },
    "euclideanDistance" : 24.047780912943246,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7948560930802206,
      "LackOfCohesion" : 0.5440246534864485,
      "MetricsIntensity" : 0.06057632336194906,
      "Density" : 3.2776365946632784,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP, org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.C64], extractedMethods=[org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.base642bytes(String, String), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.indexOf(char[], char), org.apache.dubbo.common.io.Bytes.decodeTable(String), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.base642bytes(String, char[]), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.base642bytes(String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2long(byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.EMPTY_PARAM], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String), org.apache.dubbo.common.url.component.URLParam.getParameters(), org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.clearParameters(), org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String), org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int), org.apache.dubbo.common.url.component.URLParam.addParameter(String, String), org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.getMethodParameters(), org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>), org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.parse(String), org.apache.dubbo.common.url.component.URLParam.getRawParam(), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[]), org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String), org.apache.dubbo.common.url.component.URLParam.equals(Object), org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int), org.apache.dubbo.common.url.component.URLParam.getTimestamp()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e57dd725-a8bb-4112-aac4-3ff804a9a825",
    "objectives" : {
      "NumberOfConcerns" : 0.9996588195155237,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5411837086998297,
      "MetricsIntensity" : 0.06078928807844814,
      "Density" : 0.9984523118591604
    },
    "euclideanDistance" : 26.044054982252657,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.798649478207489,
      "LackOfCohesion" : 0.5411837086998297,
      "MetricsIntensity" : 0.06078928807844815,
      "Density" : 3.2872611464968147,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    } ]
  }, {
    "solutionId" : "fa0be882-c2d1-4837-ba8a-5ad87f28c4ea",
    "objectives" : {
      "NumberOfConcerns" : 1.0013647219379052,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5452157294003216,
      "MetricsIntensity" : 0.060525168886134524,
      "Density" : 1.0005803830528148
    },
    "euclideanDistance" : 27.042648093279364,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7962056303549567,
      "LackOfCohesion" : 0.5452157294003216,
      "MetricsIntensity" : 0.06052516888613453,
      "Density" : 3.2879847425301967,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1ea36a68-45b4-4137-b16f-2dc0111da13d",
    "objectives" : {
      "NumberOfConcerns" : 1.0003411804844762,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5426398955327315,
      "MetricsIntensity" : 0.060588153800233524,
      "Density" : 0.9951634745598762
    },
    "euclideanDistance" : 28.04084809343462,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7943696450428397,
      "LackOfCohesion" : 0.5426398955327315,
      "MetricsIntensity" : 0.06058815380023352,
      "Density" : 3.270184361093453,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP, org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.C64], extractedMethods=[org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.base642bytes(String, String), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.indexOf(char[], char), org.apache.dubbo.common.io.Bytes.decodeTable(String), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.base642bytes(String, char[]), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.base642bytes(String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2long(byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b656e09e-9eda-46ed-a585-f4084b0bb9d4",
    "objectives" : {
      "NumberOfConcerns" : 1.0010235414534288,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5471207741488625,
      "MetricsIntensity" : 0.06010376067771263,
      "Density" : 0.9986457728767654
    },
    "euclideanDistance" : 32.035953163809275,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7955936352509183,
      "LackOfCohesion" : 0.5471207741488625,
      "MetricsIntensity" : 0.06010376067771263,
      "Density" : 3.2774603174603176,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "ad0f361f-5ae9-4a26-b8ba-befd51db1dd6",
    "objectives" : {
      "NumberOfConcerns" : 1.0017059024223813,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.543623622698069,
      "MetricsIntensity" : 0.06038022679591513,
      "Density" : 0.9990326949119752
    },
    "euclideanDistance" : 33.03483999439674,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7968176254589967,
      "LackOfCohesion" : 0.543623622698069,
      "MetricsIntensity" : 0.06038022679591513,
      "Density" : 3.2787301587301583,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7b75a9a9-3eb9-466c-af4e-12ab52e9d060",
    "objectives" : {
      "NumberOfConcerns" : 1.0013647219379052,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5473105027829022,
      "MetricsIntensity" : 0.0603289601004233,
      "Density" : 0.9980653898239504
    },
    "euclideanDistance" : 33.034861195388565,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7962056303549567,
      "LackOfCohesion" : 0.5473105027829022,
      "MetricsIntensity" : 0.0603289601004233,
      "Density" : 3.2797202797202796,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.EMPTY_PARAM], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String), org.apache.dubbo.common.url.component.URLParam.getParameters(), org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.clearParameters(), org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String), org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int), org.apache.dubbo.common.url.component.URLParam.addParameter(String, String), org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.getMethodParameters(), org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>), org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.parse(String), org.apache.dubbo.common.url.component.URLParam.getRawParam(), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[]), org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String), org.apache.dubbo.common.url.component.URLParam.equals(Object), org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int), org.apache.dubbo.common.url.component.URLParam.getTimestamp()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.lock, org.apache.dubbo.registry.support.RegistryManager.registries], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getRegistryLock(), org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry), org.apache.dubbo.registry.support.RegistryManager.getRegistry(String), org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy(), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries(), org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "4a7ebb68-757d-4450-bd36-8095d199bd51",
    "objectives" : {
      "NumberOfConcerns" : 0.9989764585465711,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5447759396586609,
      "MetricsIntensity" : 0.060346522098625156,
      "Density" : 0.9969046237183208
    },
    "euclideanDistance" : 34.03369206126014,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7919216646266825,
      "LackOfCohesion" : 0.5447759396586609,
      "MetricsIntensity" : 0.060346522098625156,
      "Density" : 3.2759059122695477,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "095ae6de-5c7e-4713-8853-f566c08aaf01",
    "objectives" : {
      "NumberOfConcerns" : 1.0010235414534288,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5450559945971403,
      "MetricsIntensity" : 0.060140673541614245,
      "Density" : 0.9982588508415554
    },
    "euclideanDistance" : 36.03192017922009,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7944954128440371,
      "LackOfCohesion" : 0.5450559945971403,
      "MetricsIntensity" : 0.06014067354161425,
      "Density" : 3.280356007628735,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "70740239-226b-4b7b-b053-66f96141a32e",
    "objectives" : {
      "NumberOfConcerns" : 0.9996588195155237,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5482805672426022,
      "MetricsIntensity" : 0.06059507516827042,
      "Density" : 0.9986457728767654
    },
    "euclideanDistance" : 37.031080114934134,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.794243723208818,
      "LackOfCohesion" : 0.5482805672426022,
      "MetricsIntensity" : 0.06059507516827042,
      "Density" : 3.2816274634456457,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP, org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.C64], extractedMethods=[org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.base642bytes(String, String), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.indexOf(char[], char), org.apache.dubbo.common.io.Bytes.decodeTable(String), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.base642bytes(String, char[]), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.base642bytes(String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2long(byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "0aa5e871-ffbc-46da-87c8-0a42c638fb72",
    "objectives" : {
      "NumberOfConcerns" : 1.0010235414534288,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5489597105525389,
      "MetricsIntensity" : 0.060332025963730274,
      "Density" : 0.9982588508415554
    },
    "euclideanDistance" : 38.030297994901304,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.795593635250918,
      "LackOfCohesion" : 0.5489597105525389,
      "MetricsIntensity" : 0.06033202596373027,
      "Density" : 3.280356007628735,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.lock, org.apache.dubbo.registry.support.RegistryManager.registries], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getRegistryLock(), org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry), org.apache.dubbo.registry.support.RegistryManager.getRegistry(String), org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy(), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries(), org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c6c72178-8de3-4ce6-80ad-c1c0430cf597",
    "objectives" : {
      "NumberOfConcerns" : 0.9982940975776186,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5510442280988918,
      "MetricsIntensity" : 0.060433997129324145,
      "Density" : 0.9965177016831108
    },
    "euclideanDistance" : 40.028701460881244,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7917942437232086,
      "LackOfCohesion" : 0.5510442280988918,
      "MetricsIntensity" : 0.06043399712932415,
      "Density" : 3.274634456452638,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "f910f334-b249-4364-8a2a-2e127e5ec3b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9996588195155237,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5468864023534047,
      "MetricsIntensity" : 0.06016437357470663,
      "Density" : 0.9974850067711356
    },
    "euclideanDistance" : 40.028702184596185,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7931456548347622,
      "LackOfCohesion" : 0.5468864023534047,
      "MetricsIntensity" : 0.06016437357470663,
      "Density" : 3.2798982188295174,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP, org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.C64], extractedMethods=[org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.base642bytes(String, String), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.indexOf(char[], char), org.apache.dubbo.common.io.Bytes.decodeTable(String), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.base642bytes(String, char[]), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.base642bytes(String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2long(byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.lock, org.apache.dubbo.registry.support.RegistryManager.registries], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getRegistryLock(), org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry), org.apache.dubbo.registry.support.RegistryManager.getRegistry(String), org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy(), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries(), org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "7cabb050-48fb-4c15-827a-f99a688bacc4",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5460789911384204,
      "MetricsIntensity" : 0.06044163174499694,
      "Density" : 0.9969046237183208
    },
    "euclideanDistance" : 44.02607947892024,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7926605504587152,
      "LackOfCohesion" : 0.5460789911384204,
      "MetricsIntensity" : 0.060441631744996935,
      "Density" : 3.2738246505717927,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8e779541-7801-47b8-b2f8-9545e7e43fcc",
    "objectives" : {
      "NumberOfConcerns" : 0.9972705561241897,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5475505726483217,
      "MetricsIntensity" : 0.06047782978889106,
      "Density" : 0.9965177016831108
    },
    "euclideanDistance" : 48.023859333558185,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7910539215686283,
      "LackOfCohesion" : 0.5475505726483217,
      "MetricsIntensity" : 0.06047782978889107,
      "Density" : 3.278803309993635,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.unzip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.zip(byte[])', targetType='org.apache.dubbo.common.io.UnsafeByteArrayOutputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.EMPTY_PARAM], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String), org.apache.dubbo.common.url.component.URLParam.getParameters(), org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.clearParameters(), org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String), org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int), org.apache.dubbo.common.url.component.URLParam.addParameter(String, String), org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.getMethodParameters(), org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>), org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer), org.apache.dubbo.common.url.component.URLParam.parse(String), org.apache.dubbo.common.url.component.URLParam.getRawParam(), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[]), org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>), org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String), org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String), org.apache.dubbo.common.url.component.URLParam.equals(Object), org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int), org.apache.dubbo.common.url.component.URLParam.getTimestamp()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "ac9b46cf-4281-457d-bd35-5bc06ec5cd2b",
    "objectives" : {
      "NumberOfConcerns" : 0.9982940975776186,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5489253156056706,
      "MetricsIntensity" : 0.06039149122590002,
      "Density" : 0.9951634745598762
    },
    "euclideanDistance" : 49.02338123365912,
    "generation" : 0,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.790697674418605,
      "LackOfCohesion" : 0.5489253156056706,
      "MetricsIntensity" : 0.060391491225900026,
      "Density" : 3.2722646310432575,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "d783ed87-838b-4aa0-9886-c1ae23b16038",
    "objectives" : {
      "NumberOfConcerns" : 0.9989764585465711,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5478583886184228,
      "MetricsIntensity" : 0.060452500020557236,
      "Density" : 0.9969046237183208
    },
    "euclideanDistance" : 57.02013307694274,
    "generation" : 0,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7941176470588236,
      "LackOfCohesion" : 0.5478583886184228,
      "MetricsIntensity" : 0.060452500020557236,
      "Density" : 3.2800763844684906,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.BASE64, org.apache.dubbo.common.io.Bytes.MASK8, org.apache.dubbo.common.io.Bytes.MASK4], extractedMethods=[org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.getMD5(InputStream), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[]), org.apache.dubbo.common.io.Bytes.short2bytes(short, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[], int), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.long2bytes(long, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[]), org.apache.dubbo.common.io.Bytes.double2bytes(double, byte[], int), org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[]), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.int2bytes(int, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[], int), org.apache.dubbo.common.io.Bytes.float2bytes(float, byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2long(byte[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.unzip(byte[]), org.apache.dubbo.common.io.Bytes.zip(byte[]), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.FilterChainNode(TYPE, Invoker<T>, FILTER)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.toString()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "15935604-388c-4b6e-ac8d-ea803072abf7",
    "objectives" : {
      "NumberOfConcerns" : 1.0003411804844762,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.5477018919003467,
      "MetricsIntensity" : 0.060616393669858167,
      "Density" : 1.0
    },
    "euclideanDistance" : 61.018885061814636,
    "generation" : 0,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7943696450428397,
      "LackOfCohesion" : 0.5477018919003467,
      "MetricsIntensity" : 0.060616393669858167,
      "Density" : 3.283989834815756,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "a1f7e8b7-1749-47a0-909b-775ba0b411d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9945411122483794,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.5463524087478348,
      "MetricsIntensity" : 0.060900252474042814,
      "Density" : 0.9936157864190366
    },
    "euclideanDistance" : 66.01725982006728,
    "generation" : 0,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7861519607843135,
      "LackOfCohesion" : 0.5463524087478348,
      "MetricsIntensity" : 0.06090025247404282,
      "Density" : 3.2734225621414916,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.io.Bytes.MASK6, org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP, org.apache.dubbo.common.io.Bytes.MD, org.apache.dubbo.common.io.Bytes.BASE16, org.apache.dubbo.common.io.Bytes.C64], extractedMethods=[org.apache.dubbo.common.io.Bytes.hex2bytes(String), org.apache.dubbo.common.io.Bytes.bytes2int(byte[]), org.apache.dubbo.common.io.Bytes.long2bytes(long), org.apache.dubbo.common.io.Bytes.getMD5(File), org.apache.dubbo.common.io.Bytes.base642bytes(String, String), org.apache.dubbo.common.io.Bytes.getMD5(String), org.apache.dubbo.common.io.Bytes.copyOf(byte[], int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int), org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int), org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(byte[]), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int), org.apache.dubbo.common.io.Bytes.indexOf(char[], char), org.apache.dubbo.common.io.Bytes.decodeTable(String), org.apache.dubbo.common.io.Bytes.bytes2short(byte[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String), org.apache.dubbo.common.io.Bytes.base642bytes(String, char[]), org.apache.dubbo.common.io.Bytes.hex(char), org.apache.dubbo.common.io.Bytes.int2bytes(int), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[]), org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int), org.apache.dubbo.common.io.Bytes.double2bytes(double), org.apache.dubbo.common.io.Bytes.getMessageDigest(), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int), org.apache.dubbo.common.io.Bytes.bytes2float(byte[]), org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int), org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int), org.apache.dubbo.common.io.Bytes.short2bytes(short), org.apache.dubbo.common.io.Bytes.base642bytes(String), org.apache.dubbo.common.io.Bytes.bytes2hex(byte[]), org.apache.dubbo.common.io.Bytes.float2bytes(float), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[]), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[]), org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int), org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String), org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String), org.apache.dubbo.common.io.Bytes.bytes2long(byte[])]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "9b96a82a-4d15-4ebd-8322-cbe1ded7a536",
    "objectives" : {
      "NumberOfConcerns" : 0.9996588195155237,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5476459560383616,
      "MetricsIntensity" : 0.06035998289684895,
      "Density" : 0.9978719288063456
    },
    "euclideanDistance" : 72.01596090841554,
    "generation" : 0,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7931456548347622,
      "LackOfCohesion" : 0.5476459560383616,
      "MetricsIntensity" : 0.06035998289684894,
      "Density" : 3.277001270648032,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.CallbackRegistrationInvoker(Invoker<T>, List<FILTER>)', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getInterface()', targetType='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.invoke(Invocation)', targetType='org.apache.dubbo.rpc.Result'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.common.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.isAvailable()', targetType='org.apache.dubbo.common.Node'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.qos.textui.TTree.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.remoting.Codec2$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.serialize.support.SerializableClassRegistry'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.URLParam.timestamp, org.apache.dubbo.common.url.component.URLParam.value, org.apache.dubbo.common.url.component.URLParam.key, org.apache.dubbo.common.url.component.URLParam.urlParam], extractedMethods=[org.apache.dubbo.common.url.component.URLParam.getTimestamp(), org.apache.dubbo.common.url.component.URLParam.setTimestamp(long), org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "00dd6557-745c-4a56-893d-3b74c54cce9f",
    "objectives" : {
      "NumberOfConcerns" : 0.997611736608666,
      "NumberOfRefactorings" : 81.0,
      "LackOfCohesion" : 0.5476452276686707,
      "MetricsIntensity" : 0.060254289062910034,
      "Density" : 0.9938092474366416
    },
    "euclideanDistance" : 81.01411254758055,
    "generation" : 0,
    "numberOfRefactorings" : 81,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7927651747394235,
      "LackOfCohesion" : 0.5476452276686707,
      "MetricsIntensity" : 0.060254289062910034,
      "Density" : 3.265734265734265,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.transport.ExceedPayloadLimitException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.spring.boot.actuate.endpoint.DubboReferencesMetadataEndpoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.remoting.Transporters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.common.utils.CharSequenceComparator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "9137b7ff-4edb-4e26-8ec0-af3b808d6d16",
    "objectives" : {
      "NumberOfConcerns" : 0.9965881951552371,
      "NumberOfRefactorings" : 85.0,
      "LackOfCohesion" : 0.5447762143384965,
      "MetricsIntensity" : 0.06077182355878125,
      "Density" : 0.996324240665506
    },
    "euclideanDistance" : 85.01344790303183,
    "generation" : 0,
    "numberOfRefactorings" : 85,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7887323943661972,
      "LackOfCohesion" : 0.5447762143384965,
      "MetricsIntensity" : 0.06077182355878126,
      "Density" : 3.276081424936387,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.rpc.filter.EchoFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.rpc.model.ScopeModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "76564efa-d273-4572-8c81-4c24f8cbe4db",
    "objectives" : {
      "NumberOfConcerns" : 0.9965881951552371,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.5471611790849887,
      "MetricsIntensity" : 0.06057086075380403,
      "Density" : 0.9951634745598762
    },
    "euclideanDistance" : 91.01256282819912,
    "generation" : 0,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7876376988984088,
      "LackOfCohesion" : 0.5471611790849887,
      "MetricsIntensity" : 0.060570860753804044,
      "Density" : 3.268106734434562,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.RpcContextAttachment.asyncContext], extractedMethods=[org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean), org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String), org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.getAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.get(String), org.apache.dubbo.rpc.RpcContextAttachment.startAsync(), org.apache.dubbo.rpc.RpcContextAttachment.remove(String), org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext(), org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted(), org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext), org.apache.dubbo.rpc.RpcContextAttachment.stopAsync(), org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object), org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments(), org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.support.RegistryManager.applicationModel], extractedMethods=[org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel), org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.common.convert.multiple.StringToSetConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.ListDoubleMatch'"
      } ]
    } ]
  }, {
    "solutionId" : "e2a181fd-22b5-41ac-abc7-6c9478c2e87d",
    "objectives" : {
      "NumberOfConcerns" : 0.9955646537018082,
      "NumberOfRefactorings" : 107.0,
      "LackOfCohesion" : 0.5458569669568692,
      "MetricsIntensity" : 0.060545874141972114,
      "Density" : 0.9928419423486168
    },
    "euclideanDistance" : 107.01064671206055,
    "generation" : 0,
    "numberOfRefactorings" : 107,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7879901960784312,
      "LackOfCohesion" : 0.5458569669568692,
      "MetricsIntensity" : 0.060545874141972114,
      "Density" : 3.2646310432569976,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.common.logger.LoggerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='org.apache.dubbo.registry.client.migration.MigrationRuleHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.common.extension.inject.SpiExtensionInjector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.threadpool.ThreadlessExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.context.DubboSpringInitCustomizerHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.common.config.ConfigurationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.common.convert.multiple.StringToListConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.service.HealthStatusManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.spring.boot.context.event.WelcomeLogoApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.qos.command.impl.SelectTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.remoting.telnet.support.command.LogTelnetHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.WrapResponseUnpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.match.DubboAttachmentMatch'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.remoting.transport.AbstractChannel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl(), org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.originalInvoker, org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.filter], extractedMethods=[org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.common.BaseServiceMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.common.serialize.nativejava.NativeJavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.rpc.CancellationContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.config.AbstractMethodConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.gen.grpc.reactive.RxDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.nacos.NacosRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.remoting.http.tomcat.TomcatHttpServer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy(), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>), org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5dddba40-aeb0-4618-8c36-2b8a45b2241e",
    "objectives" : {
      "NumberOfConcerns" : 0.989423404981235,
      "NumberOfRefactorings" : 120.0,
      "LackOfCohesion" : 0.5452240287109541,
      "MetricsIntensity" : 0.06087682374772052,
      "Density" : 0.9887792609789128
    },
    "euclideanDistance" : 120.00940637437726,
    "generation" : 0,
    "numberOfRefactorings" : 120,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7802332719459788,
      "LackOfCohesion" : 0.5452240287109541,
      "MetricsIntensity" : 0.06087682374772053,
      "Density" : 3.265814696485623,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.io.Bytes",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.decodeTable(String)', targetType='org.apache.dubbo.metadata.MappingCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.DECODE_TABLE_MAP', targetTypeName='org.apache.dubbo.metadata.MappingCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[], int)', targetType='org.apache.dubbo.qos.textui.TLadder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex(char)', targetType='com.alibaba.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[], int)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[], int)', targetType='org.apache.dubbo.common.extension.support.ActivateComparator.ActivateInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(File)', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.AppStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, char[])', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.AppStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[], int)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[], int)', targetType='org.apache.dubbo.registry.multiple.MultipleServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String)', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[])', targetType='org.apache.dubbo.common.lang.ShutdownHookCallbacks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(InputStream, int)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(byte[])', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMD5(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2int(byte[])', targetType='com.alibaba.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2double(byte[])', targetType='com.alibaba.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2short(byte[])', targetType='com.alibaba.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2float(byte[])', targetType='com.alibaba.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2long(byte[])', targetType='com.alibaba.dubbo.remoting.RemotingException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.copyOf(byte[], int)', targetType='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2hex(byte[], int, int)', targetType='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int)', targetType='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.indexOf(char[], char)', targetType='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.hex2bytes(String, int, int)', targetType='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, String)', targetType='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MASK6', targetTypeName='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.BASE16', targetTypeName='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.C64', targetTypeName='org.apache.dubbo.config.SslConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.short2bytes(short)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.long2bytes(long)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.int2bytes(int)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.float2bytes(float)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.double2bytes(double)', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.getMessageDigest()', targetType='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.io.Bytes.MD', targetTypeName='org.apache.dubbo.config.spring.beans.factory.annotation.ServiceBeanNameBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, char[])', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[])', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.base642bytes(String, int, int, char[])', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], char[])', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.io.Bytes.bytes2base64(byte[], int, int)', targetType='org.apache.dubbo.rpc.protocol.tri.call.StubServerCall'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.RpcContextAttachment",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.copyOf(boolean)', targetType='org.apache.dubbo.config.nested.AggregationConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.clearAttachments()', targetType='org.apache.dubbo.common.utils.DubboAppender'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.isAsyncStarted()', targetType='org.apache.dubbo.rpc.RpcConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAsyncContext()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAttachments(Map<String,String>)', targetType='org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.get(String)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.set(String, Object)', targetType='org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance.WeightedRoundRobin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getAttachments()', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.getObjectAttachments()', targetType='org.apache.dubbo.rpc.cluster.router.file.FileStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.removeAttachment(String)', targetType='org.apache.dubbo.qos.textui.TTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.remove(String)', targetType='org.apache.dubbo.qos.textui.TTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.setAsyncContext(AsyncContext)', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.stopAsync()', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.RpcContextAttachment.startAsync()', targetType='org.apache.dubbo.rpc.RpcContext.RestoreContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.DefaultValueParameterProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.DefaultValueParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfigurator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.destroy()', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.CallbackRegistrationInvoker.getUrl()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.convert.StringToDoubleConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.threadpool.manager.Ring'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.remoting.zookeeper.AbstractZookeeperTransporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.ReflectionServerCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.protocol.tri.call.ReflectionServerCall'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.destroy()', targetType='org.apache.dubbo.remoting.zookeeper.curator5.Curator5ZookeeperClient.NodeCacheListenerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getOriginalInvoker()', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.getUrl()', targetType='org.apache.dubbo.qos.command.impl.OfflineInterface'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder.FilterChainNode.invoke(Invocation)', targetType='org.apache.dubbo.rpc.cluster.configurator.parser.model.ConfiguratorConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.URLParam",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameter(String, String)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String)', targetType='org.apache.dubbo.rpc.protocol.tri.command.EndStreamQueueCommand'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToOffset(int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.keyIndexToCompressIndex(BitSet, BitSet, int)', targetType='org.apache.dubbo.metadata.rest.RestMethodMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getParameters()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.clearParameters()', targetType='org.apache.dubbo.remoting.Transporter$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.setTimestamp(long)', targetType='org.apache.dubbo.config.spring.status.DataSourceStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getTimestamp()', targetType='org.apache.dubbo.config.spring.status.DataSourceStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getRawParam()', targetType='org.apache.dubbo.rpc.cluster.support.ClusterUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameters(Map<String,String>)', targetType='org.apache.dubbo.common.cache.FileCacheStore.Empty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameter(String, String)', targetType='org.apache.dubbo.common.cache.FileCacheStore.Empty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParametersIfAbsent(Map<String,String>)', targetType='org.apache.dubbo.common.cache.FileCacheStore.Empty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addParameterIfAbsent(String, String)', targetType='org.apache.dubbo.common.cache.FileCacheStore.Empty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.compressArray(Integer[])', targetType='org.apache.dubbo.common.cache.FileCacheStore.Empty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.hasMethodParameter(String)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameterStrict(String, String)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getMethodParameters()', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.initMethodParameters(Map<String,String>)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.getAnyMethodParameter(String)', targetType='org.apache.dubbo.common.utils.PojoUtils.PojoInvocationHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.addByMove(Integer[], int, Integer)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.equals(Object)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>, String)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(String, boolean, Map<String,String>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.parse(Map<String,String>)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.URLParam.replaceOffset(Integer[], int, Integer)', targetType='org.apache.dubbo.common.io.UnsafeByteArrayInputStream'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.support.RegistryManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistryLock()', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.removeDestroyedRegistry(Registry)', targetType='org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getInstance(ApplicationModel)', targetType='org.apache.dubbo.spring.boot.context.event.AwaitingNonWebApplicationListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getRegistry(String)', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.clearRegistryNotDestroy()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.getServiceDiscoveries()', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.registry.support.RegistryManager.putRegistry(String, Registry)', targetType='org.apache.dubbo.registry.support.AbstractRegistryFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.auth.DefaultAccessKeyStorage'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.remoting.Codec$Adaptive'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.stub.StubInvoker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBean(String, Class<T>)', targetType='org.apache.dubbo.remoting.api.PortUnificationServerHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getBeanInternal(String, Class<T>)', targetType='org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.PbArrayPacker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>registerBean(String, Class<T>)', targetType='org.apache.dubbo.rpc.protocol.tri.ReflectionPackableMethod.PbArrayPacker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.checkDestroyed()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.initInstantiationStrategy()', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport.MappingDataListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.beans.factory.ScopeBeanFactory.<T>getOrRegisterBean(Class<T>, Function<? super Class<T>,? extends T>)', targetType='org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport.MappingDataListener'"
      } ]
    } ]
  } ]
}