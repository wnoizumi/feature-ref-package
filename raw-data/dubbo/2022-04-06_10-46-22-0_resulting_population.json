{
  "executionId" : "b33588b4-b90e-4439-afdb-9324a5aad1c6",
  "computingTime" : 4348244,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 41,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2185897435897433,
    "meanNumConcerns" : 1.753836709637815,
    "meanMetricsIntensity" : 0.06120302141264511,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "a41d05da-526f-4cb7-8338-198b92413404",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5423385213464936,
      "MetricsIntensity" : 0.060814012278829044,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 9.127422179005626,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.5423385213464936,
      "MetricsIntensity" : 0.060814012278829044,
      "Density" : 3.2120051085568324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "a419fe15-82eb-479e-bcf7-ce1e7431c82e",
    "objectives" : {
      "NumberOfConcerns" : 1.0031501575078754,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.542329806269469,
      "MetricsIntensity" : 0.060867857416756065,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 10.114708394619466,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752905198776758,
      "LackOfCohesion" : 0.542329806269469,
      "MetricsIntensity" : 0.06086785741675606,
      "Density" : 3.2113665389527464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.initReferenceBean(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "cd8e18d6-46e2-47c8-8ba8-3b1fa7128090",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5421213298234198,
      "MetricsIntensity" : 0.06081401227882905,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 10.114820813950042,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.5421213298234198,
      "MetricsIntensity" : 0.060814012278829044,
      "Density" : 3.212005108556833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "33fc7b24-2ae2-42f7-aa8d-dbc3e45979df",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5440315133581131,
      "MetricsIntensity" : 0.06082618116677063,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 10.114829544336493,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5440315133581131,
      "MetricsIntensity" : 0.06082618116677064,
      "Density" : 3.2100893997445725
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "9d05dd0b-b843-4a44-8ad6-09752b3b0e82",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5422932724777154,
      "MetricsIntensity" : 0.060812971781185735,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 10.114830024715666,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620796,
      "LackOfCohesion" : 0.5422932724777154,
      "MetricsIntensity" : 0.060812971781185735,
      "Density" : 3.2120051085568324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "0437e793-4b3a-407f-b605-293b6d276537",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5422137771727298,
      "MetricsIntensity" : 0.06082722162404241,
      "Density" : 1.0021907986456882
    },
    "euclideanDistance" : 10.114830563926324,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5422137771727298,
      "MetricsIntensity" : 0.0608272216240424,
      "Density" : 3.213282247765006
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "7cc1f64b-8a1a-4c32-8b02-084cbbcf3704",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5456018738255325,
      "MetricsIntensity" : 0.060826181166770625,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 10.114988306748803,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620798,
      "LackOfCohesion" : 0.5456018738255325,
      "MetricsIntensity" : 0.060826181166770625,
      "Density" : 3.2113665389527464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "3eef620b-83b6-46ac-ad87-f215d4413b25",
    "objectives" : {
      "NumberOfConcerns" : 1.0045502275113756,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5455709576751091,
      "MetricsIntensity" : 0.06079279479348306,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 10.115040916849688,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.5455709576751091,
      "MetricsIntensity" : 0.060792794793483054,
      "Density" : 3.2120051085568333
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "0bc81658-8edc-40c9-9b46-aaab5dcf1655",
    "objectives" : {
      "NumberOfConcerns" : 1.0031501575078754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5439998140117079,
      "MetricsIntensity" : 0.06083423780493695,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 11.104374911660564,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752905198776758,
      "LackOfCohesion" : 0.5439998140117079,
      "MetricsIntensity" : 0.06083423780493694,
      "Density" : 3.210223642172525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "87f6a09e-dac1-4b88-861a-04b3c9cbb9f6",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5438011212012505,
      "MetricsIntensity" : 0.060812917638452264,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 11.104464224182909,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5438011212012505,
      "MetricsIntensity" : 0.06081291763845227,
      "Density" : 3.209450830140485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initWith(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b67703b9-0bea-4d41-a476-2d5205bc2646",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5423452388483092,
      "MetricsIntensity" : 0.06083527826220869,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 11.104482956673836,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5423452388483092,
      "MetricsIntensity" : 0.06083527826220869,
      "Density" : 3.21264367816092
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "44c154c6-d617-42ce-98f8-13b5a4933e2f",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5439863369581355,
      "MetricsIntensity" : 0.06079216177191286,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 11.104491137412392,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669728,
      "LackOfCohesion" : 0.5439863369581355,
      "MetricsIntensity" : 0.06079216177191285,
      "Density" : 3.210089399744572
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "9bf7c93d-a685-4f8d-9ba7-527089d52cd7",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5423081599141714,
      "MetricsIntensity" : 0.0608261811263991,
      "Density" : 1.0021907986456882
    },
    "euclideanDistance" : 11.10449906886896,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5423081599141714,
      "MetricsIntensity" : 0.0608261811263991,
      "Density" : 3.2132822477650054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "c159b608-746d-42fc-a8df-e930dc5716fb",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5423081599141715,
      "MetricsIntensity" : 0.06082618112639909,
      "Density" : 1.0021907986456882
    },
    "euclideanDistance" : 11.10449906886896,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5423081599141715,
      "MetricsIntensity" : 0.060826181126399086,
      "Density" : 3.2132822477650054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "8e4e281e-aafd-46ab-ae87-46105269294b",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5455566974255548,
      "MetricsIntensity" : 0.0607921617719128,
      "Density" : 1.001593308105955
    },
    "euclideanDistance" : 11.104635744303662,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.5455566974255548,
      "MetricsIntensity" : 0.06079216177191281,
      "Density" : 3.2113665389527464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "b63cf4d2-2dbb-4166-98a7-29ac6e38af13",
    "objectives" : {
      "NumberOfConcerns" : 1.0031501575078754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5451938722410601,
      "MetricsIntensity" : 0.06083423780493692,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 12.095802690991656,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752905198776758,
      "LackOfCohesion" : 0.5451938722410601,
      "MetricsIntensity" : 0.060834237804936915,
      "Density" : 3.208173690932311
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "e88e1438-7376-4312-a531-5ff7035f1fda",
    "objectives" : {
      "NumberOfConcerns" : 1.0031501575078754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5451576084970541,
      "MetricsIntensity" : 0.06080021841007915,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 12.095817362457678,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752905198776758,
      "LackOfCohesion" : 0.5451576084970541,
      "MetricsIntensity" : 0.06080021841007914,
      "Density" : 3.208812260536399
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "9cfd9cd3-56c0-40d1-85dc-58f9f406f57f",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5423000624483315,
      "MetricsIntensity" : 0.06080125886735088,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 12.095845923154291,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5423000624483315,
      "MetricsIntensity" : 0.06080125886735088,
      "Density" : 3.2126436781609207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "736a889c-87fc-4ac5-8334-7b628f6243a3",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5422999899795309,
      "MetricsIntensity" : 0.060834237764565424,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 12.095846085722702,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5422999899795309,
      "MetricsIntensity" : 0.060834237764565424,
      "Density" : 3.2126436781609207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "dbce8ad2-b479-470a-9387-f5dbf581d1c9",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5422999899795309,
      "MetricsIntensity" : 0.060834237764565424,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 12.095846085722702,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5422999899795309,
      "MetricsIntensity" : 0.06083423776456542,
      "Density" : 3.21264367816092
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "d150fe2d-9619-4077-8257-b4527b6afd4e",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.543978167023495,
      "MetricsIntensity" : 0.06080021841007915,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 12.09585530303241,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669726,
      "LackOfCohesion" : 0.543978167023495,
      "MetricsIntensity" : 0.06080021841007915,
      "Density" : 3.2100893997445716
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "8b976286-8d13-4cc6-9f19-96aeeec83b95",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.543978167023495,
      "MetricsIntensity" : 0.06080021841007915,
      "Density" : 1.0011949810794663
    },
    "euclideanDistance" : 12.09585530303241,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.543978167023495,
      "MetricsIntensity" : 0.06080021841007915,
      "Density" : 3.210089399744572
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "d6c0754f-d613-48ac-9ee9-b885e93b43ed",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.542233514617078,
      "MetricsIntensity" : 0.06078701143062221,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 12.095855425025164,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75474006116208,
      "LackOfCohesion" : 0.542233514617078,
      "MetricsIntensity" : 0.06078701143062221,
      "Density" : 3.2120051085568324
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "a0c5c341-c446-4ff9-b8b9-095c22805516",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5422335146170779,
      "MetricsIntensity" : 0.06078701143062223,
      "Density" : 1.0017924716191993
    },
    "euclideanDistance" : 12.095855425025164,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75474006116208,
      "LackOfCohesion" : 0.5422335146170779,
      "MetricsIntensity" : 0.060787011430622234,
      "Density" : 3.212005108556833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "14ba35d8-8a88-4188-9240-cafd19e08c88",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5422547564471433,
      "MetricsIntensity" : 0.06079216413766927,
      "Density" : 1.0021907986456882
    },
    "euclideanDistance" : 12.095860346168095,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5422547564471433,
      "MetricsIntensity" : 0.06079216413766927,
      "Density" : 3.2132822477650054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "958f0a2a-fd62-4292-b333-a2fbab5549a3",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5422058820825826,
      "MetricsIntensity" : 0.06077854883297069,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 12.09587064039723,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.5422058820825826,
      "MetricsIntensity" : 0.06077854883297069,
      "Density" : 3.21264367816092
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "48f863f0-e3b0-4990-8dc4-f75d7586255a",
    "objectives" : {
      "NumberOfConcerns" : 1.0031501575078754,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5422230571007379,
      "MetricsIntensity" : 0.06080451339922742,
      "Density" : 1.0013941445927106
    },
    "euclideanDistance" : 13.088422498675461,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752905198776758,
      "LackOfCohesion" : 0.5422230571007379,
      "MetricsIntensity" : 0.06080451339922742,
      "Density" : 3.210727969348659
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.initReferenceBean(ReferenceBean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "428910c8-a50b-497e-a040-6f7a8de01121",
    "objectives" : {
      "NumberOfConcerns" : 1.0031501575078754,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5449264736188604,
      "MetricsIntensity" : 0.06077889824359446,
      "Density" : 1.0003983270264887
    },
    "euclideanDistance" : 13.088458503099126,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752905198776758,
      "LackOfCohesion" : 0.5449264736188604,
      "MetricsIntensity" : 0.06077889824359447,
      "Density" : 3.2075351213282253
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='org.apache.dubbo.rpc.cluster.router.mock.MockStateRouterFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initWith(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "496ff475-b5f3-4db6-80ca-60c1a2f3ef2f",
    "objectives" : {
      "NumberOfConcerns" : 1.0035001750087504,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5434493494358539,
      "MetricsIntensity" : 0.06078868254370778,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 13.088469646500133,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7535168195718658,
      "LackOfCohesion" : 0.5434493494358539,
      "MetricsIntensity" : 0.06078868254370778,
      "Density" : 3.2094508301404856
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "b1575ef3-618b-4dd6-8baa-b0e17e899337",
    "objectives" : {
      "NumberOfConcerns" : 1.0035001750087504,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.543449349435854,
      "MetricsIntensity" : 0.06078868254370776,
      "Density" : 1.000995817566222
    },
    "euclideanDistance" : 13.088469646500133,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7535168195718653,
      "LackOfCohesion" : 0.543449349435854,
      "MetricsIntensity" : 0.06078868254370776,
      "Density" : 3.209450830140485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.common.convert.multiple.StringToBlockingDequeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "ea960202-76f9-44fc-94ed-e202ca64d781",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5422465865125026,
      "MetricsIntensity" : 0.060800220775835565,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 13.088522852992535,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5422465865125026,
      "MetricsIntensity" : 0.06080022077583556,
      "Density" : 3.2126436781609202
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "aadbf26b-a9a5-49ab-905f-3836ae2395c9",
    "objectives" : {
      "NumberOfConcerns" : 1.0042002100105005,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5421995276889734,
      "MetricsIntensity" : 0.06078660547113698,
      "Density" : 1.0019916351324438
    },
    "euclideanDistance" : 13.088547690171412,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.5421995276889734,
      "MetricsIntensity" : 0.060786605471136984,
      "Density" : 3.2126436781609193
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "55c00929-affc-4bcb-bbfe-788bec382aa1",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5422207695190387,
      "MetricsIntensity" : 0.060791758178184,
      "Density" : 1.0023899621589325
    },
    "euclideanDistance" : 13.088552244079512,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5422207695190387,
      "MetricsIntensity" : 0.060791758178184,
      "Density" : 3.213920817369093
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "417b59ed-811d-4830-af05-989dee00e18b",
    "objectives" : {
      "NumberOfConcerns" : 1.0038501925096255,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.542212599584398,
      "MetricsIntensity" : 0.06079981481635033,
      "Density" : 1.0021907986456882
    },
    "euclideanDistance" : 14.08225098223013,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.542212599584398,
      "MetricsIntensity" : 0.060799814816350335,
      "Density" : 3.2132822477650054
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.common.convert.StringToFloatConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker.ChannelWrapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader, org.apache.dubbo.config.AbstractInterfaceConfig.filter, org.apache.dubbo.config.AbstractInterfaceConfig.methods, org.apache.dubbo.config.AbstractInterfaceConfig.callbacks, org.apache.dubbo.config.AbstractInterfaceConfig.module, org.apache.dubbo.config.AbstractInterfaceConfig.group, org.apache.dubbo.config.AbstractInterfaceConfig.onconnect, org.apache.dubbo.config.AbstractInterfaceConfig.configCenter, org.apache.dubbo.config.AbstractInterfaceConfig.cluster, org.apache.dubbo.config.AbstractInterfaceConfig.metadataReportConfig, org.apache.dubbo.config.AbstractInterfaceConfig.stub, org.apache.dubbo.config.AbstractInterfaceConfig.auth, org.apache.dubbo.config.AbstractInterfaceConfig.proxy, org.apache.dubbo.config.AbstractInterfaceConfig.layer, org.apache.dubbo.config.AbstractInterfaceConfig.owner, org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata, org.apache.dubbo.config.AbstractInterfaceConfig.registryIds, org.apache.dubbo.config.AbstractInterfaceConfig.version, org.apache.dubbo.config.AbstractInterfaceConfig.monitor, org.apache.dubbo.config.AbstractInterfaceConfig.tag, org.apache.dubbo.config.AbstractInterfaceConfig.application, org.apache.dubbo.config.AbstractInterfaceConfig.listener, org.apache.dubbo.config.AbstractInterfaceConfig.urls, org.apache.dubbo.config.AbstractInterfaceConfig.registries], extractedMethods=[org.apache.dubbo.config.AbstractInterfaceConfig.getStub(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String), org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String), org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String), org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String), org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String), org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment(), org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig), org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrl(), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistryIds(String), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(), org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String), org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int), org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String), org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel), org.apache.dubbo.config.AbstractInterfaceConfig.getOwner(), org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(), org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String), org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.getAuth(), org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean), org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCluster(), org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String), org.apache.dubbo.config.AbstractInterfaceConfig.getLayer(), org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistryIds(), org.apache.dubbo.config.AbstractInterfaceConfig.getMethods(), org.apache.dubbo.config.AbstractInterfaceConfig.getProxy(), org.apache.dubbo.config.AbstractInterfaceConfig.getModule(), org.apache.dubbo.config.AbstractInterfaceConfig.getOnconnect(), org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>), org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig), org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String), org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getFilter(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry(), org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>), org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig(), org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries(), org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor(), org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty(), org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String), org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter(), org.apache.dubbo.config.AbstractInterfaceConfig.toUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader(), org.apache.dubbo.config.AbstractInterfaceConfig.getListener(), org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader), org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer), org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls(), org.apache.dubbo.config.AbstractInterfaceConfig.getApplication(), org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>), org.apache.dubbo.config.AbstractInterfaceConfig.getTag(), org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String), org.apache.dubbo.config.AbstractInterfaceConfig.getScope(), org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig), org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.filter.CacheFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.url], extractedMethods=[org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService(), org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.CHANNEL_KEY], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.removeChannelIfDisconnected(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.constants.CommonConstants'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "8e0f04d1-b339-4a69-a916-e8195921e7ea",
    "objectives" : {
      "NumberOfConcerns" : 1.0017500875043752,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.5480474720627948,
      "MetricsIntensity" : 0.0599828045343705,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 77.01499237907547,
    "generation" : 1,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7515299877600983,
      "LackOfCohesion" : 0.5480474720627948,
      "MetricsIntensity" : 0.059982804534370514,
      "Density" : 3.219090326713645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "921e8281-4978-45e6-87f4-8820dab355c8",
    "objectives" : {
      "NumberOfConcerns" : 1.0017500875043752,
      "NumberOfRefactorings" : 77.0,
      "LackOfCohesion" : 0.5484433869799028,
      "MetricsIntensity" : 0.05998257877143289,
      "Density" : 1.0007966540529776
    },
    "euclideanDistance" : 77.01499519729295,
    "generation" : 1,
    "numberOfRefactorings" : 77,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7515299877600983,
      "LackOfCohesion" : 0.5484433869799028,
      "MetricsIntensity" : 0.05998257877143289,
      "Density" : 3.219090326713645
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "3dd1db04-e7cd-46e9-83ca-e337cf6f6568",
    "objectives" : {
      "NumberOfConcerns" : 1.0014000700035002,
      "NumberOfRefactorings" : 78.0,
      "LackOfCohesion" : 0.5480407592161098,
      "MetricsIntensity" : 0.059984497882517855,
      "Density" : 1.000597490539733
    },
    "euclideanDistance" : 78.01479311164022,
    "generation" : 1,
    "numberOfRefactorings" : 78,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7509179926560587,
      "LackOfCohesion" : 0.5480407592161098,
      "MetricsIntensity" : 0.05998449788251786,
      "Density" : 3.2184497117232547
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.LazyConnectExchangeClient(URL, ExchangeHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "1db622ff-eec3-4c62-b769-2051dcee9417",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 79.0,
      "LackOfCohesion" : 0.5479275991136908,
      "MetricsIntensity" : 0.059966473207074135,
      "Density" : 1.0
    },
    "euclideanDistance" : 79.01459309418352,
    "generation" : 1,
    "numberOfRefactorings" : 79,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7503059975520203,
      "LackOfCohesion" : 0.5479275991136908,
      "MetricsIntensity" : 0.05996647320707413,
      "Density" : 3.2165278667520827
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "9523d700-b465-4c6a-8dbc-4435db5c247a",
    "objectives" : {
      "NumberOfConcerns" : 1.0010500525026251,
      "NumberOfRefactorings" : 79.0,
      "LackOfCohesion" : 0.5489489417166663,
      "MetricsIntensity" : 0.059966473207074114,
      "Density" : 1.0
    },
    "euclideanDistance" : 79.0146001832961,
    "generation" : 1,
    "numberOfRefactorings" : 79,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7503059975520199,
      "LackOfCohesion" : 0.5489489417166663,
      "MetricsIntensity" : 0.05996647320707412,
      "Density" : 3.2165278667520827
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "0b8b9408-17f1-4664-acf7-31493720a7b7",
    "objectives" : {
      "NumberOfConcerns" : 1.00070003500175,
      "NumberOfRefactorings" : 83.0,
      "LackOfCohesion" : 0.5489721071705298,
      "MetricsIntensity" : 0.05993782185575029,
      "Density" : 0.9998008364867557
    },
    "euclideanDistance" : 83.01389019428997,
    "generation" : 1,
    "numberOfRefactorings" : 83,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7496940024479801,
      "LackOfCohesion" : 0.5489721071705298,
      "MetricsIntensity" : 0.05993782185575028,
      "Density" : 3.21588725176169
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.rpc.FutureContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "1ec506dd-bce3-4293-87c8-5da52e0083a1",
    "objectives" : {
      "NumberOfConcerns" : 1.00070003500175,
      "NumberOfRefactorings" : 83.0,
      "LackOfCohesion" : 0.5489280811466587,
      "MetricsIntensity" : 0.05996388064029029,
      "Density" : 1.0
    },
    "euclideanDistance" : 83.01389232089593,
    "generation" : 1,
    "numberOfRefactorings" : 83,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7496940024479801,
      "LackOfCohesion" : 0.5489280811466587,
      "MetricsIntensity" : 0.05996388064029028,
      "Density" : 3.2165278667520827
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.config.bootstrap.builders.AbstractBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='com.alibaba.dubbo.config.ProtocolConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.appendMetricsCompatible(Map<String,String>)', targetType='org.apache.dubbo.metadata.rest.jaxrs.FormParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.cluster.support.FailfastCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.serialize.java.CompactedObjectInputStream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.netty4.NettyClientHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOwner(String)', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.config.spring.context.properties.DefaultDubboConfigBinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistry(RegistryConfig)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.cluster.configurator.override.OverrideConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.Environment'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ServiceBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.common.url.component.param.DynamicParamTable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.rpc.protocol.rest.ViolationReport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMetadataReportConfig()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.remoting.api.MultiplexProtocolConnectionManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStore.logger, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath, org.apache.dubbo.common.cache.FileCacheStore.cacheFilePath], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath(), org.apache.dubbo.common.cache.FileCacheStore.destroy(), org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File), org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long), org.apache.dubbo.common.cache.FileCacheStore.newBuilder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.virtualservice.DubboRoute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getUrl()', targetType='org.apache.dubbo.rpc.FutureContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.command.CommandContext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.command.CommandContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.closed, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.channel, org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.logger], extractedMethods=[org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected(), org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext)', targetType='org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.connectLock, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.url, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.client, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.requestHandler, org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.logger], extractedMethods=[org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl(), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object), org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.auth.filter.ConsumerSignFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  } ]
}