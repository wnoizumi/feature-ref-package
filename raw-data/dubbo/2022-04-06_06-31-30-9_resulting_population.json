{
  "executionId" : "92bca01f-eff0-4cf2-b4b9-570dc499b07a",
  "computingTime" : 795295,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.216355441081779,
    "meanNumConcerns" : 1.7593615715162678,
    "meanMetricsIntensity" : 0.06120302141264513,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "b463bffb-78b3-4a18-a1d7-93bb61503682",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5463909365282698,
      "MetricsIntensity" : 0.06080883490878867,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 10.114901566755714,
    "generation" : 22,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7582417582417578,
      "LackOfCohesion" : 0.5463909365282698,
      "MetricsIntensity" : 0.060808834908788675,
      "Density" : 3.2006410256410254
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "89ef0730-6447-47e9-9e8f-be5c98fe745a",
    "objectives" : {
      "NumberOfConcerns" : 1.0062805303558968,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5450866940374461,
      "MetricsIntensity" : 0.06074727371409785,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 10.115028951097186,
    "generation" : 42,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7596095179987792,
      "LackOfCohesion" : 0.5450866940374461,
      "MetricsIntensity" : 0.06074727371409785,
      "Density" : 3.198463508322663
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "aef996d0-5c63-4257-b9b2-439e3a5dd800",
    "objectives" : {
      "NumberOfConcerns" : 1.0062805303558968,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5443768856458551,
      "MetricsIntensity" : 0.06077030178047058,
      "Density" : 1.0006006006006005
    },
    "euclideanDistance" : 10.115030464160728,
    "generation" : 36,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7596095179987798,
      "LackOfCohesion" : 0.5443768856458551,
      "MetricsIntensity" : 0.06077030178047059,
      "Density" : 3.1997439180537777
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ab3cabcb-6175-4fa6-bc46-70a12ba2269f",
    "objectives" : {
      "NumberOfConcerns" : 1.0052337752965805,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5456266123764262,
      "MetricsIntensity" : 0.06077362358389661,
      "Density" : 1.0038038038038037
    },
    "euclideanDistance" : 10.115311110044262,
    "generation" : 47,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75777913361806,
      "LackOfCohesion" : 0.5456266123764262,
      "MetricsIntensity" : 0.060773623583896604,
      "Density" : 3.2120435618193457
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "77198103-088d-4068-8bd8-7403468e60b7",
    "objectives" : {
      "NumberOfConcerns" : 1.0062805303558968,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5441814204386619,
      "MetricsIntensity" : 0.060776310496300605,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 10.115416852292064,
    "generation" : 39,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75960951799878,
      "LackOfCohesion" : 0.5441814204386619,
      "MetricsIntensity" : 0.060776310496300605,
      "Density" : 3.2125480153649173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "36aae0e5-f0a9-41f8-943d-cc3a78eca123",
    "objectives" : {
      "NumberOfConcerns" : 1.0045359385903698,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5457746934610771,
      "MetricsIntensity" : 0.06085952761353349,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 12.096193059934587,
    "generation" : 44,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7587049480757484,
      "LackOfCohesion" : 0.5457746934610771,
      "MetricsIntensity" : 0.060859527613533505,
      "Density" : 3.215522771007055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "edbd341a-a0c3-466a-8c9c-81b15e669ec1",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5452058715932049,
      "MetricsIntensity" : 0.06081823565360526,
      "Density" : 1.0038038038038037
    },
    "euclideanDistance" : 12.096212793781904,
    "generation" : 42,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758241758241758,
      "LackOfCohesion" : 0.5452058715932049,
      "MetricsIntensity" : 0.060818235653605265,
      "Density" : 3.2141025641025642
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "556743bb-be7e-47fa-ae48-a263d66818ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0059316120027912,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5444699126295465,
      "MetricsIntensity" : 0.0607978785832406,
      "Density" : 1.0042042042042043
    },
    "euclideanDistance" : 12.096299779666795,
    "generation" : 41,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.76007326007326,
      "LackOfCohesion" : 0.5444699126295465,
      "MetricsIntensity" : 0.06079787858324061,
      "Density" : 3.2133247918001278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5de1615f-c5d7-4d72-bf5a-b4197cd4ec50",
    "objectives" : {
      "NumberOfConcerns" : 1.0059316120027912,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5437595488323281,
      "MetricsIntensity" : 0.060820924668444624,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 12.096301188852863,
    "generation" : 35,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7600732600732607,
      "LackOfCohesion" : 0.5437595488323281,
      "MetricsIntensity" : 0.06082092466844463,
      "Density" : 3.21460602178091
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "adee927e-336a-4f55-9851-fb95bb74c383",
    "objectives" : {
      "NumberOfConcerns" : 1.0045359385903698,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5444828908130818,
      "MetricsIntensity" : 0.060714704447721105,
      "Density" : 0.9997997997997998
    },
    "euclideanDistance" : 13.088500295500769,
    "generation" : 37,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7587049480757497,
      "LackOfCohesion" : 0.5444828908130818,
      "MetricsIntensity" : 0.060714704447721105,
      "Density" : 3.2012820512820523
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e0c9374-de4a-4813-91bd-caf23e168d7e",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5439150797454035,
      "MetricsIntensity" : 0.06067352580795391,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.088518574171133,
    "generation" : 44,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7582417582417575,
      "LackOfCohesion" : 0.5439150797454035,
      "MetricsIntensity" : 0.0606735258079539,
      "Density" : 3.1998718770019203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "fdaf193f-47bb-4d84-9b01-19bb54b72b17",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5432047159481853,
      "MetricsIntensity" : 0.060696571893157907,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 13.088519777809235,
    "generation" : 33,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7582417582417575,
      "LackOfCohesion" : 0.5432047159481853,
      "MetricsIntensity" : 0.0606965718931579,
      "Density" : 3.2011531069827046
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "67a19835-f023-4ed1-9f01-5590d4780365",
    "objectives" : {
      "NumberOfConcerns" : 1.0055826936496859,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5437442398914653,
      "MetricsIntensity" : 0.06065758948681782,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 13.08858029489164,
    "generation" : 15,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.759462759462759,
      "LackOfCohesion" : 0.5437442398914653,
      "MetricsIntensity" : 0.06065758948681782,
      "Density" : 3.200512491992312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6c71720a-d814-4b48-8d26-08e4666a4496",
    "objectives" : {
      "NumberOfConcerns" : 1.0055826936496859,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.5437442398914651,
      "MetricsIntensity" : 0.060657589486817834,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 13.08858029489164,
    "generation" : 22,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7594627594627592,
      "LackOfCohesion" : 0.5437442398914651,
      "MetricsIntensity" : 0.06065758948681784,
      "Density" : 3.200512491992312
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "55a0f2d2-2be5-47ad-8c9b-3ca10feb59a7",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5464256307941847,
      "MetricsIntensity" : 0.06082216834969487,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 14.082239560428038,
    "generation" : 39,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7570207570207568,
      "LackOfCohesion" : 0.5464256307941847,
      "MetricsIntensity" : 0.06082216834969487,
      "Density" : 3.2020525978191143
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "08296ad9-07bf-4ace-aa81-e94fb68fe922",
    "objectives" : {
      "NumberOfConcerns" : 1.0055826936496859,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5443985681333192,
      "MetricsIntensity" : 0.06078911545051535,
      "Density" : 0.9997997997997998
    },
    "euclideanDistance" : 14.082288923005036,
    "generation" : 37,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7594627594627588,
      "LackOfCohesion" : 0.5443985681333192,
      "MetricsIntensity" : 0.06078911545051535,
      "Density" : 3.1992312620115317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters(), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "850421c6-8711-4843-9ed4-5573d9e8b4b7",
    "objectives" : {
      "NumberOfConcerns" : 1.0045359385903698,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5425859777983144,
      "MetricsIntensity" : 0.06074717668637913,
      "Density" : 1.0044044044044045
    },
    "euclideanDistance" : 15.07700270021483,
    "generation" : 29,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758704948075748,
      "LackOfCohesion" : 0.5425859777983144,
      "MetricsIntensity" : 0.06074717668637913,
      "Density" : 3.2160256410256407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "074efaf3-d71d-4659-87d0-97162a49de03",
    "objectives" : {
      "NumberOfConcerns" : 1.0052337752965805,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.542415004162188,
      "MetricsIntensity" : 0.06073122788574335,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 15.077056333163002,
    "generation" : 41,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.759926695174099,
      "LackOfCohesion" : 0.542415004162188,
      "MetricsIntensity" : 0.06073122788574335,
      "Density" : 3.216666666666666
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "c6a89fa1-9961-46f1-8a9b-aeadb0d9e5f6",
    "objectives" : {
      "NumberOfConcerns" : 1.0038381018841591,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5459920984944553,
      "MetricsIntensity" : 0.060824278824924895,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 16.071972407232014,
    "generation" : 39,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756410256410257,
      "LackOfCohesion" : 0.5459920984944553,
      "MetricsIntensity" : 0.060824278824924895,
      "Density" : 3.2
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "fe169222-ec1c-4449-898e-684a59a197c1",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5452282202266634,
      "MetricsIntensity" : 0.06083710159267366,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 16.072192804987992,
    "generation" : 45,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7580940745265734,
      "LackOfCohesion" : 0.5452282202266634,
      "MetricsIntensity" : 0.06083710159267366,
      "Density" : 3.213598460551635
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "43ff4277-78ee-4877-a99e-c8fe015030f3",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5462073070495247,
      "MetricsIntensity" : 0.06088793082137176,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 17.067663563474053,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7562614538790473,
      "LackOfCohesion" : 0.5462073070495247,
      "MetricsIntensity" : 0.06088793082137177,
      "Density" : 3.1988454137267466
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "97231f07-5b38-4a69-b98d-d94b64d9e614",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5439364175786681,
      "MetricsIntensity" : 0.06069227842686126,
      "Density" : 0.9991991991991992
    },
    "euclideanDistance" : 17.06769876082661,
    "generation" : 46,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758094074526572,
      "LackOfCohesion" : 0.5439364175786681,
      "MetricsIntensity" : 0.06069227842686126,
      "Density" : 3.1993589743589745
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "0c0d8309-4826-4a09-aab2-f4970384cc51",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5435696726034658,
      "MetricsIntensity" : 0.06068234775273024,
      "Density" : 1.0034034034034034
    },
    "euclideanDistance" : 17.067974756894237,
    "generation" : 39,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5435696726034658,
      "MetricsIntensity" : 0.06068234775273024,
      "Density" : 3.212820512820512
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "19f61b26-15c3-4d7d-ac4c-09fbd0bf8e99",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5428587525307602,
      "MetricsIntensity" : 0.06070541188498609,
      "Density" : 1.0038038038038037
    },
    "euclideanDistance" : 17.067975756500143,
    "generation" : 48,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5428587525307602,
      "MetricsIntensity" : 0.0607054118849861,
      "Density" : 3.214102564102567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "43ed6326-9494-443e-8437-3a106a29de7a",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5462531632641356,
      "MetricsIntensity" : 0.06084705549490468,
      "Density" : 1.0026026026026027
    },
    "euclideanDistance" : 18.064171650057688,
    "generation" : 45,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7568723274282219,
      "LackOfCohesion" : 0.5462531632641356,
      "MetricsIntensity" : 0.060847055494904684,
      "Density" : 3.214377406931964
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "25230dae-90ac-49ae-920b-5e33da4e2b28",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5453755431030387,
      "MetricsIntensity" : 0.060874983623574276,
      "Density" : 1.0034034034034034
    },
    "euclideanDistance" : 18.06418969060255,
    "generation" : 42,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756872327428222,
      "LackOfCohesion" : 0.5453755431030387,
      "MetricsIntensity" : 0.06087498362357427,
      "Density" : 3.2148813341885822
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "77cb08e6-9310-4692-a43f-3f19cf3d5289",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5440837404550435,
      "MetricsIntensity" : 0.06073016045776187,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 19.060585121396464,
    "generation" : 45,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756872327428222,
      "LackOfCohesion" : 0.5440837404550435,
      "MetricsIntensity" : 0.06073016045776187,
      "Density" : 3.2006410256410254
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8239d2b4-4588-44b7-9444-1535f1db217b",
    "objectives" : {
      "NumberOfConcerns" : 1.0041870202372645,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.543912766818917,
      "MetricsIntensity" : 0.06071421165712609,
      "Density" : 0.9997997997997998
    },
    "euclideanDistance" : 19.060627443101094,
    "generation" : 43,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758094074526573,
      "LackOfCohesion" : 0.543912766818917,
      "MetricsIntensity" : 0.06071421165712609,
      "Density" : 3.201282051282052
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ee2c81b2-4509-40cc-8f4e-7308579f4e37",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5463890398612278,
      "MetricsIntensity" : 0.06089051618457059,
      "Density" : 1.0024024024024023
    },
    "euclideanDistance" : 20.057732915248685,
    "generation" : 46,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7567237163814182,
      "LackOfCohesion" : 0.5463890398612278,
      "MetricsIntensity" : 0.06089051618457058,
      "Density" : 3.2137355584082146
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6dd3d54b-c566-4103-85e2-8957e9684a33",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5460462571449352,
      "MetricsIntensity" : 0.060907292830005,
      "Density" : 0.997997997997998
    },
    "euclideanDistance" : 21.054756399437878,
    "generation" : 48,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7550397067806964,
      "LackOfCohesion" : 0.5460462571449352,
      "MetricsIntensity" : 0.060907292830005,
      "Density" : 3.1996148908857505
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "4ce7a7a4-8626-426f-9644-a4f2ce1e29de",
    "objectives" : {
      "NumberOfConcerns" : 1.0038381018841591,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.542697351890543,
      "MetricsIntensity" : 0.060914029242255134,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 21.05500277992544,
    "generation" : 42,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.758557457212714,
      "LackOfCohesion" : 0.542697351890543,
      "MetricsIntensity" : 0.060914029242255134,
      "Density" : 3.215522771007056
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "f64fb33a-d0df-41ee-860d-2aa9ea48e45c",
    "objectives" : {
      "NumberOfConcerns" : 1.0048848569434752,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5419595207715896,
      "MetricsIntensity" : 0.060856695779816894,
      "Density" : 1.004004004004004
    },
    "euclideanDistance" : 21.05505263055276,
    "generation" : 49,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7593158216249236,
      "LackOfCohesion" : 0.5419595207715896,
      "MetricsIntensity" : 0.060856695779816894,
      "Density" : 3.2147435897435894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "bdd511a8-6ab7-45ce-9752-11bfca60b601",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5429395920588349,
      "MetricsIntensity" : 0.06078724275757315,
      "Density" : 0.9987987987987988
    },
    "euclideanDistance" : 22.052280337222562,
    "generation" : 44,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7579462102689485,
      "LackOfCohesion" : 0.5429395920588349,
      "MetricsIntensity" : 0.060787242757573155,
      "Density" : 3.200128287363695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "621e38a4-83d7-485a-ad16-c90249224be9",
    "objectives" : {
      "NumberOfConcerns" : 1.0034891835310538,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5428184129505869,
      "MetricsIntensity" : 0.06078294671146637,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 23.04999211061551,
    "generation" : 44,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.757946210268949,
      "LackOfCohesion" : 0.5428184129505869,
      "MetricsIntensity" : 0.06078294671146636,
      "Density" : 3.1988454137267475
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "ce98a485-78a7-4cbb-8260-6556a2e3a3b5",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5455040066603639,
      "MetricsIntensity" : 0.06094778353494352,
      "Density" : 0.9975975975975976
    },
    "euclideanDistance" : 24.04788310066719,
    "generation" : 34,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7555012224938877,
      "LackOfCohesion" : 0.5455040066603639,
      "MetricsIntensity" : 0.060947783534943525,
      "Density" : 3.2003853564547207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "25e3eb9a-3c54-4507-932b-1eba2e630fe3",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.546448605643756,
      "MetricsIntensity" : 0.06088188638168627,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 24.047966702611067,
    "generation" : 41,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7567237163814182,
      "LackOfCohesion" : 0.546448605643756,
      "MetricsIntensity" : 0.06088188638168627,
      "Density" : 3.202954399486192
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8292ea94-edef-4e16-8b47-7dba96d34fd7",
    "objectives" : {
      "NumberOfConcerns" : 1.0038381018841591,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5425598354033387,
      "MetricsIntensity" : 0.06074329391588672,
      "Density" : 1.0032032032032032
    },
    "euclideanDistance" : 24.048121933416343,
    "generation" : 46,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.757483200977398,
      "LackOfCohesion" : 0.5425598354033387,
      "MetricsIntensity" : 0.06074329391588672,
      "Density" : 3.212179487179487
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5974f214-ddc4-41fd-857e-33c3aa681439",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5426268343706853,
      "MetricsIntensity" : 0.06081490855513916,
      "Density" : 1.0046046046046047
    },
    "euclideanDistance" : 24.04815300886319,
    "generation" : 43,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.757334963325182,
      "LackOfCohesion" : 0.5426268343706853,
      "MetricsIntensity" : 0.060814908555139165,
      "Density" : 3.2187299550994224
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ec855a20-dbe6-4e6c-a438-e4176f61efe1",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5460692819023634,
      "MetricsIntensity" : 0.060926243348317526,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 25.045953727997567,
    "generation" : 46,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7548899755501222,
      "LackOfCohesion" : 0.5460692819023634,
      "MetricsIntensity" : 0.060926243348317526,
      "Density" : 3.1991008349389842
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "64955be7-f416-49cb-a6b9-ce00bd770d2b",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5462652066672534,
      "MetricsIntensity" : 0.06092022050541267,
      "Density" : 0.9973973973973974
    },
    "euclideanDistance" : 25.045965957509967,
    "generation" : 37,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7548899755501222,
      "LackOfCohesion" : 0.5462652066672534,
      "MetricsIntensity" : 0.06092022050541267,
      "Density" : 3.199743095696853
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "c572b1a9-6a37-4e4a-a5bd-767ad36da080",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5437270512906515,
      "MetricsIntensity" : 0.060793295400948126,
      "Density" : 0.9985985985985986
    },
    "euclideanDistance" : 26.044220566463384,
    "generation" : 40,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7561124694376526,
      "LackOfCohesion" : 0.5437270512906515,
      "MetricsIntensity" : 0.060793295400948126,
      "Density" : 3.199486850545222
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "f5fd7274-f933-4e43-9f30-bacbde99b525",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5424816735315982,
      "MetricsIntensity" : 0.06080252450650634,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 26.04439073445102,
    "generation" : 49,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7584097859327223,
      "LackOfCohesion" : 0.5424816735315982,
      "MetricsIntensity" : 0.06080252450650634,
      "Density" : 3.2156611039794605
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d5f390fb-927a-45a0-a80d-18325dd0ddd5",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5439783324894251,
      "MetricsIntensity" : 0.06075996727190691,
      "Density" : 1.0034034034034034
    },
    "euclideanDistance" : 26.04442383841634,
    "generation" : 40,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.756723716381418,
      "LackOfCohesion" : 0.5439783324894251,
      "MetricsIntensity" : 0.06075996727190691,
      "Density" : 3.2148813341885822
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "69ce8d3c-939c-4b0c-8c11-54c65d038b64",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5462051208486596,
      "MetricsIntensity" : 0.0609698002329191,
      "Density" : 0.996996996996997
    },
    "euclideanDistance" : 27.04252493700279,
    "generation" : 35,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620796,
      "LackOfCohesion" : 0.5462051208486596,
      "MetricsIntensity" : 0.060969800232919105,
      "Density" : 3.1984585741811173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "4761bb2f-a9ff-4745-ba12-608de7df188e",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5462051208486596,
      "MetricsIntensity" : 0.0609698002329191,
      "Density" : 0.996996996996997
    },
    "euclideanDistance" : 27.04252493700279,
    "generation" : 36,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620794,
      "LackOfCohesion" : 0.5462051208486596,
      "MetricsIntensity" : 0.0609698002329191,
      "Density" : 3.1984585741811173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b56f3c01-11c6-4df8-947b-e0eb77e50149",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5432789940759775,
      "MetricsIntensity" : 0.06086002925417417,
      "Density" : 0.9981981981981982
    },
    "euclideanDistance" : 28.041006560859763,
    "generation" : 43,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.5432789940759775,
      "MetricsIntensity" : 0.06086002925417417,
      "Density" : 3.200256739409499
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "e3488e36-7d35-460f-8a4d-8f05a66015f5",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5426471952865316,
      "MetricsIntensity" : 0.06083380147834846,
      "Density" : 1.0038038038038037
    },
    "euclideanDistance" : 28.041231778024407,
    "generation" : 44,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7571865443425079,
      "LackOfCohesion" : 0.5426471952865316,
      "MetricsIntensity" : 0.06083380147834846,
      "Density" : 3.2182284980744558
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "0922f0b7-07c4-4ce1-ba17-bdbb3c897ede",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5450834170622499,
      "MetricsIntensity" : 0.061032121854358974,
      "Density" : 0.995995995995996
    },
    "euclideanDistance" : 29.039529008506367,
    "generation" : 40,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669726,
      "LackOfCohesion" : 0.5450834170622499,
      "MetricsIntensity" : 0.06103212185435898,
      "Density" : 3.1993569131832795
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b93c6332-a1f7-47ab-aa9c-3b999d9f6a5e",
    "objectives" : {
      "NumberOfConcerns" : 1.0024424284717377,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5418222030059898,
      "MetricsIntensity" : 0.06094752989013213,
      "Density" : 1.002002002002002
    },
    "euclideanDistance" : 29.039734584453182,
    "generation" : 42,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7561124694376526,
      "LackOfCohesion" : 0.5418222030059898,
      "MetricsIntensity" : 0.06094752989013213,
      "Density" : 3.2103912764592684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b92f6ac0-5aca-406a-8d1e-fca409272eca",
    "objectives" : {
      "NumberOfConcerns" : 1.0031402651779484,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5416510953779855,
      "MetricsIntensity" : 0.06093155088925701,
      "Density" : 1.0022022022022021
    },
    "euclideanDistance" : 29.039762364880644,
    "generation" : 47,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7573349633251831,
      "LackOfCohesion" : 0.5416510953779855,
      "MetricsIntensity" : 0.06093155088925701,
      "Density" : 3.2110327132777416
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "8832e7b8-76f2-451b-b7e5-1447110ee1d5",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5421560076941676,
      "MetricsIntensity" : 0.06080682392206101,
      "Density" : 1.001001001001001
    },
    "euclideanDistance" : 30.038395830932554,
    "generation" : 47,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7577981651376144,
      "LackOfCohesion" : 0.5421560076941676,
      "MetricsIntensity" : 0.06080682392206101,
      "Density" : 3.2092426187419774
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "327cbbe1-c2a8-4b9e-b553-6a90b079c185",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5457239399380668,
      "MetricsIntensity" : 0.06100023779121105,
      "Density" : 0.9955955955955956
    },
    "euclideanDistance" : 31.036968991769342,
    "generation" : 24,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7535168195718656,
      "LackOfCohesion" : 0.5457239399380668,
      "MetricsIntensity" : 0.06100023779121105,
      "Density" : 3.1980707395498396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "883e26d7-5e6d-48ec-b376-0e57d75fdb45",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5425441672119994,
      "MetricsIntensity" : 0.06083836175114347,
      "Density" : 0.9975975975975976
    },
    "euclideanDistance" : 31.037010966604015,
    "generation" : 47,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7542787286063568,
      "LackOfCohesion" : 0.5425441672119994,
      "MetricsIntensity" : 0.060838361751143454,
      "Density" : 3.1962796664528548
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "6d25f4d8-6a5e-4212-8574-cac2d794edbc",
    "objectives" : {
      "NumberOfConcerns" : 1.002791346824843,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.542049814909934,
      "MetricsIntensity" : 0.06093614332981804,
      "Density" : 1.0036036036036036
    },
    "euclideanDistance" : 31.03724120945418,
    "generation" : 38,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7567237163814182,
      "LackOfCohesion" : 0.542049814909934,
      "MetricsIntensity" : 0.06093614332981804,
      "Density" : 3.215522771007055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "68a04f39-181c-4a2f-87b7-fc8dad9c197a",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5452422240504687,
      "MetricsIntensity" : 0.06098687297750273,
      "Density" : 0.9965965965965966
    },
    "euclideanDistance" : 32.03584881688481,
    "generation" : 39,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7541284403669724,
      "LackOfCohesion" : 0.5452422240504687,
      "MetricsIntensity" : 0.06098687297750273,
      "Density" : 3.1971740526653827
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "eb6307bc-b0d6-4175-a898-252672a341dc",
    "objectives" : {
      "NumberOfConcerns" : 1.0020935101186323,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5452601149697488,
      "MetricsIntensity" : 0.060815643588549996,
      "Density" : 0.998998998998999
    },
    "euclideanDistance" : 32.03596724836797,
    "generation" : 48,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7565749235474004,
      "LackOfCohesion" : 0.5452601149697488,
      "MetricsIntensity" : 0.06081564358855,
      "Density" : 3.2028241335044934
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a9f3b7c7-7f14-4b46-9cdc-dc245503a1b3",
    "objectives" : {
      "NumberOfConcerns" : 1.0017445917655268,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5419487770163489,
      "MetricsIntensity" : 0.060867155747098736,
      "Density" : 0.9977977977977978
    },
    "euclideanDistance" : 33.034777219772195,
    "generation" : 42,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7559633027522945,
      "LackOfCohesion" : 0.5419487770163489,
      "MetricsIntensity" : 0.06086715574709874,
      "Density" : 3.198973042362004
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b653118a-6293-4166-8bf1-96962f0a7b8e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5436146452952999,
      "MetricsIntensity" : 0.06091206820851538,
      "Density" : 0.9953953953953953
    },
    "euclideanDistance" : 34.03366038432844,
    "generation" : 29,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7539779681762546,
      "LackOfCohesion" : 0.5436146452952999,
      "MetricsIntensity" : 0.060912068208515385,
      "Density" : 3.1974276527331194
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "9749e538-1525-4628-9340-42de423a1525",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5458203193840708,
      "MetricsIntensity" : 0.06082554840025382,
      "Density" : 1.003003003003003
    },
    "euclideanDistance" : 35.03299056442589,
    "generation" : 46,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.5458203193840708,
      "MetricsIntensity" : 0.060825548400253816,
      "Density" : 3.2156611039794614
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "35690f57-448a-43ff-aa9e-8f112af4c068",
    "objectives" : {
      "NumberOfConcerns" : 0.9996510816468946,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5482465337835359,
      "MetricsIntensity" : 0.061029565243952644,
      "Density" : 0.9965965965965966
    },
    "euclideanDistance" : 36.03188596134021,
    "generation" : 36,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7533659730722155,
      "LackOfCohesion" : 0.5482465337835359,
      "MetricsIntensity" : 0.06102956524395265,
      "Density" : 3.199228791773779
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b94c3568-9955-477e-adbc-e8c004c19483",
    "objectives" : {
      "NumberOfConcerns" : 0.9996510816468946,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5477301719838148,
      "MetricsIntensity" : 0.061046651389434714,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 36.03189475409367,
    "generation" : 40,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7533659730722155,
      "LackOfCohesion" : 0.5477301719838148,
      "MetricsIntensity" : 0.061046651389434714,
      "Density" : 3.201156812339332
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "c7a39c68-d327-47e0-90bd-cf6906f5d36e",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5425656262453843,
      "MetricsIntensity" : 0.061025776999978874,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 36.03195667195881,
    "generation" : 47,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7552019583843328,
      "LackOfCohesion" : 0.5425656262453843,
      "MetricsIntensity" : 0.06102577699997888,
      "Density" : 3.214010282776349
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "2f21a74b-74ec-4d11-b1bf-aae6dfb6280d",
    "objectives" : {
      "NumberOfConcerns" : 1.0006978367062107,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5424442569030575,
      "MetricsIntensity" : 0.06102142988726768,
      "Density" : 1.0008008008008007
    },
    "euclideanDistance" : 37.03108110479661,
    "generation" : 48,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7552019583843328,
      "LackOfCohesion" : 0.5424442569030575,
      "MetricsIntensity" : 0.06102142988726768,
      "Density" : 3.212724935732648
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b49c644c-4089-49ae-baa8-f621c047578f",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.544200145526797,
      "MetricsIntensity" : 0.060899962140198154,
      "Density" : 1.0016016016016016
    },
    "euclideanDistance" : 37.03110946720488,
    "generation" : 34,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7539779681762546,
      "LackOfCohesion" : 0.544200145526797,
      "MetricsIntensity" : 0.06089996214019815,
      "Density" : 3.2152956298200515
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "a42be41a-5c00-4ac1-8d69-2169e97be8a7",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5467348651346162,
      "MetricsIntensity" : 0.06089888227112393,
      "Density" : 1.0032032032032032
    },
    "euclideanDistance" : 37.03119957970553,
    "generation" : 45,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7545899632802937,
      "LackOfCohesion" : 0.5467348651346162,
      "MetricsIntensity" : 0.06089888227112392,
      "Density" : 3.2183686576750166
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ff0e54f5-cd02-41d4-a5dc-d252feec6a11",
    "objectives" : {
      "NumberOfConcerns" : 0.9993021632937893,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5454245539210337,
      "MetricsIntensity" : 0.061038179244905254,
      "Density" : 0.994994994994995
    },
    "euclideanDistance" : 38.03011745257927,
    "generation" : 34,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7516819571865447,
      "LackOfCohesion" : 0.5454245539210337,
      "MetricsIntensity" : 0.061038179244905254,
      "Density" : 3.1961414790996776
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "68854315-31a5-4b23-b5a7-0a5d2f638a8b",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5414925791420001,
      "MetricsIntensity" : 0.060992820453555134,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 39.0295033465381,
    "generation" : 43,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.5414925791420001,
      "MetricsIntensity" : 0.060992820453555134,
      "Density" : 3.2098844672657263
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "68657710-c972-4e9b-aaa6-d04c8a9c8b86",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5448061011899409,
      "MetricsIntensity" : 0.06108917133932853,
      "Density" : 0.9945945945945946
    },
    "euclideanDistance" : 40.028585680335034,
    "generation" : 42,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752141982864137,
      "LackOfCohesion" : 0.5448061011899409,
      "MetricsIntensity" : 0.06108917133932852,
      "Density" : 3.196911196911197
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "db2e5b8e-7541-4f07-9d6b-167d11ac298b",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5477649751799211,
      "MetricsIntensity" : 0.06106002669357765,
      "Density" : 0.9951951951951952
    },
    "euclideanDistance" : 40.028640944416416,
    "generation" : 42,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.752141982864137,
      "LackOfCohesion" : 0.5477649751799211,
      "MetricsIntensity" : 0.06106002669357766,
      "Density" : 3.198841698841699
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "d2d40a35-5d65-4713-90ed-b9196d407473",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5482813369796422,
      "MetricsIntensity" : 0.061042940548095566,
      "Density" : 0.9963963963963964
    },
    "euclideanDistance" : 40.02867787011458,
    "generation" : 43,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7521419828641371,
      "LackOfCohesion" : 0.5482813369796422,
      "MetricsIntensity" : 0.06104294054809558,
      "Density" : 3.200643086816721
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "3fb568b7-3f66-4245-b92e-a39167ea03bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9996510816468946,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5431580893378476,
      "MetricsIntensity" : 0.061037871443066036,
      "Density" : 0.9985985985985986
    },
    "euclideanDistance" : 40.02868031521805,
    "generation" : 30,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.753365973072216,
      "LackOfCohesion" : 0.5431580893378476,
      "MetricsIntensity" : 0.061037871443066036,
      "Density" : 3.2077170418006435
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "a4c45e80-5663-4124-b623-23102a5e1919",
    "objectives" : {
      "NumberOfConcerns" : 1.0013956734124214,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5413713049913141,
      "MetricsIntensity" : 0.06098847675034415,
      "Density" : 1.0008008008008007
    },
    "euclideanDistance" : 40.02875463990576,
    "generation" : 41,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7553516819571864,
      "LackOfCohesion" : 0.5413713049913141,
      "MetricsIntensity" : 0.06098847675034415,
      "Density" : 3.2086007702182298
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "4d840a52-f0f9-4a66-8a11-81db2346f29b",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.544684731847614,
      "MetricsIntensity" : 0.06108486854903635,
      "Density" : 0.9961961961961961
    },
    "euclideanDistance" : 41.027926187722024,
    "generation" : 35,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7521419828641371,
      "LackOfCohesion" : 0.544684731847614,
      "MetricsIntensity" : 0.06108486854903635,
      "Density" : 3.2
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "17811415-b97d-4fe3-b262-88a9d412c68c",
    "objectives" : {
      "NumberOfConcerns" : 1.001046755059316,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5418916113951501,
      "MetricsIntensity" : 0.060997416496030334,
      "Density" : 1.0026026026026027
    },
    "euclideanDistance" : 41.028096151148425,
    "generation" : 44,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7547400611620796,
      "LackOfCohesion" : 0.5418916113951501,
      "MetricsIntensity" : 0.060997416496030334,
      "Density" : 3.2143774069319635
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d22ae5a8-569e-4841-9b9e-40d12a00e752",
    "objectives" : {
      "NumberOfConcerns" : 0.9986043265875785,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5454471268309666,
      "MetricsIntensity" : 0.061057262249443425,
      "Density" : 0.9941941941941942
    },
    "euclideanDistance" : 42.02721586370301,
    "generation" : 39,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.751529987760098,
      "LackOfCohesion" : 0.5454471268309666,
      "MetricsIntensity" : 0.061057262249443425,
      "Density" : 3.1956241956241946
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "1a6a492f-3118-4601-b281-956da52d2d44",
    "objectives" : {
      "NumberOfConcerns" : 0.9986043265875785,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5456556269162577,
      "MetricsIntensity" : 0.06097183481655334,
      "Density" : 0.994994994994995
    },
    "euclideanDistance" : 43.02660436600791,
    "generation" : 40,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7526025719534597,
      "LackOfCohesion" : 0.5456556269162577,
      "MetricsIntensity" : 0.06097183481655334,
      "Density" : 3.198198198198198
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN, org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.isRelease270OrHigher(String), org.apache.dubbo.common.Version.getResources(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>), org.apache.dubbo.common.Version.isRelease263OrHigher(String), org.apache.dubbo.common.Version.getPrefixDigits(String), org.apache.dubbo.common.Version.checkDuplicate(String, boolean), org.apache.dubbo.common.Version.getFromFile(String), org.apache.dubbo.common.Version.parseInt(String), org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "0d4dd6a9-c217-439a-84e5-55ba815eeaf9",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5422806559889006,
      "MetricsIntensity" : 0.060998908845460796,
      "Density" : 0.9967967967967968
    },
    "euclideanDistance" : 43.02664396614375,
    "generation" : 45,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7535168195718656,
      "LackOfCohesion" : 0.5422806559889006,
      "MetricsIntensity" : 0.06099890884546081,
      "Density" : 3.19576379974326
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "3e2d2495-9524-4c50-9f72-dfe482d4e9c5",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5446566951421719,
      "MetricsIntensity" : 0.06109231047637814,
      "Density" : 0.9941941941941942
    },
    "euclideanDistance" : 44.02597770484273,
    "generation" : 42,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7532149418248624,
      "LackOfCohesion" : 0.5446566951421719,
      "MetricsIntensity" : 0.06109231047637814,
      "Density" : 3.195624195624196
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "f144aaf2-afa7-405d-a200-8622f8f1b819",
    "objectives" : {
      "NumberOfConcerns" : 0.9986043265875785,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5427693503998718,
      "MetricsIntensity" : 0.06099065914986663,
      "Density" : 0.9963963963963964
    },
    "euclideanDistance" : 44.02599612510849,
    "generation" : 42,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7526025719534597,
      "LackOfCohesion" : 0.5427693503998718,
      "MetricsIntensity" : 0.060990659149866636,
      "Density" : 3.2006430868167213
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "9687110b-eb95-4392-a23b-3d169476cdc1",
    "objectives" : {
      "NumberOfConcerns" : 0.9982554082344731,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5435323442795192,
      "MetricsIntensity" : 0.06096303116425674,
      "Density" : 0.9943943943943944
    },
    "euclideanDistance" : 45.025375933712304,
    "generation" : 48,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7519902020820577,
      "LackOfCohesion" : 0.5435323442795192,
      "MetricsIntensity" : 0.06096303116425674,
      "Density" : 3.196267696267696
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "383c4cda-4138-4b08-bbcc-ddb7359c60d3",
    "objectives" : {
      "NumberOfConcerns" : 1.0003489183531054,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5419114111947799,
      "MetricsIntensity" : 0.06101646750469023,
      "Density" : 1.0018018018018018
    },
    "euclideanDistance" : 45.025567134633995,
    "generation" : 43,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7545899632802942,
      "LackOfCohesion" : 0.5419114111947799,
      "MetricsIntensity" : 0.06101646750469024,
      "Density" : 3.213872832369941
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "c7ce0ab4-0383-479f-81dc-735ee35c1e05",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5415383661777003,
      "MetricsIntensity" : 0.06104549197699026,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 46.024969215799096,
    "generation" : 47,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7539779681762546,
      "LackOfCohesion" : 0.5415383661777003,
      "MetricsIntensity" : 0.06104549197699027,
      "Density" : 3.209377007064868
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "cd653b6b-f66d-4b5d-98f3-a6a0238216c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9986043265875785,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.542753036905434,
      "MetricsIntensity" : 0.06096316892017838,
      "Density" : 1.0014014014014014
    },
    "euclideanDistance" : 46.024974880328216,
    "generation" : 45,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7515299877600983,
      "LackOfCohesion" : 0.542753036905434,
      "MetricsIntensity" : 0.060963168920178376,
      "Density" : 3.212588310854206
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "31c1d4c3-7680-41c4-b4b0-735d60f718eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9979064898813678,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5429114315522757,
      "MetricsIntensity" : 0.06101404435624937,
      "Density" : 0.993993993993994
    },
    "euclideanDistance" : 47.02427369942849,
    "generation" : 37,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921569,
      "LackOfCohesion" : 0.5429114315522757,
      "MetricsIntensity" : 0.061014044356249374,
      "Density" : 3.19703799098519
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "7dabea43-ad30-4ff2-b764-433157bafc30",
    "objectives" : {
      "NumberOfConcerns" : 0.9996510816468946,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5421146038216045,
      "MetricsIntensity" : 0.06106684965817224,
      "Density" : 0.9985985985985986
    },
    "euclideanDistance" : 47.02439918648578,
    "generation" : 48,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7544396815676664,
      "LackOfCohesion" : 0.5421146038216045,
      "MetricsIntensity" : 0.061066849658172245,
      "Density" : 3.2077170418006435
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "edc3b340-a654-49d5-9caa-67bbf1799ea1",
    "objectives" : {
      "NumberOfConcerns" : 0.9996510816468946,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5419931391380818,
      "MetricsIntensity" : 0.061062499130604256,
      "Density" : 0.9981981981981982
    },
    "euclideanDistance" : 48.023881424970185,
    "generation" : 32,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7544396815676662,
      "LackOfCohesion" : 0.5419931391380818,
      "MetricsIntensity" : 0.06106249913060425,
      "Density" : 3.2064308681672022
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.OK, org.apache.dubbo.rpc.TriRpcStatus.INTERNAL, org.apache.dubbo.rpc.TriRpcStatus.NOT_FOUND, org.apache.dubbo.rpc.TriRpcStatus.UNAVAILABLE, org.apache.dubbo.rpc.TriRpcStatus.CANCELLED, org.apache.dubbo.rpc.TriRpcStatus.UNIMPLEMENTED, org.apache.dubbo.rpc.TriRpcStatus.UNKNOWN, org.apache.dubbo.rpc.TriRpcStatus.DEADLINE_EXCEEDED], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String), org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.fromCode(Code), org.apache.dubbo.rpc.TriRpcStatus.fromCode(int), org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.httpStatusToGrpcCode(int), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "46fd73c8-c6af-450c-a455-8fe9392dfdfc",
    "objectives" : {
      "NumberOfConcerns" : 0.9979064898813678,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.543475192037253,
      "MetricsIntensity" : 0.06099801377663826,
      "Density" : 0.9947947947947948
    },
    "euclideanDistance" : 49.02330588697934,
    "generation" : 50,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7524509803921569,
      "LackOfCohesion" : 0.543475192037253,
      "MetricsIntensity" : 0.06099801377663826,
      "Density" : 3.197554697554698
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "9e617b89-0967-41ae-9053-2ca756e61645",
    "objectives" : {
      "NumberOfConcerns" : 0.9975575715282624,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5485231502911321,
      "MetricsIntensity" : 0.06110502733588263,
      "Density" : 0.9965965965965966
    },
    "euclideanDistance" : 49.02339173655401,
    "generation" : 23,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7507654623392532,
      "LackOfCohesion" : 0.5485231502911321,
      "MetricsIntensity" : 0.06110502733588263,
      "Density" : 3.203346203346203
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "d1452b6f-9dd8-4a4a-86ba-ed06d9d08e38",
    "objectives" : {
      "NumberOfConcerns" : 0.9975575715282624,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5455521570248851,
      "MetricsIntensity" : 0.06100379884319397,
      "Density" : 0.9947947947947948
    },
    "euclideanDistance" : 50.02285564031478,
    "generation" : 45,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7507654623392532,
      "LackOfCohesion" : 0.5455521570248851,
      "MetricsIntensity" : 0.06100379884319398,
      "Density" : 3.197554697554698
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "f352466b-f857-408e-9307-858073c01d16",
    "objectives" : {
      "NumberOfConcerns" : 0.9975575715282624,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5453434669451045,
      "MetricsIntensity" : 0.06101553027200561,
      "Density" : 0.9957957957957958
    },
    "euclideanDistance" : 50.022873295796515,
    "generation" : 41,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7518382352941178,
      "LackOfCohesion" : 0.5453434669451045,
      "MetricsIntensity" : 0.061015530272005604,
      "Density" : 3.19871382636656
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "98e853d0-58cd-4829-b951-517a7d315aa6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979064898813678,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5430754296763819,
      "MetricsIntensity" : 0.06108896427309476,
      "Density" : 0.9933933933933934
    },
    "euclideanDistance" : 51.02236088795244,
    "generation" : 35,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.751377832210655,
      "LackOfCohesion" : 0.5430754296763819,
      "MetricsIntensity" : 0.06108896427309475,
      "Density" : 3.1930501930501927
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "2430f08c-d6cc-4e43-ad5f-830bf8257534",
    "objectives" : {
      "NumberOfConcerns" : 0.9972086531751571,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5472931614617718,
      "MetricsIntensity" : 0.061123179950637326,
      "Density" : 0.9933933933933934
    },
    "euclideanDistance" : 51.022392352571195,
    "generation" : 20,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7501530924678503,
      "LackOfCohesion" : 0.5472931614617718,
      "MetricsIntensity" : 0.06112317995063733,
      "Density" : 3.1951062459755315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "5176215e-9a44-4575-89fe-ac1fbbf000bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9972086531751571,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5474895479503814,
      "MetricsIntensity" : 0.061117142914072844,
      "Density" : 0.9937937937937938
    },
    "euclideanDistance" : 51.0224022495298,
    "generation" : 39,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7501530924678503,
      "LackOfCohesion" : 0.5474895479503814,
      "MetricsIntensity" : 0.061117142914072844,
      "Density" : 3.1963940759819702
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "5a79fe5e-b047-49fc-9d77-ed89df5bfc02",
    "objectives" : {
      "NumberOfConcerns" : 0.9989532449406838,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5420790278936485,
      "MetricsIntensity" : 0.06107354950744085,
      "Density" : 1.0014014014014014
    },
    "euclideanDistance" : 51.02252729925516,
    "generation" : 39,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7532149418248626,
      "LackOfCohesion" : 0.5420790278936485,
      "MetricsIntensity" : 0.061073549507440844,
      "Density" : 3.214652956298199
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d3431d69-eb5d-4ec8-a458-d6b48f736d95",
    "objectives" : {
      "NumberOfConcerns" : 0.9972086531751571,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5466092806649275,
      "MetricsIntensity" : 0.06101075972082272,
      "Density" : 0.9967967967967968
    },
    "euclideanDistance" : 52.022019693304706,
    "generation" : 42,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960786,
      "LackOfCohesion" : 0.5466092806649275,
      "MetricsIntensity" : 0.06101075972082272,
      "Density" : 3.203989703989704
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION], extractedMethods=[org.apache.dubbo.common.Version.getProtocolVersion(), org.apache.dubbo.common.Version.compare(String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "da9eb389-f225-4f6e-b7fd-ab0286289b56",
    "objectives" : {
      "NumberOfConcerns" : 0.9982554082344731,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.5451972844382764,
      "MetricsIntensity" : 0.06095651202172932,
      "Density" : 1.0016016016016016
    },
    "euclideanDistance" : 52.02211717532954,
    "generation" : 46,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7519902020820575,
      "LackOfCohesion" : 0.5451972844382764,
      "MetricsIntensity" : 0.06095651202172932,
      "Density" : 3.2152956298200515
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "43606fcf-f591-407f-936d-8cc18df22e2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9968597348220516,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5468717462323129,
      "MetricsIntensity" : 0.061168277263101485,
      "Density" : 0.9933933933933934
    },
    "euclideanDistance" : 53.02153685088652,
    "generation" : 38,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7506127450980395,
      "LackOfCohesion" : 0.5468717462323129,
      "MetricsIntensity" : 0.06116827726310149,
      "Density" : 3.1971649484536084
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "46c31d3f-4e21-4bb6-91c1-fa4127d3b509",
    "objectives" : {
      "NumberOfConcerns" : 0.9975575715282624,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5424541577395444,
      "MetricsIntensity" : 0.061140045394627925,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 53.02157596655357,
    "generation" : 38,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7518382352941178,
      "LackOfCohesion" : 0.5424541577395444,
      "MetricsIntensity" : 0.061140045394627925,
      "Density" : 3.2073406310367027
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "35486385-1a0a-4fe5-9dd7-b95d34e75c09",
    "objectives" : {
      "NumberOfConcerns" : 0.9975575715282624,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5442220592211024,
      "MetricsIntensity" : 0.06102996326743297,
      "Density" : 1.0006006006006005
    },
    "euclideanDistance" : 55.02087081259797,
    "generation" : 39,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7518382352941178,
      "LackOfCohesion" : 0.5442220592211024,
      "MetricsIntensity" : 0.061029963267432964,
      "Density" : 3.214147909967844
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.applicationModel, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.reporters, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.gson, org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger], extractedMethods=[org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter(), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String), org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b2bc1dc3-16af-497d-a136-23d57153d8e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9965108164689462,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5449550715127292,
      "MetricsIntensity" : 0.06107398524388119,
      "Density" : 0.9935935935935936
    },
    "euclideanDistance" : 56.02036208467606,
    "generation" : 40,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7510729613733902,
      "LackOfCohesion" : 0.5449550715127292,
      "MetricsIntensity" : 0.0610739852438812,
      "Density" : 3.197809278350514
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "7fc285f4-642b-477a-ae5e-92398c0b7def",
    "objectives" : {
      "NumberOfConcerns" : 0.9965108164689462,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5429527049119134,
      "MetricsIntensity" : 0.06108225264280141,
      "Density" : 0.9983983983983984
    },
    "euclideanDistance" : 56.02042807628859,
    "generation" : 39,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7510729613733906,
      "LackOfCohesion" : 0.5429527049119134,
      "MetricsIntensity" : 0.061082252642801406,
      "Density" : 3.2112041210560207
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "0926c09d-aab0-4a15-91b0-6493c880e261",
    "objectives" : {
      "NumberOfConcerns" : 0.9972086531751571,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.5458031934083687,
      "MetricsIntensity" : 0.06101147133515272,
      "Density" : 1.0012012012012013
    },
    "euclideanDistance" : 56.02051813816812,
    "generation" : 46,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7512254901960784,
      "LackOfCohesion" : 0.5458031934083687,
      "MetricsIntensity" : 0.06101147133515272,
      "Density" : 3.2181467181467176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX, org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE, org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS, org.apache.dubbo.common.cache.FileCacheStoreFactory.logger], extractedMethods=[org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String), org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9231c65d-c13e-4b29-917b-1de5fbbe2999",
    "objectives" : {
      "NumberOfConcerns" : 0.9965108164689462,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5448334156967382,
      "MetricsIntensity" : 0.061069672297514345,
      "Density" : 0.9933933933933934
    },
    "euclideanDistance" : 57.020000326176,
    "generation" : 40,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7510729613733902,
      "LackOfCohesion" : 0.5448334156967382,
      "MetricsIntensity" : 0.061069672297514345,
      "Density" : 3.1971649484536084
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "33b3d17c-4d29-4af7-b991-94276a514d74",
    "objectives" : {
      "NumberOfConcerns" : 0.9965108164689462,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5455192755543428,
      "MetricsIntensity" : 0.06105794205169761,
      "Density" : 0.9943943943943944
    },
    "euclideanDistance" : 58.019679190523206,
    "generation" : 38,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7510729613733904,
      "LackOfCohesion" : 0.5455192755543428,
      "MetricsIntensity" : 0.06105794205169761,
      "Density" : 3.19832582099163
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "43b2c6f7-d75a-4398-b917-896af689276c",
    "objectives" : {
      "NumberOfConcerns" : 0.9961618981158409,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5468923544675439,
      "MetricsIntensity" : 0.06121733789149355,
      "Density" : 1.0004004004004003
    },
    "euclideanDistance" : 58.019789540278516,
    "generation" : 35,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7493872549019605,
      "LackOfCohesion" : 0.5468923544675439,
      "MetricsIntensity" : 0.06121733789149355,
      "Density" : 3.217643271088216
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "c1a3cd1f-2cd3-43ec-9cf3-b1a5790f05e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9961618981158409,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.545583349301904,
      "MetricsIntensity" : 0.06107769319142089,
      "Density" : 0.995995995995996
    },
    "euclideanDistance" : 59.01936748413133,
    "generation" : 39,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7504598405885954,
      "LackOfCohesion" : 0.545583349301904,
      "MetricsIntensity" : 0.06107769319142089,
      "Density" : 3.2014157014157014
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "e2cf6df1-7f85-4f21-afdc-852b46336134",
    "objectives" : {
      "NumberOfConcerns" : 0.9965108164689462,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5450119947398115,
      "MetricsIntensity" : 0.06103603494427768,
      "Density" : 0.9961961961961961
    },
    "euclideanDistance" : 59.019371431256594,
    "generation" : 45,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5450119947398115,
      "MetricsIntensity" : 0.061036034944277694,
      "Density" : 3.2
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "c74d1d49-5366-43ed-ae1e-f2f6ada6edb4",
    "objectives" : {
      "NumberOfConcerns" : 0.9965108164689462,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5451175919309889,
      "MetricsIntensity" : 0.0611489169366929,
      "Density" : 0.992992992992993
    },
    "euclideanDistance" : 60.01899666997564,
    "generation" : 7,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.75,
      "LackOfCohesion" : 0.5451175919309889,
      "MetricsIntensity" : 0.0611489169366929,
      "Density" : 3.1938184159690928
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "809156ee-9906-467a-939f-4d635edebc2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9958129797627355,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5475343880105209,
      "MetricsIntensity" : 0.06118537863008343,
      "Density" : 0.9955955955955956
    },
    "euclideanDistance" : 60.01905023938021,
    "generation" : 40,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7487745098039214,
      "LackOfCohesion" : 0.5475343880105209,
      "MetricsIntensity" : 0.061185378630083435,
      "Density" : 3.202189311010946
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "1c84d903-6370-493b-ba27-553da54b46e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9961618981158409,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.5443917576520118,
      "MetricsIntensity" : 0.061087145710599165,
      "Density" : 1.0002002002002002
    },
    "euclideanDistance" : 61.018790818836365,
    "generation" : 40,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.750459840588596,
      "LackOfCohesion" : 0.5443917576520118,
      "MetricsIntensity" : 0.061087145710599165,
      "Density" : 3.214929214929215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "387840a4-6f8c-4e52-83c4-de27303a873d",
    "objectives" : {
      "NumberOfConcerns" : 0.9961618981158409,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.5424950713243489,
      "MetricsIntensity" : 0.06120834393112963,
      "Density" : 0.9975975975975976
    },
    "euclideanDistance" : 62.01842941302019,
    "generation" : 48,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7504598405885956,
      "LackOfCohesion" : 0.5424950713243489,
      "MetricsIntensity" : 0.06120834393112962,
      "Density" : 3.208628461043143
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED, org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket], extractedMethods=[org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString(), org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "0a989da9-75e8-4f45-a05e-157a8ff5b697",
    "objectives" : {
      "NumberOfConcerns" : 0.9954640614096302,
      "NumberOfRefactorings" : 62.0,
      "LackOfCohesion" : 0.5469161354964981,
      "MetricsIntensity" : 0.061236606897337904,
      "Density" : 0.9977977977977978
    },
    "euclideanDistance" : 62.01846028662868,
    "generation" : 34,
    "numberOfRefactorings" : 62,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5469161354964981,
      "MetricsIntensity" : 0.06123660689733791,
      "Density" : 3.2113402061855663
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "6815ff54-7934-4130-9124-2c9ee67bc40f",
    "objectives" : {
      "NumberOfConcerns" : 0.9961618981158409,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5443757821091738,
      "MetricsIntensity" : 0.06119572804421438,
      "Density" : 0.9965965965965966
    },
    "euclideanDistance" : 63.01813733531707,
    "generation" : 32,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7504598405885956,
      "LackOfCohesion" : 0.5443757821091738,
      "MetricsIntensity" : 0.06119572804421439,
      "Density" : 3.207474226804124
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.TriRpcStatus.cause], extractedMethods=[org.apache.dubbo.rpc.TriRpcStatus.asException(), org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.toMessage(), org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String), org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String), org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String), org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage(), org.apache.dubbo.rpc.TriRpcStatus.withDescription(String), org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable), org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "ebb4c379-10ba-45fb-9944-f7ab054376dc",
    "objectives" : {
      "NumberOfConcerns" : 0.9961618981158409,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5450616419667785,
      "MetricsIntensity" : 0.061184036894221784,
      "Density" : 0.9933933933933934
    },
    "euclideanDistance" : 64.01781005814874,
    "generation" : 35,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7504598405885956,
      "LackOfCohesion" : 0.5450616419667785,
      "MetricsIntensity" : 0.06118403689422179,
      "Density" : 3.1951062459755315
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "e6aadb95-0e90-4e69-beb7-de25b141ee4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9951151430565248,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5449979865363983,
      "MetricsIntensity" : 0.06114229443529482,
      "Density" : 0.997997997997998
    },
    "euclideanDistance" : 65.01759004559803,
    "generation" : 38,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7496932515337424,
      "LackOfCohesion" : 0.5449979865363983,
      "MetricsIntensity" : 0.06114229443529483,
      "Density" : 3.2119845360824737
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "e7199e58-2499-4f47-b21a-695fbfc1f4a0",
    "objectives" : {
      "NumberOfConcerns" : 0.9958129797627355,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.5449416592857167,
      "MetricsIntensity" : 0.061203979394849915,
      "Density" : 1.0
    },
    "euclideanDistance" : 65.01763107673011,
    "generation" : 39,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748774509803921,
      "LackOfCohesion" : 0.5449416592857167,
      "MetricsIntensity" : 0.061203979394849915,
      "Density" : 3.214285714285714
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "c83cd065-0726-44fc-ac91-f3da3b1c9325",
    "objectives" : {
      "NumberOfConcerns" : 0.9951151430565248,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.5448762349284262,
      "MetricsIntensity" : 0.06113797809290721,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 66.01734379139482,
    "generation" : 41,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7496932515337424,
      "LackOfCohesion" : 0.5448762349284262,
      "MetricsIntensity" : 0.061137978092907205,
      "Density" : 3.216494845360824
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL)', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getSide()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.common.URL'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.common.URL'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "1576893a-220f-4110-ad76-b6d0be806f1c",
    "objectives" : {
      "NumberOfConcerns" : 0.9958129797627355,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5443192039876515,
      "MetricsIntensity" : 0.06123091251439288,
      "Density" : 0.996996996996997
    },
    "euclideanDistance" : 67.0170551361604,
    "generation" : 34,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7509202453987724,
      "LackOfCohesion" : 0.5443192039876515,
      "MetricsIntensity" : 0.06123091251439289,
      "Density" : 3.2087628865979383
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.dubboCodeToTriCode(int)', targetType='org.apache.dubbo.rpc.RpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable, String)', targetType='org.apache.dubbo.rpc.StatusRpcException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.fromCode(int)', targetType='org.apache.dubbo.rpc.TriRpcStatus.Code'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.common.utils.StringUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.triCodeToDubboCode(Code)', targetType='org.apache.dubbo.rpc.RpcException'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "b4e4d59f-7409-4e57-a030-1c98e8480677",
    "objectives" : {
      "NumberOfConcerns" : 0.9954640614096302,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5445050797949542,
      "MetricsIntensity" : 0.061255045346008334,
      "Density" : 0.9993993993993994
    },
    "euclideanDistance" : 67.01708726749904,
    "generation" : 24,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7503067484662576,
      "LackOfCohesion" : 0.5445050797949542,
      "MetricsIntensity" : 0.061255045346008334,
      "Density" : 3.2144236960721186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "098ac7a2-cb6a-45a3-bcd8-b14a3c3c8d3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9954640614096302,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5443833281869824,
      "MetricsIntensity" : 0.06125068454160359,
      "Density" : 0.998998998998999
    },
    "euclideanDistance" : 68.01682918625305,
    "generation" : 32,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7503067484662576,
      "LackOfCohesion" : 0.5443833281869824,
      "MetricsIntensity" : 0.06125068454160359,
      "Density" : 3.213135866065679
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.rpc.model.ServiceModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "f7debd53-cb8e-49b6-8672-f8e4c0058880",
    "objectives" : {
      "NumberOfConcerns" : 0.9958129797627355,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5438124682484562,
      "MetricsIntensity" : 0.06120885741200769,
      "Density" : 0.9991991991991992
    },
    "euclideanDistance" : 68.01683263027758,
    "generation" : 20,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.749846719803801,
      "LackOfCohesion" : 0.5438124682484562,
      "MetricsIntensity" : 0.0612088574120077,
      "Density" : 3.21171171171171
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.rpc.model.ProviderModel.registryUrl, org.apache.dubbo.rpc.model.ProviderModel.providerUrl, org.apache.dubbo.rpc.model.ProviderModel.registered], extractedMethods=[org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "908e526b-5d86-4e3b-9aa9-ceafa9fb53fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9954640614096302,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.5443964065585946,
      "MetricsIntensity" : 0.061244818387221726,
      "Density" : 0.9995995995995997
    },
    "euclideanDistance" : 68.01683810963526,
    "generation" : 44,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7492335990190064,
      "LackOfCohesion" : 0.5443964065585946,
      "MetricsIntensity" : 0.06124481838722172,
      "Density" : 3.215067611075338
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.config.CompositeConfiguration.logger, org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded], extractedMethods=[org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String), org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded(), org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "bc872ebc-a77b-4494-a0f7-f3462bcbbc73",
    "objectives" : {
      "NumberOfConcerns" : 0.9951151430565248,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5449639055426947,
      "MetricsIntensity" : 0.061223237890468775,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 69.01655881265916,
    "generation" : 48,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748620478234212,
      "LackOfCohesion" : 0.5449639055426947,
      "MetricsIntensity" : 0.06122323789046877,
      "Density" : 3.2073406310367027
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "351f1430-40b0-4a7c-8013-68e34e9b716f",
    "objectives" : {
      "NumberOfConcerns" : 0.9951151430565248,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5451606010580367,
      "MetricsIntensity" : 0.0612172224531648,
      "Density" : 0.9973973973973974
    },
    "euclideanDistance" : 69.01656325365344,
    "generation" : 42,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.748620478234212,
      "LackOfCohesion" : 0.5451606010580367,
      "MetricsIntensity" : 0.0612172224531648,
      "Density" : 3.207984546039922
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel), org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "743cdce7-1ac4-4f53-ad5d-d54bebe1715a",
    "objectives" : {
      "NumberOfConcerns" : 0.9947662247034194,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.5445399926074264,
      "MetricsIntensity" : 0.06126848500810202,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 71.01608437334963,
    "generation" : 22,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7490797546012276,
      "LackOfCohesion" : 0.5445399926074264,
      "MetricsIntensity" : 0.06126848500810203,
      "Density" : 3.209407216494845
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "dc755a20-6692-47eb-9e12-016e52bded57",
    "objectives" : {
      "NumberOfConcerns" : 0.9947662247034194,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.5445399926074265,
      "MetricsIntensity" : 0.061268485008102,
      "Density" : 0.9971971971971972
    },
    "euclideanDistance" : 71.01608437334963,
    "generation" : 32,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7490797546012276,
      "LackOfCohesion" : 0.5445399926074265,
      "MetricsIntensity" : 0.061268485008102,
      "Density" : 3.209407216494845
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getOrDefault(ScopeModel, Class<T>)', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.common.convert.StringToCharacterConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "49ee36fb-08aa-41a6-a0a8-bd0361d95f51",
    "objectives" : {
      "NumberOfConcerns" : 0.9947662247034194,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5444182409994541,
      "MetricsIntensity" : 0.061264124203697264,
      "Density" : 0.9987987987987988
    },
    "euclideanDistance" : 72.01588229964513,
    "generation" : 31,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7490797546012276,
      "LackOfCohesion" : 0.5444182409994541,
      "MetricsIntensity" : 0.06126412420369727,
      "Density" : 3.214561855670103
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  }, {
    "solutionId" : "07ff7931-6c45-451c-9ec7-10cc41b1ced2",
    "objectives" : {
      "NumberOfConcerns" : 0.9947662247034194,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.544418240999454,
      "MetricsIntensity" : 0.06126412420369731,
      "Density" : 0.9987987987987988
    },
    "euclideanDistance" : 72.01588229964513,
    "generation" : 36,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7490797546012273,
      "LackOfCohesion" : 0.544418240999454,
      "MetricsIntensity" : 0.06126412420369732,
      "Density" : 3.214561855670103
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.status.reporter.FrameworkStatusReportService",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createRegistrationReport(String)', targetType='org.apache.dubbo.common.store.support.SimpleDataStore'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.hasReporter()', targetType='org.apache.dubbo.rpc.cluster.router.state.BitList.BitListIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.setApplicationModel(ApplicationModel)', targetType='org.apache.dubbo.qos.command.util.CommandHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.doReport(String, Object)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createMigrationStepReport(String, String, String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.createConsumptionReport(String, String, String, String)', targetType='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.status.reporter.FrameworkStatusReportService.logger', targetTypeName='org.apache.dubbo.registry.multicast.MulticastServiceDiscovery'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.transformName(String), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ProviderModel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getServiceInstance()', targetType='org.apache.dubbo.config.bootstrap.builders.ModuleBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.hashCode()', targetType='org.apache.dubbo.common.bytecode.DubboLoaderClassPath'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.addStatedUrl(RegisterStatedURL)', targetType='org.apache.dubbo.registry.multiple.MultipleRegistry.SingleNotifyListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.getStatedUrl()', targetType='org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ProviderModel.equals(Object)', targetType='org.apache.dubbo.auth.model.AccessKeyPair'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.config.CompositeConfiguration",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.getInternalProperty(String)', targetType='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.logger', targetTypeName='org.apache.dubbo.rpc.filter.AccessLogFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.isDynamicIncluded()', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.config.CompositeConfiguration.setDynamicIncluded(boolean)', targetType='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.config.CompositeConfiguration.dynamicIncluded', targetTypeName='org.apache.dubbo.rpc.cluster.merger.ByteArrayMerger'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.Version",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getPrefixDigits(String)', targetType='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.PREFIX_DIGITS_PATTERN', targetTypeName='org.apache.dubbo.common.url.component.PathURLAddress'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getFromFile(String)', targetType='org.apache.dubbo.common.URLStrParser.TempBuf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getResources(String)', targetType='org.apache.dubbo.metadata.rest.ServiceRestMetadata'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.getProtocolVersion()', targetType='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.Version.DEFAULT_DUBBO_PROTOCOL_VERSION', targetTypeName='org.apache.dubbo.rpc.cluster.router.mesh.rule.destination.TCPSettings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease270OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.isRelease263OrHigher(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(String, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.parseInt(String)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.Version.checkDuplicate(Class<?>, boolean)', targetType='org.apache.dubbo.common.utils.ClassUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getParameter(String)', targetType='org.apache.dubbo.common.utils.NamedThreadFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()', targetType='org.apache.dubbo.metadata.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAllParameters()', targetType='org.apache.dubbo.common.utils.AtomicPositiveInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getMethodParameter(String, String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getAnyMethodParameter(String)', targetType='org.apache.dubbo.rpc.model.ConsumerModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getScopeModel()', targetType='org.apache.dubbo.qos.command.impl.Startup'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.hashCode()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.equals(Object)', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.url.component.DubboServiceAddressURL.getOverrideURL()', targetType='org.apache.dubbo.gen.grpc.reactive.ReactorDubboGrpcGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.toString()', targetType='org.apache.dubbo.common.deploy.DeployListenerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='org.apache.dubbo.registry.retry.FailedRegisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state()', targetType='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.rpc.cluster.router.condition.ConditionStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.bucket', targetTypeName='org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.cancel()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.isCancelled()', targetType='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.ST_CANCELLED', targetTypeName='org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.TriRpcStatus",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toEncodedMessage()', targetType='org.apache.dubbo.common.serialize.java.JavaObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeComponent(String)', targetType='org.apache.dubbo.common.utils.LRU2Cache.PreCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.asException()', targetType='org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener.NotifyListenerWithKey'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.limitSizeTo1KB(String)', targetType='org.apache.dubbo.registry.client.metadata.store.MetaCacheManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.decodeMessage(String)', targetType='org.apache.dubbo.rpc.model.ModuleServiceRepository'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.getStatus(Throwable)', targetType='com.alibaba.dubbo.container.page.pages.StatusPageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.encodeMessage(String)', targetType='org.apache.dubbo.qos.command.impl.Ready'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.toMessage()', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.withDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.TriRpcStatus.appendDescription(String)', targetType='org.apache.dubbo.common.status.Status'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.model.ScopeModelUtil",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getModuleModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.getFrameworkModel(ScopeModel)', targetType='org.apache.dubbo.rpc.model.ModuleModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getExtensionLoader(Class<T>, ScopeModel)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.model.ScopeModelUtil.<T>getDefaultScopeModel(Class<T>)', targetType='org.apache.dubbo.rpc.model.ApplicationModel'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStoreFactory",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.safeName(String)', targetType='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.ESCAPE', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.LEGAL_CHARACTERS', targetTypeName='org.apache.dubbo.rpc.service.EchoServiceDetector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.tryFileLock(FileCacheStore.Builder, String)', targetType='org.apache.dubbo.validation.support.jvalidation.JValidationNew'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(String, String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStoreFactory.getFile(String)', targetType='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.SUFFIX', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.cache.FileCacheStoreFactory.logger', targetTypeName='org.apache.dubbo.rpc.model.AsyncMethodInfo'"
      } ]
    } ]
  } ]
}