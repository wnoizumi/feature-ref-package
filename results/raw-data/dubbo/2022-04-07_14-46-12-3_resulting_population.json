{
  "executionId" : "d3dd5f5a-a84a-419c-a38d-7b5cdf5548b9",
  "computingTime" : 4249307,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 28,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2185897435897433,
    "meanNumConcerns" : 1.753836709637815,
    "meanMetricsIntensity" : 0.06120302141264511,
    "meanLackOfCohesion" : 0.54059293177879
  },
  "population" : [ {
    "solutionId" : "38a780f2-7938-496b-8d1a-2aacb6d34ff3",
    "objectives" : {
      "NumberOfConcerns" : 0.9954497724886244,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5477993491430597,
      "MetricsIntensity" : 0.06030032114410895,
      "Density" : 0.99681338378809
    },
    "euclideanDistance" : 112.01021505839232,
    "generation" : 1,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7426470588235297,
      "LackOfCohesion" : 0.5477993491430597,
      "MetricsIntensity" : 0.060300321144108965,
      "Density" : 3.2103912764592684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "4a1f5127-9eec-41d1-88df-2b1010bcab13",
    "objectives" : {
      "NumberOfConcerns" : 0.9957997899894995,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5477401476026642,
      "MetricsIntensity" : 0.06028873858942353,
      "Density" : 0.99681338378809
    },
    "euclideanDistance" : 112.01021787384015,
    "generation" : 1,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7432598039215688,
      "LackOfCohesion" : 0.5477401476026642,
      "MetricsIntensity" : 0.06028873858942354,
      "Density" : 3.2103912764592684
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "df95c6ea-374b-46b4-bee9-b0e84a372999",
    "objectives" : {
      "NumberOfConcerns" : 0.9957997899894995,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5476327780475743,
      "MetricsIntensity" : 0.06028810407487793,
      "Density" : 0.9970125473013344
    },
    "euclideanDistance" : 112.01021912109763,
    "generation" : 1,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7432598039215692,
      "LackOfCohesion" : 0.5476327780475743,
      "MetricsIntensity" : 0.060288104074877925,
      "Density" : 3.2110327132777408
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "892e9ddf-55e2-40e3-a024-f287b3a6a72c",
    "objectives" : {
      "NumberOfConcerns" : 0.9957997899894995,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5476703873441129,
      "MetricsIntensity" : 0.060284984378362015,
      "Density" : 0.9970125473013344
    },
    "euclideanDistance" : 112.01021930330167,
    "generation" : 1,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.743259803921569,
      "LackOfCohesion" : 0.5476703873441129,
      "MetricsIntensity" : 0.06028498437836202,
      "Density" : 3.211032713277741
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "1d119759-119f-43d2-a8f5-523f5e82833d",
    "objectives" : {
      "NumberOfConcerns" : 0.9954497724886244,
      "NumberOfRefactorings" : 112.0,
      "LackOfCohesion" : 0.5477319211569998,
      "MetricsIntensity" : 0.06029656693304741,
      "Density" : 0.9998008364867557
    },
    "euclideanDistance" : 112.01024135272465,
    "generation" : 1,
    "numberOfRefactorings" : 112,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7426470588235299,
      "LackOfCohesion" : 0.5477319211569998,
      "MetricsIntensity" : 0.06029656693304741,
      "Density" : 3.220012828736369
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "2adef8ad-11e9-48cd-85e7-4a33fa8be6be",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5478281803222635,
      "MetricsIntensity" : 0.06028738414491273,
      "Density" : 0.9962158932483569
    },
    "euclideanDistance" : 113.01011644942315,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7420343137254901,
      "LackOfCohesion" : 0.5478281803222635,
      "MetricsIntensity" : 0.06028738414491272,
      "Density" : 3.208466966003849
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "7f6c71a8-8105-43a9-86ab-949f9f191d37",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5477149873336775,
      "MetricsIntensity" : 0.06028426444839678,
      "Density" : 0.9994025094602669
    },
    "euclideanDistance" : 113.01014403494132,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7420343137254901,
      "LackOfCohesion" : 0.5477149873336775,
      "MetricsIntensity" : 0.06028426444839678,
      "Density" : 3.2187299550994233
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "79db0737-ad3f-45eb-8313-509ce9728ed2",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5474350985612574,
      "MetricsIntensity" : 0.06028489896294242,
      "Density" : 0.9996016729735112
    },
    "euclideanDistance" : 113.01014444059068,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.74203431372549,
      "LackOfCohesion" : 0.5474350985612574,
      "MetricsIntensity" : 0.06028489896294242,
      "Density" : 3.219371391917896
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "23df1f28-7eca-4a83-8898-6b83504e3657",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5478281803222637,
      "MetricsIntensity" : 0.06028376822548293,
      "Density" : 0.9994025094602669
    },
    "euclideanDistance" : 113.01014458333447,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7420343137254901,
      "LackOfCohesion" : 0.5478281803222637,
      "MetricsIntensity" : 0.06028376822548293,
      "Density" : 3.218729955099423
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "1519fd40-bcc6-497e-8ad7-7ad7dbf226f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5478281803222635,
      "MetricsIntensity" : 0.06028426444839674,
      "Density" : 0.9994025094602669
    },
    "euclideanDistance" : 113.01014458359917,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.74203431372549,
      "LackOfCohesion" : 0.5478281803222635,
      "MetricsIntensity" : 0.06028426444839674,
      "Density" : 3.218729955099424
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "521406d8-94ac-44ba-8413-b8f71eb9f96f",
    "objectives" : {
      "NumberOfConcerns" : 0.9961498074903745,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5465382225152414,
      "MetricsIntensity" : 0.060297339739224756,
      "Density" : 1.0001991635132443
    },
    "euclideanDistance" : 113.01015464374652,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.743872549019608,
      "LackOfCohesion" : 0.5465382225152414,
      "MetricsIntensity" : 0.060297339739224756,
      "Density" : 3.2212957023733155
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "1175685a-f7b3-40a3-bb11-d6671c37aae3",
    "objectives" : {
      "NumberOfConcerns" : 0.9957997899894995,
      "NumberOfRefactorings" : 113.0,
      "LackOfCohesion" : 0.5476756791575768,
      "MetricsIntensity" : 0.06028064852896701,
      "Density" : 1.0
    },
    "euclideanDistance" : 113.01015529423836,
    "generation" : 1,
    "numberOfRefactorings" : 113,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7432598039215692,
      "LackOfCohesion" : 0.5476756791575768,
      "MetricsIntensity" : 0.060280648528967,
      "Density" : 3.2206542655548436
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "d3d0a5bb-fbe0-436f-8c72-23cfa15dec63",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 114.0,
      "LackOfCohesion" : 0.5476430966801414,
      "MetricsIntensity" : 0.060288018659458306,
      "Density" : 0.9994025094602669
    },
    "euclideanDistance" : 114.01005471669956,
    "generation" : 1,
    "numberOfRefactorings" : 114,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.74203431372549,
      "LackOfCohesion" : 0.5476430966801414,
      "MetricsIntensity" : 0.060288018659458306,
      "Density" : 3.218729955099423
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "ac0cf367-4cf5-485f-b28a-0d7ca7a0ccee",
    "objectives" : {
      "NumberOfConcerns" : 0.9954497724886244,
      "NumberOfRefactorings" : 114.0,
      "LackOfCohesion" : 0.5476354825290055,
      "MetricsIntensity" : 0.060281599947098384,
      "Density" : 0.9994025094602669
    },
    "euclideanDistance" : 114.0100577322829,
    "generation" : 1,
    "numberOfRefactorings" : 114,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7426470588235299,
      "LackOfCohesion" : 0.5476354825290055,
      "MetricsIntensity" : 0.06028159994709838,
      "Density" : 3.218729955099423
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "d6b5d6e6-a780-47e1-8b68-7a109a86a204",
    "objectives" : {
      "NumberOfConcerns" : 0.9936996849842492,
      "NumberOfRefactorings" : 115.0,
      "LackOfCohesion" : 0.5476774780884592,
      "MetricsIntensity" : 0.06055420532782586,
      "Density" : 0.9980083648675563
    },
    "euclideanDistance" : 115.00994338400515,
    "generation" : 1,
    "numberOfRefactorings" : 115,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7395833333333333,
      "LackOfCohesion" : 0.5476774780884592,
      "MetricsIntensity" : 0.060554205327825864,
      "Density" : 3.2142398973701094
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initWith(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9509d15f-090e-4f1e-a60d-f5f906652d95",
    "objectives" : {
      "NumberOfConcerns" : 0.9940497024851243,
      "NumberOfRefactorings" : 115.0,
      "LackOfCohesion" : 0.5475166666977083,
      "MetricsIntensity" : 0.06026475966932943,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 115.0099489482323,
    "generation" : 1,
    "numberOfRefactorings" : 115,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7401960784313724,
      "LackOfCohesion" : 0.5475166666977083,
      "MetricsIntensity" : 0.06026475966932943,
      "Density" : 3.215522771007055
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initWith(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "fb3b0d9e-274d-47f9-8e5a-dc248e2e60b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9940497024851243,
      "NumberOfRefactorings" : 115.0,
      "LackOfCohesion" : 0.5475551859850352,
      "MetricsIntensity" : 0.06026290900190474,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 115.00994913064405,
    "generation" : 1,
    "numberOfRefactorings" : 115,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7401960784313724,
      "LackOfCohesion" : 0.5475551859850352,
      "MetricsIntensity" : 0.060262909001904744,
      "Density" : 3.215522771007056
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initWith(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "7aa13ed8-322c-47a1-95ec-0209a0eec0bf",
    "objectives" : {
      "NumberOfConcerns" : 0.9950997549877494,
      "NumberOfRefactorings" : 115.0,
      "LackOfCohesion" : 0.5473356505884974,
      "MetricsIntensity" : 0.0602886002977918,
      "Density" : 0.9998008364867557
    },
    "euclideanDistance" : 115.00996929077385,
    "generation" : 1,
    "numberOfRefactorings" : 115,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7420343137254901,
      "LackOfCohesion" : 0.5473356505884974,
      "MetricsIntensity" : 0.060288600297791796,
      "Density" : 3.220012828736368
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "68f41c0a-6d9a-4976-95bb-e1a635cae6c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9947497374868743,
      "NumberOfRefactorings" : 116.0,
      "LackOfCohesion" : 0.547668635822488,
      "MetricsIntensity" : 0.060280452763191626,
      "Density" : 0.9960167297351126
    },
    "euclideanDistance" : 116.00984937079176,
    "generation" : 1,
    "numberOfRefactorings" : 116,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7414215686274508,
      "LackOfCohesion" : 0.547668635822488,
      "MetricsIntensity" : 0.06028045276319163,
      "Density" : 3.2078255291853757
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.api.ConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.getCacheFilePath()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.common.utils.ClassLoaderResourceLoader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.getServiceModel()]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "0b75e42e-fe89-4a19-8dbb-ed4b32947a14",
    "objectives" : {
      "NumberOfConcerns" : 0.9936996849842492,
      "NumberOfRefactorings" : 118.0,
      "LackOfCohesion" : 0.5478557167494023,
      "MetricsIntensity" : 0.060589016833035456,
      "Density" : 0.9954192391953794
    },
    "euclideanDistance" : 118.00966958449224,
    "generation" : 1,
    "numberOfRefactorings" : 118,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7395833333333333,
      "LackOfCohesion" : 0.5478557167494023,
      "MetricsIntensity" : 0.060589016833035456,
      "Density" : 3.2059012187299545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "ae92dea3-b934-47b1-8a31-2b638c529dc3",
    "objectives" : {
      "NumberOfConcerns" : 0.9936996849842492,
      "NumberOfRefactorings" : 118.0,
      "LackOfCohesion" : 0.5478736810018399,
      "MetricsIntensity" : 0.06058838231848983,
      "Density" : 0.9954192391953794
    },
    "euclideanDistance" : 118.00966966756624,
    "generation" : 1,
    "numberOfRefactorings" : 118,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7395833333333335,
      "LackOfCohesion" : 0.5478736810018399,
      "MetricsIntensity" : 0.06058838231848982,
      "Density" : 3.2059012187299545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.api.ConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "5611b865-ab03-459f-a92a-650cc51c3f59",
    "objectives" : {
      "NumberOfConcerns" : 0.9936996849842492,
      "NumberOfRefactorings" : 118.0,
      "LackOfCohesion" : 0.5458085874941363,
      "MetricsIntensity" : 0.06028470319716706,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 118.00968517984437,
    "generation" : 1,
    "numberOfRefactorings" : 118,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7395833333333335,
      "LackOfCohesion" : 0.5458085874941363,
      "MetricsIntensity" : 0.06028470319716707,
      "Density" : 3.2155227710070555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "bfd3bbdf-0c7f-4df7-92ab-507e642b55a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9943997199859993,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.5477922174783356,
      "MetricsIntensity" : 0.06059104559704165,
      "Density" : 0.9960167297351126
    },
    "euclideanDistance" : 119.00959888898608,
    "generation" : 1,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7408088235294117,
      "LackOfCohesion" : 0.5477922174783356,
      "MetricsIntensity" : 0.06059104559704164,
      "Density" : 3.2078255291853752
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.api.ConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "920247be-d1a3-430e-802d-0977627b2d84",
    "objectives" : {
      "NumberOfConcerns" : 0.9943997199859993,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.5467283501843276,
      "MetricsIntensity" : 0.06027230982652292,
      "Density" : 0.9986058554072894
    },
    "euclideanDistance" : 119.00961553209802,
    "generation" : 1,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7408088235294112,
      "LackOfCohesion" : 0.5467283501843276,
      "MetricsIntensity" : 0.060272309826522916,
      "Density" : 3.2161642078255297
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "c240c75d-bdf7-41e1-9124-9ce632cd25a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9936996849842492,
      "NumberOfRefactorings" : 120.0,
      "LackOfCohesion" : 0.5479491152635948,
      "MetricsIntensity" : 0.060286553864591745,
      "Density" : 0.9954192391953794
    },
    "euclideanDistance" : 120.00950871171499,
    "generation" : 1,
    "numberOfRefactorings" : 120,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7395833333333335,
      "LackOfCohesion" : 0.5479491152635948,
      "MetricsIntensity" : 0.060286553864591745,
      "Density" : 3.2059012187299545
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.api.ConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "c1c451f4-6e21-476f-a043-79222d45e898",
    "objectives" : {
      "NumberOfConcerns" : 0.9943997199859993,
      "NumberOfRefactorings" : 120.0,
      "LackOfCohesion" : 0.5479491152635948,
      "MetricsIntensity" : 0.06027438809155643,
      "Density" : 0.9956184027086238
    },
    "euclideanDistance" : 120.00951615618528,
    "generation" : 1,
    "numberOfRefactorings" : 120,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7408088235294117,
      "LackOfCohesion" : 0.5479491152635948,
      "MetricsIntensity" : 0.06027438809155642,
      "Density" : 3.2065426555484287
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.api.ConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "8121d5dc-46a9-40f1-9f03-1b401b16f4e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9933496674833742,
      "NumberOfRefactorings" : 120.0,
      "LackOfCohesion" : 0.5467344335925337,
      "MetricsIntensity" : 0.06029533131580606,
      "Density" : 0.998406691894045
    },
    "euclideanDistance" : 120.00952509510302,
    "generation" : 1,
    "numberOfRefactorings" : 120,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7389705882352944,
      "LackOfCohesion" : 0.5467344335925337,
      "MetricsIntensity" : 0.060295331315806056,
      "Density" : 3.2155227710070555
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCluster(String)', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.proxy', targetTypeName='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.deleteFile(File)', targetType='org.apache.dubbo.spring.boot.actuate.autoconfigure.DubboEndpointAnnotationAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.close()', targetType='org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getLocalAddress()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.checkClient()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  }, {
    "solutionId" : "16dcbdb1-6b6c-45ce-8f29-44b6d60e3e5c",
    "objectives" : {
      "NumberOfConcerns" : 0.9943997199859993,
      "NumberOfRefactorings" : 126.0,
      "LackOfCohesion" : 0.5470982992010346,
      "MetricsIntensity" : 0.06024826374866611,
      "Density" : 0.9982075283808006
    },
    "euclideanDistance" : 126.00907981361938,
    "generation" : 1,
    "numberOfRefactorings" : 126,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.740808823529412,
      "LackOfCohesion" : 0.5470982992010346,
      "MetricsIntensity" : 0.06024826374866611,
      "Density" : 3.2148813341885822
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.state', targetTypeName='org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.timer()', targetType='org.apache.dubbo.config.spring.status.SpringStatusChecker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.remove()', targetType='org.apache.dubbo.remoting.api.ConnectionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout.task()', targetType='com.alibaba.dubbo.rpc.Result.AbstractResult'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.AbstractInterfaceConfig",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.notHasSelfRegistryProperty()', targetType='org.apache.dubbo.registry.zookeeper.ZookeeperInstance'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getTag()', targetType='org.apache.dubbo.rpc.cluster.support.ForkingCluster'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getArgumentByIndex(MethodConfig, int)', targetType='org.apache.dubbo.qos.command.impl.PortTelnet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterface(String)', targetType='org.apache.dubbo.rpc.protocol.tri.SingleProtobufUtils.SingleMessageMarshaller'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.postProcessAfterScopeModelChanged(ScopeModel, ScopeModel)', targetType='org.apache.dubbo.rpc.protocol.tri.ExceptionUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getInterfaceClassLoader()', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setInterfaceClassLoader(ClassLoader)', targetType='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.interfaceClassLoader', targetTypeName='org.apache.dubbo.common.logger.log4j2.Log4j2LoggerAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getModule()', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setModule(ModuleConfig)', targetType='org.apache.dubbo.config.utils.CompositeReferenceCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCluster()', targetType='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.cluster', targetTypeName='org.apache.dubbo.auth.exception.AccessKeyNotFoundException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion()', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setVersion(String)', targetType='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.version', targetTypeName='org.apache.dubbo.config.spring.ReferenceBean.DubboReferenceLazyInitTargetSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setAuth(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getAuth()', targetType='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.auth', targetTypeName='org.apache.dubbo.remoting.transport.AbstractPeer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getOwner()', targetType='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.owner', targetTypeName='org.apache.dubbo.rpc.cluster.router.state.CacheableStateRouterFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.convertRegistryIdsToRegistries()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.checkRegistry()', targetType='org.apache.dubbo.rpc.cluster.merger.MergerFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.addMethod(MethodConfig)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMethods()', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMethods(List<? extends MethodConfig>)', targetType='org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getListener()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getStub()', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setListener(String)', targetType='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.listener', targetTypeName='org.apache.dubbo.registry.ListenerRegistryWrapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setCallbacks(Integer)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.methods(Class<?>)', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getEnvironment()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getCallbacks()', targetType='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.callbacks', targetTypeName='org.apache.dubbo.common.config.configcenter.nop.NopDynamicConfigurationFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(Boolean)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.initServiceMetadata(AbstractInterfaceConfig)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setStub(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setOnconnect(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setTag(String)', targetType='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.serviceMetadata', targetTypeName='org.apache.dubbo.remoting.transport.AbstractCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistry()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig>)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setProxy(String)', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getRegistries()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getScope()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getProxy()', targetType='org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setGroup(String)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getExportedUrls()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getMonitor()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMonitor(MonitorConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getGroup(AbstractInterfaceConfig)', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.toUrl()', targetType='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.group', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.urls', targetTypeName='org.apache.dubbo.rpc.AttachmentsAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getFilter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getVersion(AbstractInterfaceConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.verifyStubAndLocal(String, String, Class<?>)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setFilter(String)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setConfigCenter(ConfigCenterConfig)', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getConfigCenter()', targetType='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.filter', targetTypeName='org.apache.dubbo.config.bootstrap.builders.ProtocolBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setLayer(String)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getApplication()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.getLayer()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.computeValidRegistryIds()', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setMetadataReportConfig(MetadataReportConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.setApplication(ApplicationConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.config.AbstractInterfaceConfig.completeCompoundConfigs(AbstractInterfaceConfig)', targetType='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.application', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.config.AbstractInterfaceConfig.layer', targetTypeName='org.apache.dubbo.common.resource.GlobalResourceInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.cache.FileCacheStore",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.newBuilder()', targetType='org.apache.dubbo.qos.command.impl.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.refreshCache(Map<String,String>, String, long)', targetType='com.alibaba.dubbo.rpc.Result.CompatibleResult'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.common.cache.FileCacheStore.destroy()', targetType='org.apache.dubbo.cache.support.AbstractCacheFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sendFeedback(Channel, Request, Throwable)', targetType='org.apache.dubbo.rpc.cluster.merger.ListMerger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.sent(Channel, Object)', targetType='org.apache.dubbo.remoting.ExecutionException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getExecutorService()', targetType='org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getSharedExecutorService()', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler.getPreferredExecutorService(Object)', targetType='org.apache.dubbo.qos.QosScopeModelInitializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.send(Object, boolean)', targetType='org.apache.dubbo.rpc.protocol.tri.observer.ClientCallToObserverAdapter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.startClose()', targetType='org.apache.dubbo.registry.support.AbstractRegistry.SaveProperties'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getOrAddChannel(Channel)', targetType='org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isConnected()', targetType='org.apache.dubbo.rpc.cluster.configurator.absent.AbsentConfiguratorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int)', targetType='org.apache.dubbo.metadata.rest.jaxrs.ParamAnnotationParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.isClosed()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close()', targetType='org.apache.dubbo.metadata.annotation.processing.builder.EnumTypeDefinitionBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hasAttribute(String)', targetType='org.apache.dubbo.common.convert.StringToCharArrayConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getRemoteAddress()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.hashCode()', targetType='org.apache.dubbo.registry.retry.FailedUnregisteredTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.toString()', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.equals(Object)', targetType='org.apache.dubbo.common.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.getUrl()', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.setAttribute(String, Object)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel.close(int)', targetType='org.apache.dubbo.registry.integration.RegistryProtocol.InvokerDelegate'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.config.spring.reference.ReferenceBeanManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.apache.dubbo.config.spring.reference.ReferenceBeanManager.setApplicationContext(ApplicationContext), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getReferences(), org.apache.dubbo.config.spring.reference.ReferenceBeanManager.getBeanNamesByKey(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getLocalAddress()', targetType='org.apache.dubbo.remoting.transport.ChannelDelegate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warning()', targetType='org.apache.dubbo.common.utils.ClassLoaderResourceLoader'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningCount', targetTypeName='org.apache.dubbo.common.utils.ClassLoaderResourceLoader'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.warningPeriod', targetTypeName='org.apache.dubbo.common.utils.ClassLoaderResourceLoader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.initClient()', targetType='org.apache.dubbo.rpc.protocol.tri.call.BiStreamServerCallListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getRemoteAddress()', targetType='org.apache.dubbo.common.timer.HashedWheelTimer.HashedWheelTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object)', targetType='org.apache.dubbo.metadata.annotation.processing.rest.jaxrs.HeaderParamParameterProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, int, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.request(Object, ExecutorService)', targetType='org.apache.dubbo.config.nested.PrometheusConfig.Exporter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getUrl()', targetType='org.apache.dubbo.config.spring.context.event.DubboConfigInitEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getChannelHandler()', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.send(Object, boolean)', targetType='org.apache.dubbo.remoting.http.servlet.ServletHttpServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getExchangeHandler()', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.getAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.hasAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.setAttribute(String, Object)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.reset(Parameters)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient.removeAttribute(String)', targetType='org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput'"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.common.url.component.DubboServiceAddressURL",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.overrideURL], extractedMethods=[org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL, ServiceConfigURL), org.apache.dubbo.common.url.component.DubboServiceAddressURL.valueOf(String, URL)]"
      } ]
    }, {
      "refactoredTypeName" : "org.apache.dubbo.registry.integration.AbstractConfiguratorListener",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.configurators, org.apache.dubbo.registry.integration.AbstractConfiguratorListener.securityKey], extractedMethods=[org.apache.dubbo.registry.integration.AbstractConfiguratorListener.setConfigurators(List<Configurator>), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.initSecurityKey(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.notifyOverrides(), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.stopListen(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.genConfiguratorsFromRawRule(String), org.apache.dubbo.registry.integration.AbstractConfiguratorListener.getConfigurators()]"
      } ]
    } ]
  } ]
}